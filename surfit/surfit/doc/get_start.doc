/*! \page get_start Getting started

<H2>Content</H2>
\li <A href="#starting">Starting surfit</A>
\li <A href="#loading">Loading data</A>
\li <A href="#grid">Creating grid</A>
\li <A href="#gridding">Gridding</A>
\li <A href="#saving">Saving results</A>
\li <A href="#visual">Visualizing results</A>
\li <A href="#roff">Working with ROFF files</A>

<H2><A NAME="starting">Starting surfit</A></H2>
surfit based on Tcl scripting language, so first of all you must
start tclsh. It means that you must have Tcl installed on your 
computer. 

After that you can load libsurfit shared library (or dll) with command:

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<pre>
$ load libsurfit[info sharedlibextension]
</pre>
</TD>
</TR>
</TABLE>

Under Windows this command can be simplified:

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<pre>
$ load libsurfit
</pre>
</TD>
</TR>
</TABLE>

Under Unix you can type

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<pre>
$ load libsurfit.so
</pre>
</TD>
</TR>
</TABLE>

If libsurfit was succesfully loaded into memory, you would see the license text:

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
surfit version 1.0.0pre, Copyright (C) 2002-2004 M.V.Dmitrievsky & V.N.Kutrunov
surfit comes with ABSOLUTELY NO WARRANTY; for details type `show_w'.
This is free software, and you are welcome to redistribute it
under certain conditions; type `show_c' for details.
</PRE></TT>
</TD>
</TR>
</TABLE>

A common error received by first-time users is the following:

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
$ load libsurfit.so
couldn't load file "libsurfit.so": libsurfit.so: cannot open shared object file:
No such file or directory
$
</PRE></TT>
</TD>
</TR>
</TABLE>

<H3>Unix environment</H3>

This error is generated because the dynamic linker can't locate the libsurfit.so library. 
When shared libraries are loaded, the system normally only checks a few standard locations 
such as /usr/lib and /usr/local/lib. To fix this problem, there are several things you can do. 
First, you can set the LD_LIBRARY_PATH environment variable to include the directory with 
libsurfit library. If setting LD_LIBRARY_PATH, be aware that setting this variable can introduce 
a noticeable performance impact on all other applications that you run. 
To set it only for Tcl, you might want to do this instead: 

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
$ env LD_LIBRARY_PATH=/home/beazley/projects/lib tclsh
</PRE></TT>
</TD>
</TR>
</TABLE>
         
Finally, you can use a command such as <TT>ldconfig</TT> to add additional search paths to the default 
system configuration (this requires root access and you will need to read the man pages).

<H3>Windows environment</H3>
This error is generated because system can't locate the libsurfit.dll library. To fix this probelm
you must set the PATH environment variable to the directory with libsurfit.dll:

<STRONG>(Windows 95/98/Me)</STRONG>:
The search path in Windows is normally specified in the autoexec.bat
file, which is typically located in the root directory (c:\). To
add the surfit installation directory to your search path do
the following from an MS-DOS Prompt Window:
\li Type the following:
<BR><TT>edit c:\\autoexec.bat</TT><BR>
\li The contents of your autoexec.bat file will appear in a
text editor. Find the line in your autoexec.bat that looks
similar to the following:
<BR><TT>PATH C:\\DOS;C:\\WINDOWS;C:\\NETWORK;C:\\NAV<BR></TT>
\li At the end of this line add the following:
<BR><TT>;"c:\program files\surfit\bin"<BR></TT>
This assumes that you have installed surfit
(libsurfit.dll) in the c:\\program files\\surfit\\bin
directory. If you have installed it in another directory,
verify that you have entered an appropriate path. The
leading semicolon is only necessary if there is not
already a semicolon specified at the end of the "PATH"
line.
\li Press Alt+F+X. You will be prompted to save the file
before exiting. Enter Y.
\li Close any open applications and restart your PC.
You may now access libsurfit.dll from any directory
without specifying a path.
An alternative to steps 2 and 3 above is to add the following line
at the end of your autoexec.bat file:
SET PATH = "C:\program files\surfit\bin";%PATH%

<STRONG>(Windows NT/Windows 2000)</STRONG>:
\li Close any open MS-DOS Prompt Windows.
\li Select Settings | Control Panel from the Start Menu.
\li In the Control Panel, double click the System icon. The System (Properties) dialog appears.
\li Select the Environment Tab.
\li Select the PATH variable in the System (Environment) Variables or User (Environment) Variables boxes. If you
are unable to locate the PATH variable, enter the following in the Variable box:
<BR>
<TT>path</TT><BR>
Enter something similar to the following in the Value box:
<BR>
<TT>"c:\program files\surfit\bin"</TT><BR>

<H2><A NAME="loading">Loading data to surfit</A></H2>

<H3> Loading from text files </H3>

To examine data, already loaded use \ref mem_info command.

<H4>loading points</H4>

The \ref task_read command reads formatted text files containing interpolation scattered data points 
coordinates. The text file should organized as a rectangular table of numbers, separated by blanks, with one row 
per line, and an equal number of elements in each row.  For example, outside of surfit, create a 
text file containing these four lines: 

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
    16.0     3.0     2.0    13.0
     5.0    10.0    11.0     8.0
     9.0     6.0     7.0    12.0
     4.0    15.0    14.0     1.0
</PRE></TT>
</TD>
</TR>
</TABLE>

Store the file under the name points.txt Then the command 

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
$ \ref task_read points.txt my_points 4 1 2 3
13/01/05 15:02:52 : reading task "my_points" from file points.txt
</PRE></TT>
</TD>
</TR>
</TABLE>

reads the file and creates a variable, \ref surfit_task, containing 4 points with X,Y and Z coordinates
placed in first, second and third columns. If points.txt consists of only 3 columns: 

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
    16.0     3.0     2.0
     5.0    10.0    11.0
     9.0     6.0     7.0
     4.0    15.0    14.0
</PRE></TT>
</TD>
</TR>
</TABLE>

then the command arguments can be truncated:

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
$ \ref task_read points.txt my_points
13/01/05 15:02:52 : reading task "my_points" from file points.txt
</PRE></TT>
</TD>
</TR>
</TABLE>

You can get some info about variables \ref surfit_task and \ref surfit_tasks by following commands:

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
# Task existance checking:
$ \ref task_check
1
# If \ref surfit_task does not exists, surfit returns 0.
#
# Print \ref surfit_task name
$ \ref task_name
13/01/05 15:02:52 : surfit_task name is "my_points"
#
# Amount of points in task
$ \ref task_size
4
$ Minimum and maximum values:
$ \ref task_minx
4.0
$ \ref task_maxx
16.0
$ \ref task_miny
3.0
$ \ref task_maxy
15.0
$ \ref task_minz
2.0
$ \ref task_maxz
14.0
</PRE></TT>
</TD>
</TR>
</TABLE>

\ref tcl_task "Here" you can browse all commands for \ref surfit::task "task".

The \ref wtask_read command reads formatted text files containing approximation scattered data points 
coordinates and informational weights. The command 

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
$ \ref wtask_read points.txt my_points
</PRE></TT>
</TD>
</TR>
</TABLE>

reads the file and creates a variable, \ref surfit_wtask, containing 4 points with X,Y and Z coordinates
placed in first, second and third columns. The fourth column is for the informational weights.
\ref tcl_wtask "Here" you can browse all commands for \ref surfit::wtask "wtask".


<H4>loading curves</H4>

surfit supports several types of curves:
<TABLE BORDER="1" COLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR><TD><B>\ref surfit::curv  "curv"</B>  </TD><TD>2D piecewise linear curve<TD></TR>
<TR><TD><B>\ref surfit::area  "area"</B>  </TD><TD>area with constant value for <B><I>interpolation</I></B> described with 2D piecewise linear curve<TD></TR>
<TR><TD><B>\ref surfit::warea "warea"</B> </TD><TD>area with constant value for <B><I>approximation</I></B> described with 2D piecewise linear curve<TD></TR>
<TR><TD><B>\ref surfit::flt   "flt"</B>   </TD><TD>tectonical fault line (describes the line of dissacording of surface parts)<TD></TR>
<TR><TD><B>\ref surfit::iso   "iso"</B>   </TD><TD>isoline for <B><I>interpolation</I></B><TD></TR>
<TR><TD><B>\ref surfit::wiso  "wiso"</B>  </TD><TD>isoline for <B><I>approximation</I></B><TD></TR>
<TR><TD><B>\ref surfit::cntr  "cntr"</B>  </TD><TD>3D piecewise linear curve for <B><I>interpolation</I></B><TD></TR>
<TR><TD><B>\ref surfit::wcntr "wcntr"</B> </TD><TD>3D piecewise linear curve for <B><I>approximation</I></B><TD></TR>
</TABLE>

The curves reading commands reads formatted text files containing coordinates of curve nodes. 
The text file should organized as a rectangular table of numbers, separated by blanks, with one row per line, 
and an equal number of elements in each row. For example, outside of surfit, create a text file curve.txt containing 
these lines:

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
57099.085411 	60514.295924
57065.433147 	60505.330833
57003.367936 	60511.976722
56999.6438 	60513.47112
56948.876992 	60541.501355
56917.649718 	60581.114875
56914.83462 	60637.571493
56919.935389 	60652.716872
56959.468869 	60684.079163
56995.964528 	60685.666331
57018.666043 	60682.271289
57060.443913 	60665.765085
57102.780849 	60632.737514
57119.301496 	60610.562283
57133.154687 	60592.618067
57138.674487 	60577.882496
57131.297193 	60533.391477
57116.652575 	60516.980407
57099.085411 	60514.295924
</PRE></TT>
</TD>
</TR>
</TABLE>

To read curve from file curve.txt into \ref surfit_cntr variable use command:
<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
$ \ref curv_read curve.txt my_curve
14/01/05 11:00:12 : reading curve "my_curve" from file curve.txt
1
</PRE></TT>
</TD>
</TR>
</TABLE>

To read isoline for interpolation with 50 value from file curve.txt into \ref surfit_iso variable use command:
<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
$ \ref iso_read curve.txt my_isoline 50
14/01/05 11:16:10 : reading iso "my_isoline" from file curve.txt
1
</PRE></TT>
</TD>
</TR>
</TABLE>

\ref tcl_curves "Here" you can browse all commands for working with curves.

<H4>loading functions</H4>
surfit supports several types of functions (surfaces):
<TABLE BORDER="1" COLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR><TD><B>\ref surfit::func    "func"</B>    </TD><TD>function for <B><I>interpolation</I></B><TD></TR>
<TR><TD><B>\ref surfit::wfunc   "wfunc"</B>   </TD><TD>function for <B><I>approximation</I></B><TD></TR>
<TR><TD><B>\ref surfit::trend   "trend"</B>   </TD><TD>trend function to describe general function behaviour<TD></TR>
<TR><TD><B>\ref surfit::defarea "defarea"</B> </TD><TD>domain of the function<TD></TR>
</TABLE>

Functions (surfaces) can be loaded from Surfer GRD-ASCII and surfit extension of ROFF files. 
To load surface from Surfer GRD-ASCII file into \ref surfit_func variable use command:

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
$ \ref func_load_grd surface.grd my_surface
14/01/05 16:32:50 : loading surface from Surfer GRD-ASCII format file surface.grd
1
</PRE></TT>
</TD>
</TR>
</TABLE>

To load surface from surfit extension of ROFF file into \ref surfit_func variable use command:

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
$ \ref func_load surface.dat my_surface
14/01/05 16:33:20 : loading func "my_surface" from file surface.dat
1
</PRE></TT>
</TD>
</TR>
</TABLE>

You can load other types of surfaces from Surfer GRD-ASCII:

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
$ \ref wfunc_load_grd surface.grd my_surface 10
14/01/05 16:34:13 : loading surface from Surfer GRD-ASCII format file surface.grd
1
$ \ref trend_load_grd surface.grd 1 2
14/01/05 16:36:41 : loading surface from Surfer GRD-ASCII format file surface.grd
1
</PRE></TT>
</TD>
</TR>
</TABLE>

<H2><A NAME="grid">Creating grid</A></H2>
surfit uses equdistants \ref surfit::grid "grid" for gridding procedures. This grid can be described with
only 6 parameters:
\li 	X-coordinate of the first node of the grid 	
\li 	X-coordinate of the last node of the grid 	
\li 	cell size in X-direction
\li 	Y-coordinate of the first node of the grid 	
\li	Y-coordinate of the last node of the grid 	
\li 	cell size in Y-direction

Using surfit you can create \ref surfit::grid "grid" with \ref grid_get command. For example, command

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
$ \ref grid_get 0 100 10 0 200 20 my_grid
15/01/05 22:38:32 : grid: (0.00 <-> 100.00) / 10.00; (0.00 <-> 200.00) / 20.00.
</PRE></TT>
</TD>
</TR>
</TABLE>

In most cases you can use \ref grid_auto with only 2 parameters to specify cell sizes:

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
$ \ref grid_auto 10 20
</PRE></TT>
</TD>
</TR>
</TABLE>

surfit automatically produces \ref surfit_grid with cells of specified size.
This grid will cover all of \ref surfit::data "data", loaded into memory.

  
<H2><A NAME="gridding">Gridding</A></H2>

Gridding methods produce a regularly spaced, rectangular array of Z values from regularly and irregularly 
spaced XYZ data. The term "irregularly spaced" means that the points follow no particular 
pattern over the extent of the map, so there are many "holes" where data are missing. 
Gridding fills in these holes by extrapolating or interpolating Z values at those locations 
where no data exists.

For each data type, loading into surfit memory you can specify priority level using \ref surfit::priority "priority" variable.

Gridding procedure consists of 3 steps:
\li <a href="#loading">load data</a> into memory
\li <a href="#grid">create grid</a>
\li execute \ref solve procedure

Here is some examples:

	<UL>
	<LI>
	<a href="../surfit_src/html/map__task_8tcl-example.html">Interpolation of scattered data points</a>
	<LI>
	<a href="../surfit_src/html/map__flt_8tcl-example.html">Interpolation of scattered data points with faults</a>
	<LI>
	<a href="../surfit_src/html/map__trend_8tcl-example.html">Interpolation of scattered data points with trend and fault</a>
	<LI>
	<a href="../surfit_src/html/map__wtask_8tcl-example.html">Approximation of scattered data points</a>
	<LI>
	<a href="../surfit_src/html/map__iso_8tcl-example.html">Interpolation of isolines</a>
	<LI>
	<a href="../surfit_src/html/map__wiso_8tcl-example.html">Approximation of isolines</a>
	<LI>
	<a href="../surfit_src/html/map__cntr_8tcl-example.html">Interpolation of contours</a>
	<LI>
	<a href="../surfit_src/html/map__wcntr_8tcl-example.html">Approximation of contours</a>
	<LI>
	<a href="../surfit_src/html/map__area_8tcl-example.html">Interpolation of areas</a>
	<LI>
	<a href="../surfit_src/html/map__warea_8tcl-example.html">Approximation of areas</a>
	<LI>
	<a href="../surfit_src/html/map__func_8tcl-example.html">Interpolation of ordered data poinst</a>
	<LI>
	<a href="../surfit_src/html/map__wfunc_8tcl-example.html">Approximation of ordered data points</a>
        </LI>
	</UL>

<H2><A NAME="saving">Saving results</A></H2>

After <A href="#gridding">gridding</A> procedure results saves to \ref surfit_func variable. You can export
it to Surfer GRD-ASCII format with command \ref func_save_grd or to and surfit extension of ROFF files with command
\ref func_save. Also to save your results  into surfit extension of ROFF files with all other data in 
memory use command \ref file_save.

<H2><A NAME="visual">Visualising results</A></H2>

The simplest way to visualise your results is to use <a href="../../funner/html/index.html">funner</a> tool:
just press "Open File..." button and select file to visualise. <a href="../../funner/html/index.html">funner</a> 
accepts both Surfer GRD-ASCII and ROFF files.

<IMG alt="funner main window" src="../../gallery/funner.gif" border="0">

Press "V I E W" button to visualise surfit memory and other buttons to select data to view.

Also you can select file from command line:

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
$ funner map_wfunc.dat
</PRE></TT>
</TD>
</TR>
</TABLE>

Another usable tool for advanced users is <a href="../../bula/html/index.html">Bula</A>.

<H2><A NAME="roff">Working with ROFF files</A></H2>

surfit extends ROFF file format for saving and loading various kind of \ref surfit::data "data" objects. 
One ROFF file can contain several objects. Then you saving some data to ROFF file surfit can add this data to
the end of file or rewrite file. This behaviour rules with variable \ref surfit::datafile_mode "datafile_mode".
For each data-object exists command like <PRE>"ObjectType_save"</PRE> which saves object to ROFF file.

Special command \ref file_save saves all data from surfit memory to ROFF file. Command \ref file_load loads all data
from ROFF file to surfit memory. To examine data, already loaded use \ref mem_info command.

<A href="../../index.html">home</a>
                       
*/