/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.28
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/***********************************************************************
 *
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 *
 ************************************************************************/

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods for Windows DLLs */
#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   define SWIGEXPORT
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif


#include <stdio.h>
#include <tcl.h>
#include <errno.h>
#include <stdlib.h>
#include <stdarg.h>
#include <ctype.h>

/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "2"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (int)(*f1 - *f2);
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGINTERN const char*
SWIG_Tcl_ErrorType(int code) {
  const char* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = "MemoryError";
    break;
  case SWIG_IOError:
    type = "IOError";
    break;
  case SWIG_RuntimeError:
    type = "RuntimeError";
    break;
  case SWIG_IndexError:
    type = "IndexError";
    break;
  case SWIG_TypeError:
    type = "TypeError";
    break;
  case SWIG_DivisionByZero:
    type = "ZeroDivisionError";
    break;
  case SWIG_OverflowError:
    type = "OverflowError";
    break;
  case SWIG_SyntaxError:
    type = "SyntaxError";
    break;
  case SWIG_ValueError:
    type = "ValueError";
    break;
  case SWIG_SystemError:
    type = "SystemError";
    break;
  case SWIG_AttributeError:
    type = "AttributeError";
    break;
  default:
    type = "RuntimeError";
  }
  return type;
}


SWIGINTERN void
SWIG_Tcl_SetErrorObj(Tcl_Interp *interp, const char *ctype, Tcl_Obj *obj)
{
  Tcl_ResetResult(interp);
  Tcl_SetObjResult(interp, obj);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
}

SWIGINTERN void
SWIG_Tcl_SetErrorMsg(Tcl_Interp *interp, const char *ctype, const char *mesg)
{
  Tcl_ResetResult(interp);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
  Tcl_AddErrorInfo(interp, ctype);
  Tcl_AddErrorInfo(interp, " ");
  Tcl_AddErrorInfo(interp, mesg);
}

SWIGINTERNINLINE void
SWIG_Tcl_AddErrorMsg(Tcl_Interp *interp, const char* mesg)
{
  Tcl_AddErrorInfo(interp, mesg);
}



/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_TCL_POINTER 4
#define SWIG_TCL_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

typedef int   (*swig_wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef int   (*swig_wrapper_func)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef char *(*swig_variable_func)(ClientData, Tcl_Interp *, char *, char *, int);
typedef void  (*swig_delete_func)(ClientData);

typedef struct swig_method {
  const char     *name;
  swig_wrapper   method;
} swig_method;

typedef struct swig_attribute {
  const char     *name;
  swig_wrapper   getmethod;
  swig_wrapper   setmethod;
} swig_attribute;

typedef struct swig_class {
  const char         *name;
  swig_type_info   **type;
  swig_wrapper       constructor;
  void              (*destructor)(void *);
  swig_method        *methods;
  swig_attribute     *attributes;
  struct swig_class **bases;
  char              **base_names;
  swig_module_info   *module;
} swig_class;

typedef struct swig_instance {
  Tcl_Obj       *thisptr;
  void          *thisvalue;
  swig_class   *classptr;
  int            destroy;
  Tcl_Command    cmdtok;
} swig_instance;

/* Structure for command table */
typedef struct {
  const char *name;
  int       (*wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
  ClientData  clientdata;
} swig_command_info;

/* Structure for variable linking table */
typedef struct {
  const char *name;
  void *addr;
  char * (*get)(ClientData, Tcl_Interp *, char *, char *, int);
  char * (*set)(ClientData, Tcl_Interp *, char *, char *, int);
} swig_var_info;


/* -----------------------------------------------------------------------------*
 *  Install a constant object 
 * -----------------------------------------------------------------------------*/

static Tcl_HashTable   swigconstTable;
static int             swigconstTableinit = 0;

SWIGINTERN void
SWIG_Tcl_SetConstantObj(Tcl_Interp *interp, const char* name, Tcl_Obj *obj) {
  int newobj;
  Tcl_ObjSetVar2(interp,Tcl_NewStringObj(name,-1), NULL, obj, TCL_GLOBAL_ONLY);
  Tcl_SetHashValue(Tcl_CreateHashEntry(&swigconstTable, name, &newobj), (ClientData) obj);
}

SWIGINTERN Tcl_Obj *
SWIG_Tcl_GetConstantObj(const char *key) {
  Tcl_HashEntry *entryPtr;
  if (!swigconstTableinit) return 0;
  entryPtr = Tcl_FindHashEntry(&swigconstTable, key);
  if (entryPtr) {
    return (Tcl_Obj *) Tcl_GetHashValue(entryPtr);
  }
  return 0;
}

#ifdef __cplusplus
}
#endif



/***********************************************************************
 * tclrun.swg
 *
 *     This file contains the runtime support for Tcl modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 ************************************************************************/

/* Common SWIG API */

/* for raw pointers */
#define SWIG_ConvertPtr(oc, ptr, ty, flags)             SWIG_Tcl_ConvertPtr(interp, oc, ptr, ty, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Tcl_NewPointerObj(ptr, type, flags)

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp, obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_Tcl_NewInstanceObj(interp, thisvalue, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Tcl_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp,obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Tcl_GetModule((Tcl_Interp *) (clientdata))	     
#define SWIG_SetModule(clientdata, pointer)          	SWIG_Tcl_SetModule((Tcl_Interp *) (clientdata), pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Tcl_ErrorType(code)                                      
#define SWIG_Error(code, msg)            		SWIG_Tcl_SetErrorMsg(interp, SWIG_Tcl_ErrorType(code), msg)
#define SWIG_fail                        		goto fail						    


/* Tcl-specific SWIG API */

#define SWIG_Acquire(ptr)                               SWIG_Tcl_Acquire(ptr)                                     
#define SWIG_MethodCommand                           	SWIG_Tcl_MethodCommand				       
#define SWIG_Disown(ptr)                             	SWIG_Tcl_Disown(ptr)				       
#define SWIG_ConvertPtrFromString(c, ptr, ty, flags) 	SWIG_Tcl_ConvertPtrFromString(interp, c, ptr, ty, flags)  
#define SWIG_MakePtr(c, ptr, ty, flags)              	SWIG_Tcl_MakePtr(c, ptr, ty, flags)		       
#define SWIG_PointerTypeFromString(c)                	SWIG_Tcl_PointerTypeFromString(c)			       
#define SWIG_GetArgs                                 	SWIG_Tcl_GetArgs					       
#define SWIG_GetConstantObj(key)                     	SWIG_Tcl_GetConstantObj(key)			       
#define SWIG_ObjectConstructor                       	SWIG_Tcl_ObjectConstructor				       
#define SWIG_Thisown(ptr)                            	SWIG_Tcl_Thisown(ptr)				       
#define SWIG_ObjectDelete                            	SWIG_Tcl_ObjectDelete				       


#define SWIG_TCL_DECL_ARGS_2(arg1, arg2)                (Tcl_Interp *interp SWIGUNUSED, arg1, arg2)
#define SWIG_TCL_CALL_ARGS_2(arg1, arg2)                (interp, arg1, arg2)
/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_GetConstant        SWIG_GetConstantObj
#define SWIG_Tcl_GetConstant    SWIG_Tcl_GetConstantObj


#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/* Object support */

SWIGRUNTIME Tcl_HashTable*
SWIG_Tcl_ObjectTable() {
  static Tcl_HashTable  swigobjectTable;
  static int            swigobjectTableinit = 0;
  if (!swigobjectTableinit) {
    Tcl_InitHashTable(&swigobjectTable, TCL_ONE_WORD_KEYS);
    swigobjectTableinit = 1;
  }
  return &swigobjectTable;
}

/* Acquire ownership of a pointer */
SWIGRUNTIME void
SWIG_Tcl_Acquire(void *ptr) {
  int newobj;
  Tcl_CreateHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr, &newobj);
}

SWIGRUNTIME int
SWIG_Tcl_Thisown(void *ptr) {
  if (Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr)) {
    return 1;
  }
  return 0;
}

/* Disown a pointer.  Returns 1 if we owned it to begin with */
SWIGRUNTIME int
SWIG_Tcl_Disown(void *ptr) {
  Tcl_HashEntry *entryPtr = Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr);
  if (entryPtr) {
    Tcl_DeleteHashEntry(entryPtr);
    return 1;
  }
  return 0;
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPtrFromString(Tcl_Interp *interp, const char *c, void **ptr, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  /* Pointer values must start with leading underscore */
  while (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) return SWIG_OK;
    /* Hmmm. It could be an object name. */
    if (Tcl_VarEval(interp,c," cget -this", (char *) NULL) == TCL_OK) {
      Tcl_Obj *result = Tcl_GetObjResult(interp);
      c = Tcl_GetStringFromObj(result, NULL);
      continue;
    }
    Tcl_ResetResult(interp);
    return SWIG_ERROR;
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (ty) {
    tc = c ? SWIG_TypeCheck(c,ty) : 0;
    if (!tc) {
      return SWIG_ERROR;
    }
    if (flags & SWIG_POINTER_DISOWN) {
      SWIG_Disown((void *) *ptr);
    }
    *ptr = SWIG_TypeCast(tc,(void *) *ptr);
  }
  return SWIG_OK;
}

/* Convert a pointer value */
SWIGRUNTIMEINLINE int
SWIG_Tcl_ConvertPtr(Tcl_Interp *interp, Tcl_Obj *oc, void **ptr, swig_type_info *ty, int flags) {
  return SWIG_Tcl_ConvertPtrFromString(interp, Tcl_GetStringFromObj(oc,NULL), ptr, ty, flags);
}

/* Convert a pointer value */
SWIGRUNTIME char *
SWIG_Tcl_PointerTypeFromString(char *c) {
  char d;
  /* Pointer values must start with leading underscore. NULL has no type */
  if (*c != '_') {
    return 0;
  }
  c++;
  /* Extract hex value from pointer */
  while ((d = *c)) {
    if (!(((d >= '0') && (d <= '9')) || ((d >= 'a') && (d <= 'f')))) break;
    c++;
  }
  return c;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPacked(Tcl_Interp *SWIGUNUSEDPARM(interp) , Tcl_Obj *obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (!obj) goto type_error;
  c = Tcl_GetStringFromObj(obj,NULL);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:

  return SWIG_ERROR;
}


/* Take a pointer and convert it to a string */
SWIGRUNTIME void
SWIG_Tcl_MakePtr(char *c, void *ptr, swig_type_info *ty, int flags) {
  if (ptr) {
    *(c++) = '_';
    c = SWIG_PackData(c,&ptr,sizeof(void *));
    strcpy(c,ty->name);
  } else {
    strcpy(c,(char *)"NULL");
  }
  flags = 0;
}

/* Create a new pointer object */
SWIGRUNTIMEINLINE Tcl_Obj *
SWIG_Tcl_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  Tcl_Obj *robj;
  char result[SWIG_BUFFER_SIZE];
  SWIG_MakePtr(result,ptr,type,flags);
  robj = Tcl_NewStringObj(result,-1);
  return robj;
}

SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return Tcl_NewStringObj(result,-1);
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

SWIGRUNTIME swig_module_info * 
SWIG_Tcl_GetModule(Tcl_Interp *interp) {
  char *data;
  swig_module_info *ret = 0;
  
  /* first check if pointer already created */
  data = (char *) Tcl_GetVar(interp, "swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME,
			     TCL_GLOBAL_ONLY);
  if (data) {
    SWIG_UnpackData(data, &ret, sizeof(swig_type_info **));
  }

  return ret;
}

SWIGRUNTIME void
SWIG_Tcl_SetModule(Tcl_Interp *interp, swig_module_info *module) {
  char buf[SWIG_BUFFER_SIZE];
  char *data;

  /* create a new pointer */
  data = SWIG_PackData(buf, &module, sizeof(swig_type_info **));
  *data = 0;
  Tcl_SetVar(interp, "swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, buf, 0);
}

/* -----------------------------------------------------------------------------*
 *  Object auxiliars
 * -----------------------------------------------------------------------------*/


SWIGRUNTIME void
SWIG_Tcl_ObjectDelete(ClientData clientData) {
  swig_instance *si = (swig_instance *) clientData;
  if ((si) && (si->destroy) && (SWIG_Disown(si->thisvalue))) {
    if (si->classptr->destructor) {
      (si->classptr->destructor)(si->thisvalue);
    }
  }
  Tcl_DecrRefCount(si->thisptr);
  free(si);
}

/* Function to invoke object methods given an instance */
SWIGRUNTIME int
SWIG_Tcl_MethodCommand(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  char *method,   *attrname;
  swig_instance   *inst = (swig_instance *) clientData;
  swig_method     *meth;
  swig_attribute  *attr;
  Tcl_Obj         *oldarg;
  Tcl_Obj         **objv;
  int              rcode;
  swig_class      *cls;
  swig_class      *cls_stack[64];
  int              cls_stack_bi[64];
  int              cls_stack_top = 0;
  int              numconf = 2;
  int              bi;

  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
    return TCL_ERROR;
  }
  method = Tcl_GetStringFromObj(objv[1],NULL);
  if (strcmp(method,"-acquire") == 0) {
    inst->destroy = 1;
    SWIG_Acquire(inst->thisvalue);
    return TCL_OK;
  }
  if (strcmp(method,"-disown") == 0) {
    if (inst->destroy) {
      SWIG_Disown(inst->thisvalue);
    }
    inst->destroy = 0;
    return TCL_OK;
  }
  if (strcmp(method,"-delete") == 0) {
    Tcl_DeleteCommandFromToken(interp,inst->cmdtok);
    return TCL_OK;
  }
  cls_stack[cls_stack_top] = inst->classptr;
  cls_stack_bi[cls_stack_top] = -1;
  cls = inst->classptr;
  while (1) {
    bi = cls_stack_bi[cls_stack_top];
    cls = cls_stack[cls_stack_top];
    if (bi != -1) {
      if (!cls->bases[bi] && cls->base_names[bi]) {
        /* lookup and cache the base class */
	swig_type_info *info = SWIG_TypeQueryModule(cls->module, cls->module, cls->base_names[bi]);
	if (info) cls->bases[bi] = (swig_class *) info->clientdata;
      }
      cls = cls->bases[bi];
      if (cls) {
        cls_stack_bi[cls_stack_top]++;
        cls_stack_top++;
        cls_stack[cls_stack_top] = cls;
        cls_stack_bi[cls_stack_top] = -1;
        continue;
      }
    }
    if (!cls) {
      cls_stack_top--;
      if (cls_stack_top < 0) break;
      else continue;
    }
    cls_stack_bi[cls_stack_top]++;

    meth = cls->methods;
    /* Check for methods */
    while (meth && meth->name) {
      if (strcmp(meth->name,method) == 0) {
        oldarg = objv[1];
        objv[1] = inst->thisptr;
        Tcl_IncrRefCount(inst->thisptr);
        rcode = (*meth->method)(clientData,interp,objc,objv);
        objv[1] = oldarg;
        Tcl_DecrRefCount(inst->thisptr);
        return rcode;
      }
      meth++;
    }
    /* Check class methods for a match */
    if (strcmp(method,"cget") == 0) {
      if (objc < 3) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      attrname = Tcl_GetStringFromObj(objv[2],NULL);
      attr = cls->attributes;
      while (attr && attr->name) {
        if ((strcmp(attr->name, attrname) == 0) && (attr->getmethod)) {
          oldarg = objv[1];
          objv[1] = inst->thisptr;
          Tcl_IncrRefCount(inst->thisptr);
          rcode = (*attr->getmethod)(clientData,interp,2, objv);
          objv[1] = oldarg;
          Tcl_DecrRefCount(inst->thisptr);
          return rcode;
        }
        attr++;
      }
      if (strcmp(attrname, "-this") == 0) {
        Tcl_SetObjResult(interp, Tcl_DuplicateObj(inst->thisptr));
        return TCL_OK;
      }
      if (strcmp(attrname, "-thisown") == 0) {
        if (SWIG_Thisown(inst->thisvalue)) {
          Tcl_SetResult(interp,(char*)"1",TCL_STATIC);
        } else {
          Tcl_SetResult(interp,(char*)"0",TCL_STATIC);
        }
        return TCL_OK;
      }
    } else if (strcmp(method, "configure") == 0) {
      int i;
      if (objc < 4) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      i = 2;
      while (i < objc) {
        attrname = Tcl_GetStringFromObj(objv[i],NULL);
        attr = cls->attributes;
        while (attr && attr->name) {
          if ((strcmp(attr->name, attrname) == 0) && (attr->setmethod)) {
            oldarg = objv[i];
            objv[i] = inst->thisptr;
            Tcl_IncrRefCount(inst->thisptr);
            rcode = (*attr->setmethod)(clientData,interp,3, &objv[i-1]);
            objv[i] = oldarg;
            Tcl_DecrRefCount(inst->thisptr);
            if (rcode != TCL_OK) return rcode;
            numconf += 2;
          }
          attr++;
        }
        i+=2;
      }
    }
  }
  if (strcmp(method,"configure") == 0) {
    if (numconf >= objc) {
      return TCL_OK;
    } else {
      Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
      return TCL_ERROR;
    }
  }
  if (strcmp(method,"cget") == 0) {
    Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
    return TCL_ERROR;
  }
  Tcl_SetResult(interp, (char *) "Invalid method. Must be one of: configure cget -acquire -disown -delete", TCL_STATIC);
  cls = inst->classptr;
  bi = 0;
  while (cls) {
    meth = cls->methods;
    while (meth && meth->name) {
      char *cr = (char *) Tcl_GetStringResult(interp);
      int meth_len = strlen(meth->name);
      char* where = strchr(cr,':');
      while(where) {
        where = strstr(where, meth->name);
        if(where) {
          if(where[-1] == ' ' && (where[meth_len] == ' ' || where[meth_len]==0)) {
            break;
          } else {
            where++;
          }
        }
      }

      if (!where)
        Tcl_AppendElement(interp, (char *) meth->name);
      meth++;
    }
    cls = inst->classptr->bases[bi++];
  }
  return TCL_ERROR;
}

/* This function takes the current result and turns it into an object command */
SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewInstanceObj(Tcl_Interp *interp, void *thisvalue, swig_type_info *type, int flags) {
  Tcl_Obj *robj = SWIG_NewPointerObj(thisvalue, type,0);
  /* Check to see if this pointer belongs to a class or not */
  if ((type->clientdata) && (interp)) {
    Tcl_CmdInfo    ci;
    char          *name;
    name = Tcl_GetStringFromObj(robj,NULL);
    if (!Tcl_GetCommandInfo(interp,name, &ci) || (flags)) {
      swig_instance *newinst = (swig_instance *) malloc(sizeof(swig_instance));
      newinst->thisptr = Tcl_DuplicateObj(robj);
      Tcl_IncrRefCount(newinst->thisptr);
      newinst->thisvalue = thisvalue;
      newinst->classptr = (swig_class *) type->clientdata;
      newinst->destroy = flags;
      newinst->cmdtok = Tcl_CreateObjCommand(interp, Tcl_GetStringFromObj(robj,NULL), (swig_wrapper_func) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
      if (flags) {
        SWIG_Acquire(thisvalue);
      }
    }
  }
  return robj;
}

/* Function to create objects */
SWIGRUNTIME int
SWIG_Tcl_ObjectConstructor(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj          *newObj = 0;
  void             *thisvalue = 0;
  swig_instance   *newinst = 0;
  swig_class      *classptr = (swig_class *) clientData;
  swig_wrapper     cons = 0;
  char             *name = 0;
  int               firstarg = 0;
  int               thisarg = 0;
  int               destroy = 1;

  if (!classptr) {
    Tcl_SetResult(interp, (char *) "swig: internal runtime error. No class object defined.", TCL_STATIC);
    return TCL_ERROR;
  }
  cons = classptr->constructor;
  if (objc > 1) {
    char *s = Tcl_GetStringFromObj(objv[1],NULL);
    if (strcmp(s,"-this") == 0) {
      thisarg = 2;
      cons = 0;
    } else if (strcmp(s,"-args") == 0) {
      firstarg = 1;
    } else if (objc == 2) {
      firstarg = 1;
      name = s;
    } else if (objc >= 3) {
      char *s1;
      name = s;
      s1 = Tcl_GetStringFromObj(objv[2],NULL);
      if (strcmp(s1,"-this") == 0) {
	thisarg = 3;
	cons = 0;
      } else {
	firstarg = 1;
      }
    }
  }
  if (cons) {
    int result;
    result = (*cons)(0, interp, objc-firstarg, &objv[firstarg]);
    if (result != TCL_OK) {
      return result;
    }
    newObj = Tcl_DuplicateObj(Tcl_GetObjResult(interp));
    if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
  } else if (thisarg > 0) {
    if (thisarg < objc) {
      destroy = 0;
      newObj = Tcl_DuplicateObj(objv[thisarg]);
      if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
    } else {
      Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
      return TCL_ERROR;
    }
  } else {
    Tcl_SetResult(interp, (char *) "No constructor available.", TCL_STATIC);
    return TCL_ERROR;
  }
  if (SWIG_Tcl_ConvertPtr(interp,newObj, (void **) &thisvalue, *(classptr->type), 0) != SWIG_OK) {
    Tcl_DecrRefCount(newObj);
    return TCL_ERROR;
  }
  newinst = (swig_instance *) malloc(sizeof(swig_instance));
  newinst->thisptr = newObj;
  Tcl_IncrRefCount(newObj);
  newinst->thisvalue = thisvalue;
  newinst->classptr = classptr;
  newinst->destroy = destroy;
  if (destroy) {
    SWIG_Acquire(thisvalue);
  }
  newinst->cmdtok = Tcl_CreateObjCommand(interp,name, (swig_wrapper) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
  return TCL_OK;
}

/* -----------------------------------------------------------------------------*
 *   Get arguments 
 * -----------------------------------------------------------------------------*/
SWIGRUNTIME int
SWIG_Tcl_GetArgs(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], const char *fmt, ...) {
  int        argno = 0, opt = 0;
  long       tempi;
  double     tempd;
  const char *c;
  va_list    ap;
  void      *vptr;
  Tcl_Obj   *obj = 0;
  swig_type_info *ty;

  va_start(ap,fmt);
  for (c = fmt; (*c && (*c != ':') && (*c != ';')); c++,argno++) {
    if (*c == '|') {
      opt = 1;
      c++;
    }
    if (argno >= (objc-1)) {
      if (!opt) {
        Tcl_SetResult(interp, (char *) "Wrong number of arguments ", TCL_STATIC);
        goto argerror;
      } else {
        va_end(ap);
        return TCL_OK;
      }
    }

    vptr = va_arg(ap,void *);
    if (vptr) {
      if (isupper(*c)) {
        obj = SWIG_Tcl_GetConstantObj(Tcl_GetStringFromObj(objv[argno+1],0));
        if (!obj) obj = objv[argno+1];
      } else {
        obj = objv[argno+1];
      }
      switch(*c) {
      case 'i': case 'I':
      case 'l': case 'L':
      case 'h': case 'H':
      case 'b': case 'B':
        if (Tcl_GetLongFromObj(interp,obj,&tempi) != TCL_OK) goto argerror;
        if ((*c == 'i') || (*c == 'I')) *((int *)vptr) = (int)tempi;
        else if ((*c == 'l') || (*c == 'L')) *((long *)vptr) = (long)tempi;
        else if ((*c == 'h') || (*c == 'H')) *((short*)vptr) = (short)tempi;
        else if ((*c == 'b') || (*c == 'B')) *((unsigned char *)vptr) = (unsigned char)tempi;
        break;
      case 'f': case 'F':
      case 'd': case 'D':
        if (Tcl_GetDoubleFromObj(interp,obj,&tempd) != TCL_OK) goto argerror;
        if ((*c == 'f') || (*c == 'F')) *((float *) vptr) = (float)tempd;
        else if ((*c == 'd') || (*c == 'D')) *((double*) vptr) = tempd;
        break;
      case 's': case 'S':
        if (*(c+1) == '#') {
          int *vlptr = (int *) va_arg(ap, void *);
          *((char **) vptr) = Tcl_GetStringFromObj(obj, vlptr);
          c++;
        } else {
          *((char **)vptr) = Tcl_GetStringFromObj(obj,NULL);
        }
        break;
      case 'c': case 'C':
        *((char *)vptr) = *(Tcl_GetStringFromObj(obj,NULL));
        break;
      case 'p': case 'P':
        ty = (swig_type_info *) va_arg(ap, void *);
        if (SWIG_Tcl_ConvertPtr(interp, obj, (void **) vptr, ty, 0) != SWIG_OK) goto argerror;
        break;
      case 'o': case 'O':
        *((Tcl_Obj **)vptr) = objv[argno+1];
        break;
      default:
        break;
      }
    }
  }

  if ((*c != ';') && ((objc-1) > argno)) {
    Tcl_SetResult(interp, (char *) "Wrong # args.", TCL_STATIC);
    goto argerror;
  }
  va_end(ap);
  return TCL_OK;

 argerror:
  {
    char temp[32];
    sprintf(temp,"%d", argno+1);
    c = strchr(fmt,':');
    if (!c) c = strchr(fmt,';');
    if (!c) c = (char *)"";
    Tcl_AppendResult(interp,c," argument ", temp, NULL);
    va_end(ap);
    return TCL_ERROR;
  }
}

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_char swig_types[0]
static swig_type_info *swig_types[2];
static swig_module_info swig_module = {swig_types, 1, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Surfit_Init
#define SWIG_name    "surfit"
#define SWIG_prefix  ""
#define SWIG_version "0.0"

#define SWIGVERSION 0x010328 


#define SWIG_as_voidptr(a) const_cast<void * >(static_cast<const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast<void** >(a)) 


#include <stdexcept>



#ifdef __cplusplus
extern "C" {
#endif
#ifdef MAC_TCL
#pragma export on
#endif
SWIGEXPORT int SWIG_init(Tcl_Interp *);
#ifdef MAC_TCL
#pragma export off
#endif
#ifdef __cplusplus
}
#endif




/*------------------------------------------------------------------------------
 *
 *	Copyright (c) 2002-2006 by M. V. Dmitrievsky and V. N. Kutrunov
 *	See COPYING file for copying and redistribution conditions.
 *
 *	This program is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; version 2 of the License.
 *
 *	This program is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	Contact info: surfit.sourceforge.net
 *----------------------------------------------------------------------------*/

#include "surfit_ie.h"

#include "real.h"
#include "fileio.h"
#include "interp.h"
#include "boolvec.h"
#include "strvec.h"
#include "intvec.h"

#include "variables.h"
#include "variables_internal.h"
#include "variables_tcl.h"
#include "data_manager.h"
#include "license.h"
#include "others_tcl.h"
#include "hist_tcl.h"
#include "threads.h"
#include "solvers.h"
#include "other_tcl.h"

TCL_DECLARE_MUTEX(surfitMutex)



#include <limits.h>
#ifndef LLONG_MIN
# define LLONG_MIN	LONG_LONG_MIN
#endif
#ifndef LLONG_MAX
# define LLONG_MAX	LONG_LONG_MAX
#endif
#ifndef ULLONG_MAX
# define ULLONG_MAX	ULONG_LONG_MAX
#endif


SWIGINTERNINLINE Tcl_Obj *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  return (size < INT_MAX) ? Tcl_NewStringObj(carray, static_cast<int >(size)) : NULL;
}


SWIGINTERNINLINE Tcl_Obj * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


  #define SWIG_From_bool   Tcl_NewBooleanObj 


SWIGINTERN int
SWIG_AsVal_bool SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, bool *val)
{
  int v;
  if (Tcl_GetBooleanFromObj(0, obj, &v) == TCL_OK) {
    if (val) *val = v ? true : false;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


  #define SWIG_From_double   Tcl_NewDoubleObj 


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


#include <float.h>


SWIGINTERN int
SWIG_AsVal_double SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, double *val)
{
  double v;
  if (Tcl_GetDoubleFromObj(0, obj, &v) == TCL_OK) {
    if (val) *val = v;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_float SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast<float >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(Tcl_Obj *obj, char** cptr, size_t* psize, int *alloc)
{ 
  int len = 0;
  char *cstr = Tcl_GetStringFromObj(obj, &len);
  if (cstr) {
    if (cptr)  *cptr = cstr;
    if (psize) *psize = len + 1;
    if (alloc) *alloc = SWIG_OLDOBJ;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE Tcl_Obj* 
SWIG_From_long  (long value)
{
  if (((long) INT_MIN <= value) && (value <= (long) INT_MAX)) {
    return Tcl_NewIntObj(static_cast<int >(value));
  } else {
    return Tcl_NewLongObj(value);
  }
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsVal_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, long* val)
{
  long v;
  if (Tcl_GetLongFromObj(0,obj, &v) == TCL_OK) {
    if (val) *val = (long) v;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast<int >(v);
    }
  }  
  return res;
}





SWIGINTERN int
SWIG_AsVal_unsigned_SS_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, unsigned long *val) {
  long v;
  if (Tcl_GetLongFromObj(0,obj, &v) == TCL_OK) {
    if (v >= 0) {
      if (val) *val = (long) v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else {
    int len = 0;
    const char *nptr = Tcl_GetStringFromObj(obj, &len);
    if (nptr && len > 0) {
      char *endptr;
      unsigned long v = strtoul(nptr, &endptr,0);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_OK;
	}
      }
    }
  }
  
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast<size_t >(v);
  return res;
}


#include "fileio.h"


#include "pnts_tcl.h"
#include "f_points_tcl.h"


#include "grid_tcl.h"
#include "grid_user.h"


#include "cmofs.h"


#include "surf_tcl.h"
#include "mask_tcl.h"

#include "surfs_tcl.h"


#include "curv_tcl.h"
#include "cntr_tcl.h"
#include "area_tcl.h"
#include "grid_line_tcl.h"

#include "curvs_tcl.h"

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN char *stop_execution_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_bool(static_cast<bool >(surfit::stop_execution));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN char *stop_execution_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    bool val;
    int res = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""surfit::stop_execution""' of type '""bool""'");
    }
    surfit::stop_execution = static_cast<bool >(val);
  }
  return NULL;
fail:
  return "stop_execution";
}


SWIGINTERN char *tol_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_float(static_cast<float >(surfit::tol));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN char *tol_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    float val;
    int res = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""surfit::tol""' of type '""float""'");
    }
    surfit::tol = static_cast<float >(val);
  }
  return NULL;
fail:
  return "tol";
}


SWIGINTERN char *undef_value_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_double(static_cast<double >(surfit::undef_value));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN char *undef_value_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    double val;
    int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""surfit::undef_value""' of type '""double""'");
    }
    surfit::undef_value = static_cast<double >(val);
  }
  return NULL;
fail:
  return "undef_value";
}


SWIGINTERN char *sor_omega_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_double(static_cast<double >(surfit::sor_omega));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN char *sor_omega_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    double val;
    int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""surfit::sor_omega""' of type '""double""'");
    }
    surfit::sor_omega = static_cast<double >(val);
  }
  return NULL;
fail:
  return "sor_omega";
}


SWIGINTERN char *ssor_omega_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_double(static_cast<double >(surfit::ssor_omega));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN char *ssor_omega_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    double val;
    int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""surfit::ssor_omega""' of type '""double""'");
    }
    surfit::ssor_omega = static_cast<double >(val);
  }
  return NULL;
fail:
  return "ssor_omega";
}


SWIGINTERN char *map_name_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_FromCharPtr(surfit::map_name);
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN char *map_name_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(value, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""surfit::map_name""' of type '""char *""'");
    }
    if (surfit::map_name) delete[] surfit::map_name;
    if (alloc == SWIG_NEWOBJ) {
      surfit::map_name = cptr;
    } else {
      surfit::map_name = csize ? reinterpret_cast<char* >(memcpy((new char[csize]), cptr, sizeof(char)*(csize))) : 0;
    }
  }
  return NULL;
fail:
  return "map_name";
}


SWIGINTERN char *reproject_faults_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_int(static_cast<int >(surfit::reproject_faults));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN char *reproject_faults_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    int val;
    int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""surfit::reproject_faults""' of type '""int""'");
    }
    surfit::reproject_faults = static_cast<int >(val);
  }
  return NULL;
fail:
  return "reproject_faults";
}


SWIGINTERN char *reproject_undef_areas_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_int(static_cast<int >(surfit::reproject_undef_areas));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN char *reproject_undef_areas_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    int val;
    int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""surfit::reproject_undef_areas""' of type '""int""'");
    }
    surfit::reproject_undef_areas = static_cast<int >(val);
  }
  return NULL;
fail:
  return "reproject_undef_areas";
}


SWIGINTERN char *process_isolated_areas_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_int(static_cast<int >(surfit::process_isolated_areas));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN char *process_isolated_areas_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    int val;
    int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""surfit::process_isolated_areas""' of type '""int""'");
    }
    surfit::process_isolated_areas = static_cast<int >(val);
  }
  return NULL;
fail:
  return "process_isolated_areas";
}


SWIGINTERN char *penalty_max_iter_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_int(static_cast<int >(surfit::penalty_max_iter));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN char *penalty_max_iter_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    int val;
    int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""surfit::penalty_max_iter""' of type '""int""'");
    }
    surfit::penalty_max_iter = static_cast<int >(val);
  }
  return NULL;
fail:
  return "penalty_max_iter";
}


SWIGINTERN char *penalty_weight_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_double(static_cast<double >(surfit::penalty_weight));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN char *penalty_weight_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    double val;
    int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""surfit::penalty_weight""' of type '""double""'");
    }
    surfit::penalty_weight = static_cast<double >(val);
  }
  return NULL;
fail:
  return "penalty_weight";
}


SWIGINTERN char *penalty_weight_mult_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_double(static_cast<double >(surfit::penalty_weight_mult));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN char *penalty_weight_mult_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    double val;
    int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""surfit::penalty_weight_mult""' of type '""double""'");
    }
    surfit::penalty_weight_mult = static_cast<double >(val);
  }
  return NULL;
fail:
  return "penalty_weight_mult";
}


SWIGINTERN int
_wrap_init_threads(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:init_threads amount ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "init_threads" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast<int >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::init_threads(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_get_threads(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":get_threads ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (int)surfit::get_threads();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast<int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_clear_data(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":clear_data ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::clear_data();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mem_info(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":mem_info ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::mem_info();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_types_info(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":types_info ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (char *)surfit::types_info();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_SetObjResult(interp,Tcl_NewStringObj(result,-1));
    free(result);
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_putlog(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:putlog str ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "putlog" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::putlog((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_datafile_mode(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":datafile_mode ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (char *)surfit::datafile_mode();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_SetObjResult(interp,Tcl_NewStringObj(result,-1));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_datafile_new(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":datafile_new ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (char *)surfit::datafile_new();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_SetObjResult(interp,Tcl_NewStringObj(result,-1));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_datafile_append(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":datafile_append ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (char *)surfit::datafile_append();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_SetObjResult(interp,Tcl_NewStringObj(result,-1));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_file_load(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:file_load filename ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_load" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::file_load((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_file_save(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:file_save filename ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_save" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::file_save((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_file_info(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:file_info filename ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_info" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (char *)surfit::file_info((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_SetObjResult(interp,Tcl_NewStringObj(result,-1));
    free(result);
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_completer__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:completer D1 D2 alpha w ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "completer" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "completer" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "completer" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "completer" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::completer(arg1,arg2,arg3,arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_completer__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:completer D1 D2 alpha ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "completer" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "completer" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "completer" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::completer(arg1,arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_completer__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:completer D1 D2 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "completer" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "completer" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::completer(arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_completer__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:completer D1 ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "completer" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::completer(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_completer__SWIG_4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,":completer ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::completer();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_completer(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_completer__SWIG_4(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_completer__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_completer__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_completer__SWIG_1(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_completer__SWIG_0(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'completer'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_completer_add__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:completer_add weight D1 D2 alpha w ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "completer_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "completer_add" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "completer_add" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "completer_add" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  ecode5 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "completer_add" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast<double >(val5);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::completer_add(arg1,arg2,arg3,arg4,arg5);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_completer_add__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:completer_add weight D1 D2 alpha ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "completer_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "completer_add" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "completer_add" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "completer_add" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::completer_add(arg1,arg2,arg3,arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_completer_add__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:completer_add weight D1 D2 ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "completer_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "completer_add" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "completer_add" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::completer_add(arg1,arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_completer_add__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:completer_add weight D1 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "completer_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "completer_add" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::completer_add(arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_completer_add__SWIG_4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:completer_add weight ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "completer_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::completer_add(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_completer_add__SWIG_5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,":completer_add ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::completer_add();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_completer_add(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_completer_add__SWIG_5(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_completer_add__SWIG_4(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_completer_add__SWIG_3(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_completer_add__SWIG_2(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_completer_add__SWIG_1(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_completer_add__SWIG_0(clientData, interp, objc, argv - 1);
            }
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'completer_add'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_value__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:value val ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "value" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::value(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_value__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,":value ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::value();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_value(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_value__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_value__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'value'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_value_add__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:value_add weight val ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "value_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "value_add" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::value_add(arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_value_add__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:value_add weight ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "value_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::value_add(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_value_add__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,":value_add ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::value_add();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_value_add(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_value_add__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_value_add__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_value_add__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'value_add'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mean__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:mean value mult ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mean" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mean" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::mean(arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mean__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:mean value ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mean" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::mean(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mean(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_mean__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_mean__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'mean'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_wmean__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:wmean value surface_name_or_position mult ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "wmean" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "wmean" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "wmean" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::wmean(arg1,(char const *)arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_wmean__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:wmean value surface_name_or_position ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "wmean" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "wmean" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::wmean(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_wmean__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:wmean value ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "wmean" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::wmean(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_wmean(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_wmean__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_wmean__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_wmean__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'wmean'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_leq__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:leq value mult ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "leq" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "leq" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::leq(arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_leq__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:leq value ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "leq" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::leq(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_leq(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_leq__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_leq__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'leq'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_geq__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:geq value mult ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "geq" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "geq" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::geq(arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_geq__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:geq value ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "geq" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::geq(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_geq(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_geq__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_geq__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'geq'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hist pos mult ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hist" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hist" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist((char const *)arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hist pos ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hist" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,":hist ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_hist__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_hist__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_hist__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'hist'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_read__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  int arg7 ;
  int arg8 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooooo:hist_read filename minz maxz histname col1 delimiter skip_lines grow_by ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hist_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hist_read" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hist_read" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  res4 = SWIG_AsCharPtrAndSize(objv[4], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "hist_read" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = buf4;
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "hist_read" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast<int >(val5);
  res6 = SWIG_AsCharPtrAndSize(objv[6], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "hist_read" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = buf6;
  ecode7 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[7], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "hist_read" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast<int >(val7);
  ecode8 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[8], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "hist_read" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast<int >(val8);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist_read((char const *)arg1,arg2,arg3,(char const *)arg4,arg5,(char const *)arg6,arg7,arg8);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_read__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  int arg7 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooooo:hist_read filename minz maxz histname col1 delimiter skip_lines ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hist_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hist_read" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hist_read" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  res4 = SWIG_AsCharPtrAndSize(objv[4], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "hist_read" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = buf4;
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "hist_read" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast<int >(val5);
  res6 = SWIG_AsCharPtrAndSize(objv[6], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "hist_read" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = buf6;
  ecode7 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[7], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "hist_read" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast<int >(val7);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist_read((char const *)arg1,arg2,arg3,(char const *)arg4,arg5,(char const *)arg6,arg7);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_read__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooo:hist_read filename minz maxz histname col1 delimiter ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hist_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hist_read" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hist_read" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  res4 = SWIG_AsCharPtrAndSize(objv[4], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "hist_read" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = buf4;
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "hist_read" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast<int >(val5);
  res6 = SWIG_AsCharPtrAndSize(objv[6], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "hist_read" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = buf6;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist_read((char const *)arg1,arg2,arg3,(char const *)arg4,arg5,(char const *)arg6);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_read__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:hist_read filename minz maxz histname col1 ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hist_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hist_read" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hist_read" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  res4 = SWIG_AsCharPtrAndSize(objv[4], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "hist_read" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = buf4;
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "hist_read" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast<int >(val5);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist_read((char const *)arg1,arg2,arg3,(char const *)arg4,arg5);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_read__SWIG_4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  char *arg4 = (char *) 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:hist_read filename minz maxz histname ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hist_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hist_read" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hist_read" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  res4 = SWIG_AsCharPtrAndSize(objv[4], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "hist_read" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = buf4;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist_read((char const *)arg1,arg2,arg3,(char const *)arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_read__SWIG_5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:hist_read filename minz maxz ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hist_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hist_read" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hist_read" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist_read((char const *)arg1,arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_read(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_hist_read__SWIG_5(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_hist_read__SWIG_4(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_hist_read__SWIG_3(clientData, interp, objc, argv - 1);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_hist_read__SWIG_2(clientData, interp, objc, argv - 1);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_hist_read__SWIG_1(clientData, interp, objc, argv - 1);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_hist_read__SWIG_0(clientData, interp, objc, argv - 1);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'hist_read'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_write__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:hist_write filename hist_name_or_position three_columns ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hist_write" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hist_write" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hist_write" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast<bool >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist_write((char const *)arg1,(char const *)arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_write__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hist_write filename hist_name_or_position ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hist_write" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hist_write" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist_write((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_write__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hist_write filename ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hist_write" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist_write((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_write(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_hist_write__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_hist_write__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_hist_write__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'hist_write'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_from_surf__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  double arg5 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:hist_from_surf surf_pos intervs histname from to ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hist_from_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hist_from_surf" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast<size_t >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "hist_from_surf" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "hist_from_surf" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  ecode5 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "hist_from_surf" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast<double >(val5);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist_from_surf((char const *)arg1,arg2,(char const *)arg3,arg4,arg5);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_from_surf__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:hist_from_surf surf_pos intervs histname from ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hist_from_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hist_from_surf" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast<size_t >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "hist_from_surf" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "hist_from_surf" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist_from_surf((char const *)arg1,arg2,(char const *)arg3,arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_from_surf__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:hist_from_surf surf_pos intervs histname ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hist_from_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hist_from_surf" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast<size_t >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "hist_from_surf" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist_from_surf((char const *)arg1,arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_from_surf__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hist_from_surf surf_pos intervs ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hist_from_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hist_from_surf" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast<size_t >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist_from_surf((char const *)arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_from_surf__SWIG_4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hist_from_surf surf_pos ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hist_from_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist_from_surf((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_from_surf__SWIG_5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,":hist_from_surf ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist_from_surf();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_from_surf(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_hist_from_surf__SWIG_5(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_hist_from_surf__SWIG_4(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_hist_from_surf__SWIG_3(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_hist_from_surf__SWIG_2(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_hist_from_surf__SWIG_1(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_hist_from_surf__SWIG_0(clientData, interp, objc, argv - 1);
            }
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'hist_from_surf'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_from_pnts__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  double arg5 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:hist_from_pnts pnts_pos intervs histname from to ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hist_from_pnts" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hist_from_pnts" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast<size_t >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "hist_from_pnts" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "hist_from_pnts" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  ecode5 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "hist_from_pnts" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast<double >(val5);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist_from_pnts((char const *)arg1,arg2,(char const *)arg3,arg4,arg5);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_from_pnts__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:hist_from_pnts pnts_pos intervs histname from ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hist_from_pnts" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hist_from_pnts" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast<size_t >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "hist_from_pnts" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "hist_from_pnts" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist_from_pnts((char const *)arg1,arg2,(char const *)arg3,arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_from_pnts__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:hist_from_pnts pnts_pos intervs histname ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hist_from_pnts" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hist_from_pnts" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast<size_t >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "hist_from_pnts" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist_from_pnts((char const *)arg1,arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_from_pnts__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hist_from_pnts pnts_pos intervs ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hist_from_pnts" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hist_from_pnts" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast<size_t >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist_from_pnts((char const *)arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_from_pnts__SWIG_4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hist_from_pnts pnts_pos ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hist_from_pnts" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist_from_pnts((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_from_pnts__SWIG_5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,":hist_from_pnts ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist_from_pnts();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_from_pnts(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_hist_from_pnts__SWIG_5(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_hist_from_pnts__SWIG_4(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_hist_from_pnts__SWIG_3(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_hist_from_pnts__SWIG_2(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_hist_from_pnts__SWIG_1(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_hist_from_pnts__SWIG_0(clientData, interp, objc, argv - 1);
            }
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'hist_from_pnts'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_getName__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hist_getName pos ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hist_getName" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (char *)surfit::hist_getName((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_SetObjResult(interp,Tcl_NewStringObj(result,-1));
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_getName__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":hist_getName ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (char *)surfit::hist_getName();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_SetObjResult(interp,Tcl_NewStringObj(result,-1));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_getName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_hist_getName__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_hist_getName__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'hist_getName'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_setName__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hist_setName new_name pos ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hist_setName" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hist_setName" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist_setName((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_setName__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hist_setName new_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hist_setName" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist_setName((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_setName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_hist_setName__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_hist_setName__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'hist_setName'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_delall(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,":hist_delall ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist_delall();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_del__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hist_del pos ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hist_del" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist_del((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_del__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,":hist_del ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::hist_del();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_del(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_hist_del__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_hist_del__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'hist_del'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hist_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":hist_size ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (int)surfit::hist_size();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast<int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hists_info(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":hists_info ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::hists_info();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_histeq__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_histeq surf_name hist_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_histeq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_histeq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::surf_histeq((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_histeq__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_histeq surf_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_histeq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::surf_histeq((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_histeq__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_histeq ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::surf_histeq();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_histeq(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_histeq__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_histeq__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_histeq__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_histeq'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_show_w(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":show_w ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::show_w();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_show_c(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":show_c ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::show_c();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_log_open__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:log_open level logname ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "log_open" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast<int >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "log_open" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::log_open(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_log_open__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:log_open level ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "log_open" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast<int >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::log_open(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_log_open__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":log_open ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::log_open();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_log_open(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_log_open__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_log_open__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_log_open__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'log_open'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_log_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":log_clear ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::log_clear();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_points__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:points points_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "points" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::points((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_points__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":points ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::points();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_points(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_points__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_points__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'points'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_points_add__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:points_add weight points_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "points_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "points_add" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::points_add(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_points_add__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:points_add weight ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "points_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::points_add(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_points_add__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":points_add ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::points_add();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_points_add(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_points_add__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_points_add__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_points_add__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'points_add'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_points_leq__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:points_leq points_name mult ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "points_leq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "points_leq" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::points_leq((char const *)arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_points_leq__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:points_leq points_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "points_leq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::points_leq((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_points_leq__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":points_leq ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::points_leq();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_points_leq(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_points_leq__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_points_leq__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_points_leq__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'points_leq'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_points_geq__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:points_geq points_name mult ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "points_geq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "points_geq" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::points_geq((char const *)arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_points_geq__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:points_geq points_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "points_geq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::points_geq((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_points_geq__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":points_geq ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::points_geq();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_points_geq(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_points_geq__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_points_geq__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_points_geq__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'points_geq'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_load__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pnts_load filename pntsname ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_load" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_load" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_load((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_load__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_load filename ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_load" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_load((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_load(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_pnts_load__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pnts_load__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_load'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_read__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  int arg8 ;
  int arg9 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooooooo:pnts_read filename pntsname col1 col2 col3 col4 delimiter skip_lines grow_by ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pnts_read" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "pnts_read" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "pnts_read" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast<int >(val5);
  ecode6 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "pnts_read" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast<int >(val6);
  res7 = SWIG_AsCharPtrAndSize(objv[7], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "pnts_read" "', argument " "7"" of type '" "char const *""'");
  }
  arg7 = buf7;
  ecode8 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[8], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "pnts_read" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast<int >(val8);
  ecode9 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[9], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "pnts_read" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast<int >(val9);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8,arg9);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_read__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  int arg8 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooooo:pnts_read filename pntsname col1 col2 col3 col4 delimiter skip_lines ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pnts_read" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "pnts_read" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "pnts_read" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast<int >(val5);
  ecode6 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "pnts_read" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast<int >(val6);
  res7 = SWIG_AsCharPtrAndSize(objv[7], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "pnts_read" "', argument " "7"" of type '" "char const *""'");
  }
  arg7 = buf7;
  ecode8 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[8], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "pnts_read" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast<int >(val8);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_read__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooooo:pnts_read filename pntsname col1 col2 col3 col4 delimiter ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pnts_read" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "pnts_read" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "pnts_read" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast<int >(val5);
  ecode6 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "pnts_read" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast<int >(val6);
  res7 = SWIG_AsCharPtrAndSize(objv[7], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "pnts_read" "', argument " "7"" of type '" "char const *""'");
  }
  arg7 = buf7;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_read__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooo:pnts_read filename pntsname col1 col2 col3 col4 ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pnts_read" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "pnts_read" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "pnts_read" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast<int >(val5);
  ecode6 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "pnts_read" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast<int >(val6);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_read__SWIG_4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:pnts_read filename pntsname col1 col2 col3 ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pnts_read" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "pnts_read" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "pnts_read" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast<int >(val5);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_read__SWIG_5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:pnts_read filename pntsname col1 col2 ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pnts_read" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "pnts_read" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_read((char const *)arg1,(char const *)arg2,arg3,arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_read__SWIG_6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:pnts_read filename pntsname col1 ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pnts_read" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_read((char const *)arg1,(char const *)arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_read__SWIG_7(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pnts_read filename pntsname ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_read((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_read__SWIG_8(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_read filename ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_read((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_read(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_pnts_read__SWIG_8(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pnts_read__SWIG_7(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_pnts_read__SWIG_6(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_pnts_read__SWIG_5(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_pnts_read__SWIG_4(clientData, interp, objc, argv - 1);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_pnts_read__SWIG_3(clientData, interp, objc, argv - 1);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_pnts_read__SWIG_2(clientData, interp, objc, argv - 1);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_pnts_read__SWIG_1(clientData, interp, objc, argv - 1);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  {
                    int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_pnts_read__SWIG_0(clientData, interp, objc, argv - 1);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_read'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_save__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pnts_save filename points_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_save" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_save" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_save((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_save__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_save filename ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_save" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_save((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_save(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_pnts_save__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pnts_save__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_save'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_write__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:pnts_write filename points_name delimiter ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_write" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_write" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "pnts_write" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_write((char const *)arg1,(char const *)arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_write__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pnts_write filename points_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_write" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_write" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_write((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_write__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_write filename ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_write" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_write((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_write(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_pnts_write__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pnts_write__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_pnts_write__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_write'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_transform__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:pnts_transform shiftX scaleX shiftY scaleY points_name ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pnts_transform" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pnts_transform" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pnts_transform" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "pnts_transform" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  res5 = SWIG_AsCharPtrAndSize(objv[5], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "pnts_transform" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = buf5;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_transform(arg1,arg2,arg3,arg4,(char const *)arg5);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return TCL_OK;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_transform__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:pnts_transform shiftX scaleX shiftY scaleY ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pnts_transform" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pnts_transform" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pnts_transform" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "pnts_transform" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_transform(arg1,arg2,arg3,arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_transform(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_pnts_transform__SWIG_1(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_pnts_transform__SWIG_0(clientData, interp, objc, argv - 1);
            }
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_transform'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_inverse_transform__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:pnts_inverse_transform shiftX scaleX shiftY scaleY points_name ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pnts_inverse_transform" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pnts_inverse_transform" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pnts_inverse_transform" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "pnts_inverse_transform" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  res5 = SWIG_AsCharPtrAndSize(objv[5], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "pnts_inverse_transform" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = buf5;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_inverse_transform(arg1,arg2,arg3,arg4,(char const *)arg5);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return TCL_OK;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_inverse_transform__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:pnts_inverse_transform shiftX scaleX shiftY scaleY ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pnts_inverse_transform" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pnts_inverse_transform" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pnts_inverse_transform" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "pnts_inverse_transform" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_inverse_transform(arg1,arg2,arg3,arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_inverse_transform(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_pnts_inverse_transform__SWIG_1(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_pnts_inverse_transform__SWIG_0(clientData, interp, objc, argv - 1);
            }
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_inverse_transform'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_rotate__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  char *arg4 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:pnts_rotate centerX centerY angle points_name ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pnts_rotate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pnts_rotate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pnts_rotate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  res4 = SWIG_AsCharPtrAndSize(objv[4], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "pnts_rotate" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = buf4;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_rotate(arg1,arg2,arg3,(char const *)arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_OK;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_rotate__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:pnts_rotate centerX centerY angle ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pnts_rotate" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pnts_rotate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pnts_rotate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_rotate(arg1,arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_rotate(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_pnts_rotate__SWIG_1(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_pnts_rotate__SWIG_0(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_rotate'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_filter_by_mask__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pnts_filter_by_mask points_name mask_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_filter_by_mask" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_filter_by_mask" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_filter_by_mask((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_filter_by_mask__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_filter_by_mask points_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_filter_by_mask" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_filter_by_mask((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_filter_by_mask__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":pnts_filter_by_mask ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_filter_by_mask();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_filter_by_mask(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_pnts_filter_by_mask__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_pnts_filter_by_mask__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pnts_filter_by_mask__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_filter_by_mask'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_filter_in_area__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pnts_filter_in_area points_name curv_pos ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_filter_in_area" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_filter_in_area" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_filter_in_area((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_filter_in_area__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_filter_in_area points_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_filter_in_area" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_filter_in_area((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_filter_in_area__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":pnts_filter_in_area ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_filter_in_area();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_filter_in_area(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_pnts_filter_in_area__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_pnts_filter_in_area__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pnts_filter_in_area__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_filter_in_area'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_filter_out_area__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pnts_filter_out_area points_name curv_pos ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_filter_out_area" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_filter_out_area" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_filter_out_area((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_filter_out_area__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_filter_out_area points_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_filter_out_area" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_filter_out_area((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_filter_out_area__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":pnts_filter_out_area ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_filter_out_area();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_filter_out_area(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_pnts_filter_out_area__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_pnts_filter_out_area__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pnts_filter_out_area__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_filter_out_area'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_filter_by_surf__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:pnts_filter_by_surf eps points_name surf_name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pnts_filter_by_surf" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_filter_by_surf" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "pnts_filter_by_surf" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_filter_by_surf(arg1,(char const *)arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_filter_by_surf__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pnts_filter_by_surf eps points_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pnts_filter_by_surf" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_filter_by_surf" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_filter_by_surf(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_filter_by_surf__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_filter_by_surf eps ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pnts_filter_by_surf" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_filter_by_surf(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_filter_by_surf(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_pnts_filter_by_surf__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pnts_filter_by_surf__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_pnts_filter_by_surf__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_filter_by_surf'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_update_by_surf__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pnts_update_by_surf points_name surf_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_update_by_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_update_by_surf" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_update_by_surf((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_update_by_surf__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_update_by_surf points_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_update_by_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_update_by_surf((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_update_by_surf__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":pnts_update_by_surf ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_update_by_surf();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_update_by_surf(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_pnts_update_by_surf__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_pnts_update_by_surf__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pnts_update_by_surf__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_update_by_surf'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_minx__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_minx points_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_minx" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::pnts_minx((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_minx__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::vec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":pnts_minx ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::pnts_minx();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_minx(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_pnts_minx__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_pnts_minx__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_minx'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_maxx__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_maxx points_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_maxx" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::pnts_maxx((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_maxx__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::vec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":pnts_maxx ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::pnts_maxx();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_maxx(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_pnts_maxx__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_pnts_maxx__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_maxx'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_miny__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_miny points_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_miny" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::pnts_miny((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_miny__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::vec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":pnts_miny ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::pnts_miny();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_miny(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_pnts_miny__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_pnts_miny__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_miny'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_maxy__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_maxy points_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_maxy" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::pnts_maxy((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_maxy__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::vec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":pnts_maxy ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::pnts_maxy();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_maxy(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_pnts_maxy__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_pnts_maxy__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_maxy'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_minz__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_minz points_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_minz" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::pnts_minz((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_minz__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::vec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":pnts_minz ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::pnts_minz();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_minz(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_pnts_minz__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_pnts_minz__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_minz'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_maxz__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_maxz points_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_maxz" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::pnts_maxz((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_maxz__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::vec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":pnts_maxz ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::pnts_maxz();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_maxz(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_pnts_maxz__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_pnts_maxz__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_maxz'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_mean__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_mean points_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_mean" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::pnts_mean((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_mean__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::vec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":pnts_mean ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::pnts_mean();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_mean(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_pnts_mean__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_pnts_mean__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_mean'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_std__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::vec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pnts_std mean points_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pnts_std" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_std" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::pnts_std(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_std__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::vec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_std mean ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pnts_std" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::pnts_std(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_std(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_pnts_std__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pnts_std__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_std'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_abs__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_abs points_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_abs" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_abs((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_abs__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":pnts_abs ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_abs();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_abs(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_pnts_abs__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_pnts_abs__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_abs'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_add_noise__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pnts_add_noise std points_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pnts_add_noise" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_add_noise" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_add_noise(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_add_noise__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_add_noise std ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pnts_add_noise" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_add_noise(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_add_noise(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_pnts_add_noise__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pnts_add_noise__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_add_noise'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_plus(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pnts_plus points_name1 points_name2 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_plus" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_plus" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_plus((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_minus(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pnts_minus points_name1 points_name2 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_minus" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_minus" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_minus((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_mult(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pnts_mult points_name1 points_name2 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_mult" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_mult" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_mult((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_div(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pnts_div points_name1 points_name2 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_div" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_div" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_div((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pnts_set points_name1 points_name2 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_set" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_set((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_plus_real__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pnts_plus_real val points_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pnts_plus_real" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_plus_real" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_plus_real(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_plus_real__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_plus_real val ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pnts_plus_real" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_plus_real(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_plus_real(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_pnts_plus_real__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pnts_plus_real__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_plus_real'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_minus_real__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pnts_minus_real val points_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pnts_minus_real" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_minus_real" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_minus_real(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_minus_real__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_minus_real val ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pnts_minus_real" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_minus_real(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_minus_real(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_pnts_minus_real__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pnts_minus_real__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_minus_real'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_mult_real__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pnts_mult_real val points_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pnts_mult_real" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_mult_real" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_mult_real(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_mult_real__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_mult_real val ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pnts_mult_real" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_mult_real(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_mult_real(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_pnts_mult_real__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pnts_mult_real__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_mult_real'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_div_real__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pnts_div_real val points_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pnts_div_real" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_div_real" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_div_real(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_div_real__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_div_real val ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pnts_div_real" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_div_real(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_div_real(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_pnts_div_real__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pnts_div_real__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_div_real'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_set_real__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pnts_set_real val points_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pnts_set_real" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_set_real" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_set_real(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_set_real__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_set_real val ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pnts_set_real" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_set_real(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_set_real(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_pnts_set_real__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pnts_set_real__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_set_real'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_plus_surf__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pnts_plus_surf points_name surf_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_plus_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_plus_surf" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_plus_surf((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_plus_surf__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_plus_surf points_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_plus_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_plus_surf((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_plus_surf__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":pnts_plus_surf ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_plus_surf();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_plus_surf(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_pnts_plus_surf__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_pnts_plus_surf__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pnts_plus_surf__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_plus_surf'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_minus_surf__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pnts_minus_surf points_name surf_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_minus_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_minus_surf" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_minus_surf((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_minus_surf__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_minus_surf points_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_minus_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_minus_surf((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_minus_surf__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":pnts_minus_surf ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_minus_surf();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_minus_surf(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_pnts_minus_surf__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_pnts_minus_surf__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pnts_minus_surf__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_minus_surf'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_mult_surf__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pnts_mult_surf points_name surf_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_mult_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_mult_surf" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_mult_surf((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_mult_surf__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_mult_surf points_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_mult_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_mult_surf((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_mult_surf__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":pnts_mult_surf ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_mult_surf();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_mult_surf(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_pnts_mult_surf__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_pnts_mult_surf__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pnts_mult_surf__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_mult_surf'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_div_surf__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pnts_div_surf points_name surf_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_div_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_div_surf" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_div_surf((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_div_surf__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_div_surf points_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_div_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_div_surf((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_div_surf__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":pnts_div_surf ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_div_surf();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_div_surf(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_pnts_div_surf__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_pnts_div_surf__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pnts_div_surf__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_div_surf'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_set_surf__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pnts_set_surf points_name surf_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_set_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_set_surf" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_set_surf((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_set_surf__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_set_surf points_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_set_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_set_surf((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_set_surf__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":pnts_set_surf ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_set_surf();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_set_surf(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_pnts_set_surf__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_pnts_set_surf__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pnts_set_surf__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_set_surf'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_concat(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pnts_concat points_name1 points_name2 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_concat" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_concat" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_concat((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_getCount__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::intvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_getCount points_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_getCount" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::intvec *)surfit::pnts_getCount((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        int val = (int)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewIntObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_getCount__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::intvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":pnts_getCount ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::intvec *)surfit::pnts_getCount();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        int val = (int)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewIntObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_getCount(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_pnts_getCount__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_pnts_getCount__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_getCount'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_getName__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::strvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_getName points_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_getName" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::strvec *)surfit::pnts_getName((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        char * val = (*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewStringObj(val,-1));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_getName__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::strvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":pnts_getName ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::strvec *)surfit::pnts_getName();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        char * val = (*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewStringObj(val,-1));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_getName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_pnts_getName__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_pnts_getName__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_getName'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_getId__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::intvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_getId points_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_getId" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::intvec *)surfit::pnts_getId((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        int val = (int)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewIntObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_getId__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::intvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":pnts_getId ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::intvec *)surfit::pnts_getId();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        int val = (int)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewIntObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_getId(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_pnts_getId__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_pnts_getId__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_getId'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_setName__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:pnts_setName new_name points_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_setName" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pnts_setName" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_setName((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_setName__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_setName new_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_setName" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::pnts_setName((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_setName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_pnts_setName__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pnts_setName__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_setName'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_del__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:pnts_del points_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pnts_del" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::pnts_del((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_del__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":pnts_del ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::pnts_del();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_del(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_pnts_del__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_pnts_del__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'pnts_del'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":pnts_size ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (int)surfit::pnts_size();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast<int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_pnts_info(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":pnts_info ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::pnts_info();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_save(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:grid_save filename ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_save" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid_save((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_load__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:grid_load filename gridname ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_load" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "grid_load" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid_load((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_load__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:grid_load filename ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_load" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid_load((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_load(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_grid_load__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_grid_load__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'grid_load'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_unload(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":grid_unload ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::grid_unload();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  char *arg4 = (char *) 0 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:grid stepX stepY percent gridname ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "grid" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "grid" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  res4 = SWIG_AsCharPtrAndSize(objv[4], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "grid" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = buf4;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid(arg1,arg2,arg3,(char const *)arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_OK;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:grid stepX stepY percent ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "grid" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "grid" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid(arg1,arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:grid stepX stepY ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "grid" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid(arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:grid stepX ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "grid" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid__SWIG_4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,":grid ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_grid__SWIG_4(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_grid__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_grid__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_grid__SWIG_1(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_grid__SWIG_0(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'grid'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid2__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  char *arg4 = (char *) 0 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:grid2 stepX stepY percent gridname ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "grid2" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "grid2" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  res4 = SWIG_AsCharPtrAndSize(objv[4], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "grid2" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = buf4;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid2(arg1,arg2,arg3,(char const *)arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_OK;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid2__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:grid2 stepX stepY percent ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "grid2" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "grid2" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid2(arg1,arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid2__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:grid2 stepX stepY ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "grid2" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid2(arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid2__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:grid2 stepX ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "grid2" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid2(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid2__SWIG_4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,":grid2 ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid2();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_grid2__SWIG_4(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_grid2__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_grid2__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_grid2__SWIG_1(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_grid2__SWIG_0(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'grid2'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_get__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooooo:grid_get startX endX stepX startY endY stepY gridname ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "grid_get" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_get" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "grid_get" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "grid_get" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  ecode5 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "grid_get" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast<double >(val5);
  ecode6 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "grid_get" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast<double >(val6);
  res7 = SWIG_AsCharPtrAndSize(objv[7], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "grid_get" "', argument " "7"" of type '" "char const *""'");
  }
  arg7 = buf7;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid_get(arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return TCL_OK;
fail:
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_get__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooo:grid_get startX endX stepX startY endY stepY ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "grid_get" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_get" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "grid_get" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "grid_get" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  ecode5 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "grid_get" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast<double >(val5);
  ecode6 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "grid_get" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast<double >(val6);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid_get(arg1,arg2,arg3,arg4,arg5,arg6);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_grid_get__SWIG_1(clientData, interp, objc, argv - 1);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_grid_get__SWIG_0(clientData, interp, objc, argv - 1);
                }
              }
            }
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'grid_get'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_get2__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooooo:grid_get2 startX endX stepX startY endY stepY gridname ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "grid_get2" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_get2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "grid_get2" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "grid_get2" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  ecode5 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "grid_get2" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast<double >(val5);
  ecode6 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "grid_get2" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast<double >(val6);
  res7 = SWIG_AsCharPtrAndSize(objv[7], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "grid_get2" "', argument " "7"" of type '" "char const *""'");
  }
  arg7 = buf7;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid_get2(arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return TCL_OK;
fail:
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_get2__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooo:grid_get2 startX endX stepX startY endY stepY ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "grid_get2" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_get2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "grid_get2" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "grid_get2" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  ecode5 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "grid_get2" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast<double >(val5);
  ecode6 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "grid_get2" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast<double >(val6);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid_get2(arg1,arg2,arg3,arg4,arg5,arg6);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_get2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_grid_get2__SWIG_1(clientData, interp, objc, argv - 1);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                int res = SWIG_AsCharPtrAndSize(argv[6], 0, NULL, 0);
                _v = SWIG_CheckState(res);
                if (_v) {
                  return _wrap_grid_get2__SWIG_0(clientData, interp, objc, argv - 1);
                }
              }
            }
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'grid_get2'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_get_for_pnts__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:grid_get_for_pnts Xnodes Ynodes points_name_or_position gridname ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "grid_get_for_pnts" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast<int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_get_for_pnts" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "grid_get_for_pnts" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  res4 = SWIG_AsCharPtrAndSize(objv[4], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "grid_get_for_pnts" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = buf4;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid_get_for_pnts(arg1,arg2,(char const *)arg3,(char const *)arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_get_for_pnts__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:grid_get_for_pnts Xnodes Ynodes points_name_or_position ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "grid_get_for_pnts" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast<int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_get_for_pnts" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "grid_get_for_pnts" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid_get_for_pnts(arg1,arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_get_for_pnts__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  bool result;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:grid_get_for_pnts Xnodes Ynodes ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "grid_get_for_pnts" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast<int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_get_for_pnts" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid_get_for_pnts(arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_get_for_pnts(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_grid_get_for_pnts__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_grid_get_for_pnts__SWIG_1(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_grid_get_for_pnts__SWIG_0(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'grid_get_for_pnts'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_get_for_pnts_step__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:grid_get_for_pnts_step stepX stepY points_name_or_position gridname ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "grid_get_for_pnts_step" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_get_for_pnts_step" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "grid_get_for_pnts_step" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  res4 = SWIG_AsCharPtrAndSize(objv[4], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "grid_get_for_pnts_step" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = buf4;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid_get_for_pnts_step(arg1,arg2,(char const *)arg3,(char const *)arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_get_for_pnts_step__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:grid_get_for_pnts_step stepX stepY points_name_or_position ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "grid_get_for_pnts_step" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_get_for_pnts_step" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "grid_get_for_pnts_step" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid_get_for_pnts_step(arg1,arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_get_for_pnts_step__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  bool result;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:grid_get_for_pnts_step stepX stepY ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "grid_get_for_pnts_step" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "grid_get_for_pnts_step" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid_get_for_pnts_step(arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_get_for_pnts_step(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_grid_get_for_pnts_step__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_grid_get_for_pnts_step__SWIG_1(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_grid_get_for_pnts_step__SWIG_0(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'grid_get_for_pnts_step'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_get_from_surf__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:grid_get_from_surf surface_name_or_position gridname ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_get_from_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "grid_get_from_surf" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid_get_from_surf((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_get_from_surf__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:grid_get_from_surf surface_name_or_position ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_get_from_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid_get_from_surf((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_get_from_surf__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,":grid_get_from_surf ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid_get_from_surf();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_get_from_surf(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_grid_get_from_surf__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_grid_get_from_surf__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_grid_get_from_surf__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'grid_get_from_surf'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_check(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,":grid_check ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid_check();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_info(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":grid_info ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::grid_info();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_getCountX(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":grid_getCountX ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (int)surfit::grid_getCountX();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast<int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_setCountX(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  bool result;
  int val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:grid_setCountX countX ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "grid_setCountX" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast<int >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid_setCountX(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_getCountY(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":grid_getCountY ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (int)surfit::grid_getCountY();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast<int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_setCountY(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  bool result;
  int val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:grid_setCountY countY ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "grid_setCountY" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast<int >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid_setCountY(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_getCoordNodeX(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  double result;
  int val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:grid_getCoordNodeX i ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "grid_getCoordNodeX" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast<int >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (double)surfit::grid_getCoordNodeX(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast<double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_getCoordNodeY(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  double result;
  int val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:grid_getCoordNodeY j ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "grid_getCoordNodeY" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast<int >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (double)surfit::grid_getCoordNodeY(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast<double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_getStepX(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,":grid_getStepX ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (double)surfit::grid_getStepX();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast<double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_getStepY(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,":grid_getStepY ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (double)surfit::grid_getStepY();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast<double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN char *basis_cnt_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_From_int(static_cast<int >(surfit::basis_cnt));
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN char *basis_cnt_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    int val;
    int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(value, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""surfit::basis_cnt""' of type '""int""'");
    }
    surfit::basis_cnt = static_cast<int >(val);
  }
  return NULL;
fail:
  return "basis_cnt";
}


SWIGINTERN int
_wrap_surfit(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":surfit ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::surfit();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_clear_rules(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":clear_rules ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::clear_rules();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_get_solvers_count(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":get_solvers_count ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (int)surfit::get_solvers_count();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast<int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_get_solver_long_name(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  char *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:get_solver_long_name pos ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_solver_long_name" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast<int >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (char *)surfit::get_solver_long_name(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_SetObjResult(interp,Tcl_NewStringObj(result,-1));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_get_solver_short_name(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  char *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:get_solver_short_name pos ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_solver_short_name" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast<int >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (char *)surfit::get_solver_short_name(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_SetObjResult(interp,Tcl_NewStringObj(result,-1));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_get_current_solver_short_name(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":get_current_solver_short_name ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (char *)surfit::get_current_solver_short_name();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_SetObjResult(interp,Tcl_NewStringObj(result,-1));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_get_current_solver_long_name(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":get_current_solver_long_name ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (char *)surfit::get_current_solver_long_name();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_SetObjResult(interp,Tcl_NewStringObj(result,-1));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_set_solver(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:set_solver short_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_solver" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::set_solver((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_solvers_info(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":solvers_info ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::solvers_info();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surface__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surface surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surface" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surface((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surface__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surface ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surface();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surface(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surface__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surface__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surface'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surface_add__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surface_add weight surface_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surface_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surface_add" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surface_add(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surface_add__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surface_add weight ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surface_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surface_add(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surface_add(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_surface_add__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surface_add__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surface_add'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surface_leq__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surface_leq surface_name mult ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surface_leq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "surface_leq" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surface_leq((char const *)arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surface_leq__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surface_leq surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surface_leq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surface_leq((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surface_leq__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surface_leq ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surface_leq();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surface_leq(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surface_leq__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surface_leq__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_surface_leq__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surface_leq'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surface_geq__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surface_geq surface_name mult ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surface_geq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "surface_geq" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surface_geq((char const *)arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surface_geq__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surface_geq surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surface_geq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surface_geq((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surface_geq__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surface_geq ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surface_geq();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surface_geq(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surface_geq__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surface_geq__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_surface_geq__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surface_geq'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_trend__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:trend D1 D2 surface_name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "trend" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "trend" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "trend" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::trend(arg1,arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_trend__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:trend D1 D2 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "trend" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "trend" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::trend(arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_trend__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:trend D1 ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "trend" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::trend(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_trend__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":trend ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::trend();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_trend(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_trend__SWIG_3(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_trend__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_trend__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_trend__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'trend'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_trend_add__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  char *arg4 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:trend_add weight D1 D2 surface_name ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "trend_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "trend_add" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "trend_add" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  res4 = SWIG_AsCharPtrAndSize(objv[4], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "trend_add" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = buf4;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::trend_add(arg1,arg2,arg3,(char const *)arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_OK;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_trend_add__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:trend_add weight D1 D2 ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "trend_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "trend_add" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "trend_add" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::trend_add(arg1,arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_trend_add__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:trend_add weight D1 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "trend_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "trend_add" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::trend_add(arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_trend_add__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:trend_add weight ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "trend_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::trend_add(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_trend_add(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_trend_add__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_trend_add__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_trend_add__SWIG_1(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_trend_add__SWIG_0(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'trend_add'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:mask val mask_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mask" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:mask val ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_mask__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mask__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'mask'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_add__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:mask_add val weigh mask_name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mask_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mask_add" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mask_add" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_add(arg1,arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_add__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:mask_add val weigh ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mask_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mask_add" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_add(arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_add__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:mask_add val ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mask_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_add(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_add(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_mask_add__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_mask_add__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mask_add__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'mask_add'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_leq__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:mask_leq value mask_name mult ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mask_leq" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mask_leq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mask_leq" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_leq(arg1,(char const *)arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_leq__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:mask_leq value mask_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mask_leq" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mask_leq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_leq(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_leq__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:mask_leq value ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mask_leq" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_leq(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_leq(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_mask_leq__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mask_leq__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_mask_leq__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'mask_leq'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_geq__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:mask_geq value mask_name mult ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mask_geq" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mask_geq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mask_geq" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_geq(arg1,(char const *)arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_geq__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:mask_geq value mask_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mask_geq" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mask_geq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_geq(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_geq__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:mask_geq value ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mask_geq" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_geq(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_geq(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_mask_geq__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mask_geq__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_mask_geq__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'mask_geq'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_surf__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:mask_surf surf_name mask_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mask_surf" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_surf((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_surf__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:mask_surf surf_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_surf((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_surf__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":mask_surf ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_surf();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_surf(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_mask_surf__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_mask_surf__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mask_surf__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'mask_surf'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_surf_add__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:mask_surf_add surf_name weight mask_name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_surf_add" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mask_surf_add" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mask_surf_add" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_surf_add((char const *)arg1,arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_surf_add__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:mask_surf_add surf_name weight ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_surf_add" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mask_surf_add" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_surf_add((char const *)arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_surf_add__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:mask_surf_add surf_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_surf_add" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_surf_add((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_surf_add__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":mask_surf_add ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_surf_add();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_surf_add(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_mask_surf_add__SWIG_3(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_mask_surf_add__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_mask_surf_add__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mask_surf_add__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'mask_surf_add'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_surf_leq__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:mask_surf_leq surf_name mask_name mult ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_surf_leq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mask_surf_leq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mask_surf_leq" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_surf_leq((char const *)arg1,(char const *)arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_surf_leq__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:mask_surf_leq surf_name mask_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_surf_leq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mask_surf_leq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_surf_leq((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_surf_leq__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:mask_surf_leq surf_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_surf_leq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_surf_leq((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_surf_leq__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":mask_surf_leq ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_surf_leq();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_surf_leq(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_mask_surf_leq__SWIG_3(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_mask_surf_leq__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mask_surf_leq__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_mask_surf_leq__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'mask_surf_leq'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_surf_geq__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:mask_surf_geq surf_name mask_name mult ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_surf_geq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mask_surf_geq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mask_surf_geq" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_surf_geq((char const *)arg1,(char const *)arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_surf_geq__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:mask_surf_geq surf_name mask_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_surf_geq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mask_surf_geq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_surf_geq((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_surf_geq__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:mask_surf_geq surf_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_surf_geq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_surf_geq((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_surf_geq__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":mask_surf_geq ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_surf_geq();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_surf_geq(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_mask_surf_geq__SWIG_3(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_mask_surf_geq__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mask_surf_geq__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_mask_surf_geq__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'mask_surf_geq'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_mean__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:mask_mean mean mask_name mult ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mask_mean" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mask_mean" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mask_mean" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_mean(arg1,(char const *)arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_mean__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:mask_mean mean mask_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mask_mean" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mask_mean" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_mean(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_mean__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:mask_mean mean ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mask_mean" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_mean(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_mean(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_mask_mean__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mask_mean__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_mask_mean__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'mask_mean'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_wmean__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:mask_wmean mean mask_name surf_name mult ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mask_wmean" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mask_wmean" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mask_wmean" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mask_wmean" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_wmean(arg1,(char const *)arg2,(char const *)arg3,arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_wmean__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:mask_wmean mean mask_name surf_name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mask_wmean" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mask_wmean" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mask_wmean" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_wmean(arg1,(char const *)arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_wmean__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:mask_wmean mean mask_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mask_wmean" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mask_wmean" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_wmean(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_wmean__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:mask_wmean mean ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mask_wmean" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_wmean(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_wmean(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_mask_wmean__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mask_wmean__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mask_wmean__SWIG_1(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_mask_wmean__SWIG_0(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'mask_wmean'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_completer__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:mask_completer mask_name D1 D2 alpha w ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_completer" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mask_completer" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mask_completer" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mask_completer" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  ecode5 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "mask_completer" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast<double >(val5);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_completer((char const *)arg1,arg2,arg3,arg4,arg5);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_completer__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:mask_completer mask_name D1 D2 alpha ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_completer" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mask_completer" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mask_completer" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mask_completer" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_completer((char const *)arg1,arg2,arg3,arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_completer__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:mask_completer mask_name D1 D2 ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_completer" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mask_completer" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mask_completer" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_completer((char const *)arg1,arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_completer__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:mask_completer mask_name D1 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_completer" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mask_completer" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_completer((char const *)arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_completer__SWIG_4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:mask_completer mask_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_completer" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_completer((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_completer__SWIG_5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":mask_completer ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_completer();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_completer(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_mask_completer__SWIG_5(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_mask_completer__SWIG_4(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_mask_completer__SWIG_3(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_mask_completer__SWIG_2(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_mask_completer__SWIG_1(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_mask_completer__SWIG_0(clientData, interp, objc, argv - 1);
            }
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'mask_completer'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_completer_add__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooo:mask_completer_add weight mask_name D1 D2 alpha w ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mask_completer_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mask_completer_add" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mask_completer_add" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mask_completer_add" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  ecode5 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "mask_completer_add" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast<double >(val5);
  ecode6 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "mask_completer_add" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast<double >(val6);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_completer_add(arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_completer_add__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:mask_completer_add weight mask_name D1 D2 alpha ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mask_completer_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mask_completer_add" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mask_completer_add" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mask_completer_add" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  ecode5 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "mask_completer_add" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast<double >(val5);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_completer_add(arg1,(char const *)arg2,arg3,arg4,arg5);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_completer_add__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:mask_completer_add weight mask_name D1 D2 ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mask_completer_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mask_completer_add" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mask_completer_add" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mask_completer_add" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_completer_add(arg1,(char const *)arg2,arg3,arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_completer_add__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:mask_completer_add weight mask_name D1 ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mask_completer_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mask_completer_add" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mask_completer_add" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_completer_add(arg1,(char const *)arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_completer_add__SWIG_4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:mask_completer_add weight mask_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mask_completer_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mask_completer_add" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_completer_add(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_completer_add__SWIG_5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:mask_completer_add weight ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mask_completer_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_completer_add(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_completer_add__SWIG_6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":mask_completer_add ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_completer_add();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_completer_add(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_mask_completer_add__SWIG_6(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_mask_completer_add__SWIG_5(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mask_completer_add__SWIG_4(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_mask_completer_add__SWIG_3(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_mask_completer_add__SWIG_2(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_mask_completer_add__SWIG_1(clientData, interp, objc, argv - 1);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_mask_completer_add__SWIG_0(clientData, interp, objc, argv - 1);
              }
            }
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'mask_completer_add'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_load__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_load filename surfname ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_load" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_load" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_load((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_load__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_load filename ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_load" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_load((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_load(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_load__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_load__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_load'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_save__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_save filename surface_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_save" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_save" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_save((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_save__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_save filename ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_save" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_save((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_save(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_save__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_save__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_save'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_getValue__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  surfit::vec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:surf_getValue x y surface_name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_getValue" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "surf_getValue" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "surf_getValue" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_getValue(arg1,arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_getValue__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  surfit::vec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_getValue x y ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_getValue" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "surf_getValue" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_getValue(arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_getValue(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_surf_getValue__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_surf_getValue__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_getValue'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_getValueIJ__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:surf_getValueIJ I J surface_name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_getValueIJ" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast<int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "surf_getValueIJ" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "surf_getValueIJ" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_getValueIJ(arg1,arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_getValueIJ__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  surfit::vec *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_getValueIJ I J ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_getValueIJ" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast<int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "surf_getValueIJ" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast<int >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_getValueIJ(arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_getValueIJ(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_surf_getValueIJ__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_surf_getValueIJ__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_getValueIJ'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_resid__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:surf_resid filename surface_name pnts_pos ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_resid" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_resid" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "surf_resid" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::surf_resid((char const *)arg1,(char const *)arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_resid__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_resid filename surface_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_resid" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_resid" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::surf_resid((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_resid__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_resid filename ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_resid" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::surf_resid((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_resid(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_resid__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_resid__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_surf_resid__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_resid'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_D1__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_D1 surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_D1" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_D1((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_D1__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::vec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_D1 ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_D1();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_D1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_D1__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_D1__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_D1'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_D2__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_D2 surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_D2" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_D2((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_D2__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::vec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_D2 ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_D2();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_D2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_D2__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_D2__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_D2'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_gradient__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_gradient surface_name newname ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_gradient" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_gradient" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_gradient((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_gradient__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_gradient surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_gradient" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_gradient((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_gradient__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_gradient ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_gradient();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_gradient(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_gradient__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_gradient__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_gradient__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_gradient'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_project__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_project surface_name newname ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_project" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_project" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_project((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_project__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_project surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_project" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_project((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_project__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_project ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_project();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_project(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_project__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_project__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_project__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_project'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_add_noise__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_add_noise std surface_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_add_noise" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_add_noise" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::surf_add_noise(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_add_noise__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_add_noise std ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_add_noise" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::surf_add_noise(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_add_noise(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_surf_add_noise__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_add_noise__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_add_noise'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_minz__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_minz surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_minz" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_minz((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_minz__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::vec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_minz ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_minz();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_minz(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_minz__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_minz__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_minz'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_area_minz__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_area_minz area_name surface_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_area_minz" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_area_minz" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_area_minz((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_area_minz__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_area_minz area_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_area_minz" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_area_minz((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_area_minz__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::vec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_area_minz ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_area_minz();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_area_minz(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_area_minz__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_area_minz__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_area_minz__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_area_minz'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_maxz__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_maxz surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_maxz" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_maxz((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_maxz__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::vec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_maxz ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_maxz();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_maxz(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_maxz__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_maxz__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_maxz'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_area_maxz__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_area_maxz area_name surface_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_area_maxz" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_area_maxz" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_area_maxz((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_area_maxz__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_area_maxz area_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_area_maxz" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_area_maxz((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_area_maxz__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::vec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_area_maxz ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_area_maxz();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_area_maxz(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_area_maxz__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_area_maxz__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_area_maxz__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_area_maxz'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_mean__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_mean surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_mean" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_mean((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_mean__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::vec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_mean ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_mean();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_mean(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_mean__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_mean__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_mean'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_area_mean__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_area_mean area_name surface_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_area_mean" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_area_mean" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_area_mean((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_area_mean__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_area_mean area_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_area_mean" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_area_mean((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_area_mean__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::vec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_area_mean ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_area_mean();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_area_mean(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_area_mean__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_area_mean__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_area_mean__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_area_mean'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_mask_mean__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_mask_mean mask_name surface_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_mask_mean" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_mask_mean" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_mask_mean((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_mask_mean__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_mask_mean mask_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_mask_mean" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_mask_mean((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_mask_mean__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::vec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_mask_mean ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_mask_mean();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_mask_mean(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_mask_mean__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_mask_mean__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_mask_mean__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_mask_mean'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_wmean__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_wmean wsurface_name surface_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_wmean" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_wmean" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_wmean((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_wmean__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_wmean wsurface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_wmean" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_wmean((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_wmean__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::vec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_wmean ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_wmean();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_wmean(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_wmean__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_wmean__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_wmean__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_wmean'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_area_wmean__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:surf_area_wmean area_name wsurface_name surface_name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_area_wmean" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_area_wmean" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "surf_area_wmean" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_area_wmean((char const *)arg1,(char const *)arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_area_wmean__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_area_wmean area_name wsurface_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_area_wmean" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_area_wmean" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_area_wmean((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_area_wmean__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_area_wmean area_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_area_wmean" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_area_wmean((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_area_wmean__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::vec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_area_wmean ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_area_wmean();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_area_wmean(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_area_wmean__SWIG_3(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_area_wmean__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_area_wmean__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_surf_area_wmean__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_area_wmean'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_mask_wmean__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:surf_mask_wmean mask_name wsurface_name surface_name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_mask_wmean" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_mask_wmean" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "surf_mask_wmean" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_mask_wmean((char const *)arg1,(char const *)arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_mask_wmean__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_mask_wmean mask_name wsurface_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_mask_wmean" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_mask_wmean" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_mask_wmean((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_mask_wmean__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_mask_wmean mask_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_mask_wmean" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_mask_wmean((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_mask_wmean__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::vec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_mask_wmean ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_mask_wmean();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_mask_wmean(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_mask_wmean__SWIG_3(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_mask_wmean__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_mask_wmean__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_surf_mask_wmean__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_mask_wmean'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_std__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::vec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_std mean surface_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_std" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_std" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_std(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_std__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::vec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_std mean ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_std" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_std(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_std(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_surf_std__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_std__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_std'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_sum__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_sum surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_sum" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_sum((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_sum__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::vec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_sum ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_sum();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_sum(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_sum__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_sum__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_sum'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_sum_area__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_sum_area area_pos surface_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_sum_area" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_sum_area" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_sum_area((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_sum_area__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_sum_area area_pos ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_sum_area" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_sum_area((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_sum_area__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::vec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_sum_area ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_sum_area();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_sum_area(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_sum_area__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_sum_area__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_sum_area__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_sum_area'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_cells_in_area__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::intvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_cells_in_area curv_pos surface_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_cells_in_area" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_cells_in_area" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::intvec *)surfit::surf_cells_in_area((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        int val = (int)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewIntObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_cells_in_area__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::intvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_cells_in_area curv_pos ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_cells_in_area" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::intvec *)surfit::surf_cells_in_area((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        int val = (int)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewIntObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_cells_in_area__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::intvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_cells_in_area ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::intvec *)surfit::surf_cells_in_area();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        int val = (int)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewIntObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_cells_in_area(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_cells_in_area__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_cells_in_area__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_cells_in_area__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_cells_in_area'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_plus(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_plus surface1_name surface2_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_plus" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_plus" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_plus((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_minus(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_minus surface1_name surface2_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_minus" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_minus" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_minus((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_mult(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_mult surface1_name surface2_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_mult" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_mult" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_mult((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_div(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_div surface1_name surface2_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_div" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_div" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_div((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_set surface1_name surface2_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_set" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_set((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_plus_area(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:surf_plus_area surface1_name area_name surface2_name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_plus_area" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_plus_area" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "surf_plus_area" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_plus_area((char const *)arg1,(char const *)arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_minus_area(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:surf_minus_area surface1_name area_name surface2_name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_minus_area" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_minus_area" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "surf_minus_area" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_minus_area((char const *)arg1,(char const *)arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_mult_area(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:surf_mult_area surface1_name area_name surface2_name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_mult_area" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_mult_area" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "surf_mult_area" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_mult_area((char const *)arg1,(char const *)arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_div_area(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:surf_div_area surface1_name area_name surface2_name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_div_area" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_div_area" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "surf_div_area" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_div_area((char const *)arg1,(char const *)arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_set_area(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:surf_set_area surface1_name area_name surface2_name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_set_area" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_set_area" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "surf_set_area" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_set_area((char const *)arg1,(char const *)arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_plus_value__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_plus_value val surface_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_plus_value" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_plus_value" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_plus_value(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_plus_value__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_plus_value val ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_plus_value" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_plus_value(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_plus_value(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_surf_plus_value__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_plus_value__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_plus_value'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_minus_value__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_minus_value val surface_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_minus_value" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_minus_value" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_minus_value(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_minus_value__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_minus_value val ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_minus_value" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_minus_value(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_minus_value(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_surf_minus_value__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_minus_value__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_minus_value'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_mult_value__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_mult_value val surface_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_mult_value" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_mult_value" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_mult_value(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_mult_value__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_mult_value val ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_mult_value" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_mult_value(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_mult_value(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_surf_mult_value__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_mult_value__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_mult_value'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_div_value__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_div_value val surface_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_div_value" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_div_value" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_div_value(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_div_value__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_div_value val ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_div_value" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_div_value(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_div_value(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_surf_div_value__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_div_value__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_div_value'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_set_value__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_set_value val surface_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_set_value" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_set_value" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_set_value(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_set_value__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_set_value val ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_set_value" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_set_value(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_set_value(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_surf_set_value__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_set_value__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_set_value'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_plus_value_area__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:surf_plus_value_area val area_name surface_name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_plus_value_area" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_plus_value_area" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "surf_plus_value_area" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_plus_value_area(arg1,(char const *)arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_plus_value_area__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_plus_value_area val area_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_plus_value_area" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_plus_value_area" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_plus_value_area(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_plus_value_area__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_plus_value_area val ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_plus_value_area" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_plus_value_area(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_plus_value_area(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_surf_plus_value_area__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_plus_value_area__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_surf_plus_value_area__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_plus_value_area'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_minus_value_area__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:surf_minus_value_area val area_name surface_name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_minus_value_area" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_minus_value_area" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "surf_minus_value_area" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_minus_value_area(arg1,(char const *)arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_minus_value_area__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_minus_value_area val area_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_minus_value_area" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_minus_value_area" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_minus_value_area(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_minus_value_area__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_minus_value_area val ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_minus_value_area" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_minus_value_area(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_minus_value_area(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_surf_minus_value_area__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_minus_value_area__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_surf_minus_value_area__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_minus_value_area'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_mult_value_area__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:surf_mult_value_area val area_name surface_name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_mult_value_area" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_mult_value_area" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "surf_mult_value_area" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_mult_value_area(arg1,(char const *)arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_mult_value_area__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_mult_value_area val area_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_mult_value_area" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_mult_value_area" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_mult_value_area(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_mult_value_area__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_mult_value_area val ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_mult_value_area" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_mult_value_area(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_mult_value_area(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_surf_mult_value_area__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_mult_value_area__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_surf_mult_value_area__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_mult_value_area'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_div_value_area__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:surf_div_value_area val area_name surface_name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_div_value_area" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_div_value_area" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "surf_div_value_area" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_div_value_area(arg1,(char const *)arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_div_value_area__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_div_value_area val area_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_div_value_area" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_div_value_area" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_div_value_area(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_div_value_area__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_div_value_area val ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_div_value_area" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_div_value_area(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_div_value_area(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_surf_div_value_area__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_div_value_area__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_surf_div_value_area__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_div_value_area'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_set_value_area__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:surf_set_value_area val area_name surface_name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_set_value_area" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_set_value_area" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "surf_set_value_area" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_set_value_area((char const *)arg1,(char const *)arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_set_value_area__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_set_value_area val area_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_set_value_area" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_set_value_area" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_set_value_area((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_set_value_area__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_set_value_area val ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_set_value_area" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_set_value_area((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_set_value_area(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_set_value_area__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_set_value_area__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_surf_set_value_area__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_set_value_area'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_filter_by_mask__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_filter_by_mask surface_name mask_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_filter_by_mask" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_filter_by_mask" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_filter_by_mask((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_filter_by_mask__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_filter_by_mask surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_filter_by_mask" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_filter_by_mask((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_filter_by_mask__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_filter_by_mask ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_filter_by_mask();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_filter_by_mask(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_filter_by_mask__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_filter_by_mask__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_filter_by_mask__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_filter_by_mask'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_filter_in_area__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_filter_in_area surface_name area_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_filter_in_area" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_filter_in_area" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_filter_in_area((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_filter_in_area__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_filter_in_area surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_filter_in_area" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_filter_in_area((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_filter_in_area__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_filter_in_area ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_filter_in_area();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_filter_in_area(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_filter_in_area__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_filter_in_area__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_filter_in_area__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_filter_in_area'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_filter_out_area__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_filter_out_area surface_name area_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_filter_out_area" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_filter_out_area" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_filter_out_area((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_filter_out_area__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_filter_out_area surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_filter_out_area" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_filter_out_area((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_filter_out_area__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_filter_out_area ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_filter_out_area();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_filter_out_area(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_filter_out_area__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_filter_out_area__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_filter_out_area__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_filter_out_area'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_filter_by_surf__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:surf_filter_by_surf eps surface1_name surface2_name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_filter_by_surf" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_filter_by_surf" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "surf_filter_by_surf" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_filter_by_surf(arg1,(char const *)arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_filter_by_surf__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_filter_by_surf eps surface1_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_filter_by_surf" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_filter_by_surf" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_filter_by_surf(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_filter_by_surf__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_filter_by_surf eps ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_filter_by_surf" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_filter_by_surf(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_filter_by_surf(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_surf_filter_by_surf__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_filter_by_surf__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_surf_filter_by_surf__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_filter_by_surf'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_swapxy__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_swapxy surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_swapxy" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_swapxy((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_swapxy__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_swapxy ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_swapxy();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_swapxy(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_swapxy__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_swapxy__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_swapxy'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_get_details_level__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::intvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_get_details_level surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_get_details_level" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::intvec *)surfit::surf_get_details_level((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        int val = (int)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewIntObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_get_details_level__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::intvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_get_details_level ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::intvec *)surfit::surf_get_details_level();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        int val = (int)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewIntObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_get_details_level(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_get_details_level__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_get_details_level__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_get_details_level'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_decomp__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_decomp surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_decomp" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_decomp((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_decomp__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_decomp ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_decomp();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_decomp(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_decomp__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_decomp__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_decomp'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_auto_decomp__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_auto_decomp eps surface_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_auto_decomp" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_auto_decomp" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_auto_decomp(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_auto_decomp__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_auto_decomp eps ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_auto_decomp" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_auto_decomp(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_auto_decomp(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_surf_auto_decomp__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_auto_decomp__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_auto_decomp'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_recons__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_recons surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_recons" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_recons((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_recons__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_recons ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_recons();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_recons(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_recons__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_recons__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_recons'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_full_recons__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_full_recons surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_full_recons" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_full_recons((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_full_recons__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_full_recons ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_full_recons();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_full_recons(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_full_recons__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_full_recons__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_full_recons'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_to_pnts__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_to_pnts surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_to_pnts" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_to_pnts((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_to_pnts__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_to_pnts ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_to_pnts();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_to_pnts(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_to_pnts__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_to_pnts__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_to_pnts'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_to_mask__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:surf_to_mask true_from true_to surface_name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_to_mask" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "surf_to_mask" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "surf_to_mask" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_to_mask(arg1,arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_to_mask__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_to_mask true_from true_to ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_to_mask" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "surf_to_mask" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_to_mask(arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_to_mask(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_surf_to_mask__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_surf_to_mask__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_to_mask'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_getCountX__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::intvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_getCountX surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_getCountX" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::intvec *)surfit::surf_getCountX((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        int val = (int)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewIntObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_getCountX__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::intvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_getCountX ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::intvec *)surfit::surf_getCountX();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        int val = (int)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewIntObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_getCountX(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_getCountX__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_getCountX__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_getCountX'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_getCountY__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::intvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_getCountY surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_getCountY" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::intvec *)surfit::surf_getCountY((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        int val = (int)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewIntObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_getCountY__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::intvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_getCountY ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::intvec *)surfit::surf_getCountY();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        int val = (int)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewIntObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_getCountY(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_getCountY__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_getCountY__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_getCountY'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_getStepX__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_getStepX surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_getStepX" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_getStepX((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_getStepX__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::vec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_getStepX ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_getStepX();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_getStepX(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_getStepX__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_getStepX__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_getStepX'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_getStepY__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::vec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_getStepY surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_getStepY" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_getStepY((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_getStepY__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::vec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_getStepY ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::vec *)surfit::surf_getStepY();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        double val = (double)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewDoubleObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_getStepY(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_getStepY__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_getStepY__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_getStepY'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_undef__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_undef new_undef_value surface_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_undef" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_undef" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_undef(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_undef__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_undef new_undef_value ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surf_undef" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_undef(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_undef(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_surf_undef__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_undef__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_undef'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_info__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_info surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_info" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::surf_info((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_info__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":surf_info ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::surf_info();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_info(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_info__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_info__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_info'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_getName__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::strvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_getName surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_getName" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::strvec *)surfit::surf_getName((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        char * val = (*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewStringObj(val,-1));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_getName__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::strvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_getName ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::strvec *)surfit::surf_getName();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        char * val = (*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewStringObj(val,-1));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_getName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_getName__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_getName__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_getName'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_getId__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::intvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_getId surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_getId" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::intvec *)surfit::surf_getId((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        int val = (int)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewIntObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_getId__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::intvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_getId ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::intvec *)surfit::surf_getId();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        int val = (int)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewIntObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_getId(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_getId__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_getId__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_getId'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_setName__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_setName new_name surface_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_setName" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surf_setName" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_setName((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_setName__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_setName new_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_setName" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_setName((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_setName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_setName__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_surf_setName__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_setName'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_del__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_del surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_del" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::surf_del((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_del__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":surf_del ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::surf_del();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_del(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_del__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_del__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_del'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_size ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (int)surfit::surf_size();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast<int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surfs_info(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":surfs_info ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::surfs_info();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_trace_cntr__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:surf_trace_cntr surface_name from to step ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_trace_cntr" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "surf_trace_cntr" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "surf_trace_cntr" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "surf_trace_cntr" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_trace_cntr((char const *)arg1,arg2,arg3,arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_trace_cntr__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:surf_trace_cntr surface_name from to ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_trace_cntr" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "surf_trace_cntr" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "surf_trace_cntr" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_trace_cntr((char const *)arg1,arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_trace_cntr__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:surf_trace_cntr surface_name from ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_trace_cntr" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "surf_trace_cntr" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_trace_cntr((char const *)arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_trace_cntr__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:surf_trace_cntr surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surf_trace_cntr" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_trace_cntr((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_trace_cntr__SWIG_4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":surf_trace_cntr ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::surf_trace_cntr();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_surf_trace_cntr(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_surf_trace_cntr__SWIG_4(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_surf_trace_cntr__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_surf_trace_cntr__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_surf_trace_cntr__SWIG_1(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_surf_trace_cntr__SWIG_0(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'surf_trace_cntr'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_load__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:mask_load filename maskname ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_load" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mask_load" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_load((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_load__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:mask_load filename ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_load" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_load((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_load(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_mask_load__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mask_load__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'mask_load'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_save__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:mask_save filename mask_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_save" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mask_save" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_save((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_save__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:mask_save filename ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_save" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_save((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_save(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_mask_save__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mask_save__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'mask_save'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_getValue__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:mask_getValue x y mask_name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mask_getValue" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mask_getValue" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mask_getValue" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_getValue(arg1,arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_getValue__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:mask_getValue x y ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mask_getValue" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mask_getValue" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_getValue(arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_getValue(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_mask_getValue__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_mask_getValue__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'mask_getValue'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_and__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:mask_and mask1_name mask2_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_and" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mask_and" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::mask_and((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_and__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:mask_and mask1_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_and" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::mask_and((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_and__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":mask_and ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::mask_and();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_and(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_mask_and__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_mask_and__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mask_and__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'mask_and'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_not__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:mask_not mask1_name mask2_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_not" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mask_not" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::mask_not((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_not__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:mask_not mask1_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_not" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::mask_not((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_not__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":mask_not ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::mask_not();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_not(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_mask_not__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_mask_not__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mask_not__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'mask_not'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_or__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:mask_or mask1_name mask2_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_or" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mask_or" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::mask_or((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_or__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:mask_or mask1_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_or" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::mask_or((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_or__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":mask_or ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::mask_or();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_or(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_mask_or__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_mask_or__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mask_or__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'mask_or'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_xor__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:mask_xor mask1_name mask2_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_xor" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mask_xor" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::mask_xor((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_xor__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:mask_xor mask1_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_xor" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::mask_xor((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_xor__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":mask_xor ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::mask_xor();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_xor(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_mask_xor__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_mask_xor__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mask_xor__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'mask_xor'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_to_surf__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:mask_to_surf mask_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_to_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::mask_to_surf((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_to_surf__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":mask_to_surf ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::mask_to_surf();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_to_surf(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_mask_to_surf__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_mask_to_surf__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'mask_to_surf'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_from_surf__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:mask_from_surf surface_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_from_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::mask_from_surf((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_from_surf__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":mask_from_surf ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::mask_from_surf();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_from_surf(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_mask_from_surf__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_mask_from_surf__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'mask_from_surf'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_apply_to_surf__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:mask_apply_to_surf mask_name surface_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_apply_to_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mask_apply_to_surf" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_apply_to_surf((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_apply_to_surf__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:mask_apply_to_surf mask_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_apply_to_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_apply_to_surf((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_apply_to_surf__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":mask_apply_to_surf ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::mask_apply_to_surf();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_apply_to_surf(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_mask_apply_to_surf__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_mask_apply_to_surf__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mask_apply_to_surf__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'mask_apply_to_surf'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_getName__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::strvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:mask_getName mask_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_getName" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::strvec *)surfit::mask_getName((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        char * val = (*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewStringObj(val,-1));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_getName__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::strvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":mask_getName ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::strvec *)surfit::mask_getName();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        char * val = (*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewStringObj(val,-1));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_getName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_mask_getName__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_mask_getName__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'mask_getName'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_getId__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::intvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:mask_getId mask_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_getId" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::intvec *)surfit::mask_getId((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        int val = (int)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewIntObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_getId__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::intvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":mask_getId ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::intvec *)surfit::mask_getId();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        int val = (int)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewIntObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_getId(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_mask_getId__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_mask_getId__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'mask_getId'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_setName__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:mask_setName new_name mask_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_setName" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mask_setName" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::mask_setName((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_setName__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:mask_setName new_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_setName" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::mask_setName((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_setName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_mask_setName__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_mask_setName__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'mask_setName'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_del__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:mask_del mask_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_del" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::mask_del((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_del__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":mask_del ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::mask_del();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_del(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_mask_del__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_mask_del__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'mask_del'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":mask_size ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (int)surfit::mask_size();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast<int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_info__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:mask_info mask_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mask_info" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::mask_info((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_info__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":mask_info ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::mask_info();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_mask_info(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_mask_info__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_mask_info__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'mask_info'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_fault__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:fault curv_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fault" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::fault((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_fault__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":fault ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::fault();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_fault(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_fault__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_fault__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'fault'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:curve value curv_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "curve" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "curve" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curve(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:curve value ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "curve" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curve(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_curve__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_curve__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'curve'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_add__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:curve_add value weight curv_name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "curve_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "curve_add" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "curve_add" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curve_add(arg1,arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_add__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:curve_add value weight ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "curve_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "curve_add" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curve_add(arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_add(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_curve_add__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_curve_add__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'curve_add'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_leq__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:curve_leq value curv_name mult ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "curve_leq" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "curve_leq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "curve_leq" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curve_leq(arg1,(char const *)arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_leq__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:curve_leq value curv_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "curve_leq" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "curve_leq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curve_leq(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_leq__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:curve_leq value ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "curve_leq" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curve_leq(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_leq(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_curve_leq__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_curve_leq__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_curve_leq__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'curve_leq'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_geq__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:curve_geq value curv_name mult ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "curve_geq" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "curve_geq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "curve_geq" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curve_geq(arg1,(char const *)arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_geq__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:curve_geq value curv_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "curve_geq" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "curve_geq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curve_geq(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_geq__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:curve_geq value ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "curve_geq" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curve_geq(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_geq(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_curve_geq__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_curve_geq__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_curve_geq__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'curve_geq'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_surf__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:curve_surf surf_name curv_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curve_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "curve_surf" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curve_surf((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_surf__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:curve_surf surf_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curve_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curve_surf((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_surf__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":curve_surf ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curve_surf();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_surf(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_curve_surf__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_curve_surf__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_curve_surf__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'curve_surf'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_surf_add__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:curve_surf_add surf_name weight curv_name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curve_surf_add" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "curve_surf_add" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "curve_surf_add" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curve_surf_add((char const *)arg1,arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_surf_add__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:curve_surf_add surf_name weight ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curve_surf_add" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "curve_surf_add" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curve_surf_add((char const *)arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_surf_add__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:curve_surf_add surf_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curve_surf_add" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curve_surf_add((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_surf_add__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":curve_surf_add ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curve_surf_add();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_surf_add(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_curve_surf_add__SWIG_3(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_curve_surf_add__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_curve_surf_add__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_curve_surf_add__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'curve_surf_add'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_surf_leq__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:curve_surf_leq surf_name curv_name mult ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curve_surf_leq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "curve_surf_leq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "curve_surf_leq" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curve_surf_leq((char const *)arg1,(char const *)arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_surf_leq__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:curve_surf_leq surf_name curv_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curve_surf_leq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "curve_surf_leq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curve_surf_leq((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_surf_leq__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:curve_surf_leq surf_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curve_surf_leq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curve_surf_leq((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_surf_leq__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":curve_surf_leq ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curve_surf_leq();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_surf_leq(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_curve_surf_leq__SWIG_3(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_curve_surf_leq__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_curve_surf_leq__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_curve_surf_leq__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'curve_surf_leq'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_surf_geq__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:curve_surf_geq surf_name curv_name mult ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curve_surf_geq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "curve_surf_geq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "curve_surf_geq" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curve_surf_geq((char const *)arg1,(char const *)arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_surf_geq__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:curve_surf_geq surf_name curv_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curve_surf_geq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "curve_surf_geq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curve_surf_geq((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_surf_geq__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:curve_surf_geq surf_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curve_surf_geq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curve_surf_geq((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_surf_geq__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":curve_surf_geq ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curve_surf_geq();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curve_surf_geq(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_curve_surf_geq__SWIG_3(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_curve_surf_geq__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_curve_surf_geq__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_curve_surf_geq__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'curve_surf_geq'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:area value area_name inside ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "area" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area((char const *)arg1,(char const *)arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:area value area_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:area value ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":area ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_area__SWIG_3(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_area__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_area__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_area__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'area'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_add__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:area_add value weight area_name inside ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "area_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "area_add" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "area_add" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "area_add" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_add(arg1,arg2,(char const *)arg3,arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_add__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:area_add value weight area_name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "area_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "area_add" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "area_add" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_add(arg1,arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_add__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double arg2 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:area_add value weight ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "area_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "area_add" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_add(arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_add(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_area_add__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_area_add__SWIG_1(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_area_add__SWIG_0(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'area_add'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_leq__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  int arg4 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:area_leq value area_name mult inside ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "area_leq" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_leq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "area_leq" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "area_leq" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_leq(arg1,(char const *)arg2,arg3,arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_leq__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:area_leq value area_name mult ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "area_leq" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_leq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "area_leq" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_leq(arg1,(char const *)arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_leq__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:area_leq value area_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "area_leq" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_leq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_leq(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_leq__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:area_leq value ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "area_leq" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_leq(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_leq(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_area_leq__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_area_leq__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_area_leq__SWIG_1(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_area_leq__SWIG_0(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'area_leq'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_geq__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  int arg4 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:area_geq value area_name mult inside ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "area_geq" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_geq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "area_geq" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "area_geq" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_geq(arg1,(char const *)arg2,arg3,arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_geq__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:area_geq value area_name mult ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "area_geq" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_geq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "area_geq" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_geq(arg1,(char const *)arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_geq__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:area_geq value area_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "area_geq" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_geq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_geq(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_geq__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:area_geq value ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "area_geq" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_geq(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_geq(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_area_geq__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_area_geq__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_area_geq__SWIG_1(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_area_geq__SWIG_0(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'area_geq'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_surf__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:area_surf surf_name area_name inside ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_surf" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "area_surf" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_surf((char const *)arg1,(char const *)arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_surf__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:area_surf surf_name area_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_surf" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_surf((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_surf__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:area_surf surf_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_surf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_surf((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_surf__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":area_surf ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_surf();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_surf(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_area_surf__SWIG_3(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_area_surf__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_area_surf__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_area_surf__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'area_surf'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_surf_add__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:area_surf_add surf_name weight area_name inside ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_surf_add" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "area_surf_add" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "area_surf_add" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "area_surf_add" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_surf_add((char const *)arg1,arg2,(char const *)arg3,arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_surf_add__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  char *arg3 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:area_surf_add surf_name weight area_name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_surf_add" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "area_surf_add" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "area_surf_add" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_surf_add((char const *)arg1,arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_surf_add__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:area_surf_add surf_name weight ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_surf_add" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "area_surf_add" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_surf_add((char const *)arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_surf_add__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:area_surf_add surf_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_surf_add" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_surf_add((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_surf_add__SWIG_4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":area_surf_add ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_surf_add();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_surf_add(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_area_surf_add__SWIG_4(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_area_surf_add__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_area_surf_add__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_area_surf_add__SWIG_1(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_area_surf_add__SWIG_0(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'area_surf_add'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_surf_leq__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  int arg4 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:area_surf_leq surf_name area_name mult inside ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_surf_leq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_surf_leq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "area_surf_leq" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "area_surf_leq" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_surf_leq((char const *)arg1,(char const *)arg2,arg3,arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_surf_leq__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:area_surf_leq surf_name area_name mult ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_surf_leq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_surf_leq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "area_surf_leq" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_surf_leq((char const *)arg1,(char const *)arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_surf_leq__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:area_surf_leq surf_name area_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_surf_leq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_surf_leq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_surf_leq((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_surf_leq__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:area_surf_leq surf_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_surf_leq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_surf_leq((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_surf_leq__SWIG_4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":area_surf_leq ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_surf_leq();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_surf_leq(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_area_surf_leq__SWIG_4(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_area_surf_leq__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_area_surf_leq__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_area_surf_leq__SWIG_1(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_area_surf_leq__SWIG_0(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'area_surf_leq'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_surf_geq__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  int arg4 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:area_surf_geq surf_name area_name mult inside ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_surf_geq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_surf_geq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "area_surf_geq" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "area_surf_geq" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_surf_geq((char const *)arg1,(char const *)arg2,arg3,arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_surf_geq__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:area_surf_geq surf_name area_name mult ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_surf_geq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_surf_geq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "area_surf_geq" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_surf_geq((char const *)arg1,(char const *)arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_surf_geq__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:area_surf_geq surf_name area_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_surf_geq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_surf_geq" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_surf_geq((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_surf_geq__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:area_surf_geq surf_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_surf_geq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_surf_geq((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_surf_geq__SWIG_4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":area_surf_geq ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_surf_geq();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_surf_geq(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_area_surf_geq__SWIG_4(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_area_surf_geq__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_area_surf_geq__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_area_surf_geq__SWIG_1(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_area_surf_geq__SWIG_0(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'area_surf_geq'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_mean__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  int arg4 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:area_mean mean area_name mult inside ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "area_mean" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_mean" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "area_mean" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "area_mean" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_mean(arg1,(char const *)arg2,arg3,arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_mean__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:area_mean mean area_name mult ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "area_mean" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_mean" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "area_mean" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_mean(arg1,(char const *)arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_mean__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:area_mean mean area_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "area_mean" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_mean" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_mean(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_mean__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:area_mean mean ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "area_mean" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_mean(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_mean(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_area_mean__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_area_mean__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_area_mean__SWIG_1(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_area_mean__SWIG_0(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'area_mean'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_wmean__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  int arg5 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:area_wmean mean area_name surf_name mult inside ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "area_wmean" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_wmean" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "area_wmean" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "area_wmean" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "area_wmean" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast<int >(val5);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_wmean(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_wmean__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:area_wmean mean area_name surf_name mult ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "area_wmean" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_wmean" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "area_wmean" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "area_wmean" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_wmean(arg1,(char const *)arg2,(char const *)arg3,arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_wmean__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:area_wmean mean area_name surf_name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "area_wmean" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_wmean" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "area_wmean" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_wmean(arg1,(char const *)arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_wmean__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:area_wmean mean area_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "area_wmean" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_wmean" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_wmean(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_wmean__SWIG_4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:area_wmean mean ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "area_wmean" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_wmean(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_wmean(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_area_wmean__SWIG_4(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_area_wmean__SWIG_3(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_area_wmean__SWIG_2(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_area_wmean__SWIG_1(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_area_wmean__SWIG_0(clientData, interp, objc, argv - 1);
            }
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'area_wmean'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_completer__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooo:area_completer area_name D1 D2 alpha w inside ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_completer" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "area_completer" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "area_completer" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "area_completer" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  ecode5 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "area_completer" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast<double >(val5);
  ecode6 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "area_completer" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast<int >(val6);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_completer((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_completer__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:area_completer area_name D1 D2 alpha w ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_completer" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "area_completer" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "area_completer" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "area_completer" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  ecode5 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "area_completer" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast<double >(val5);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_completer((char const *)arg1,arg2,arg3,arg4,arg5);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_completer__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:area_completer area_name D1 D2 alpha ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_completer" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "area_completer" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "area_completer" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "area_completer" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_completer((char const *)arg1,arg2,arg3,arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_completer__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:area_completer area_name D1 D2 ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_completer" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "area_completer" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "area_completer" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_completer((char const *)arg1,arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_completer__SWIG_4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:area_completer area_name D1 ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_completer" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "area_completer" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_completer((char const *)arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_completer__SWIG_5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:area_completer area_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_completer" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_completer((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_completer__SWIG_6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":area_completer ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_completer();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_completer(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_area_completer__SWIG_6(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_area_completer__SWIG_5(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_area_completer__SWIG_4(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_area_completer__SWIG_3(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_area_completer__SWIG_2(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_area_completer__SWIG_1(clientData, interp, objc, argv - 1);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_area_completer__SWIG_0(clientData, interp, objc, argv - 1);
              }
            }
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'area_completer'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_completer_add__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  int arg7 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooooo:area_completer_add weight area_name D1 D2 alpha w inside ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "area_completer_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_completer_add" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "area_completer_add" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "area_completer_add" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  ecode5 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "area_completer_add" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast<double >(val5);
  ecode6 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "area_completer_add" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast<double >(val6);
  ecode7 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[7], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "area_completer_add" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast<int >(val7);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_completer_add(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_completer_add__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooo:area_completer_add weight area_name D1 D2 alpha w ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "area_completer_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_completer_add" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "area_completer_add" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "area_completer_add" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  ecode5 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "area_completer_add" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast<double >(val5);
  ecode6 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "area_completer_add" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast<double >(val6);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_completer_add(arg1,(char const *)arg2,arg3,arg4,arg5,arg6);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_completer_add__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:area_completer_add weight area_name D1 D2 alpha ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "area_completer_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_completer_add" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "area_completer_add" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "area_completer_add" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  ecode5 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "area_completer_add" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast<double >(val5);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_completer_add(arg1,(char const *)arg2,arg3,arg4,arg5);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_completer_add__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:area_completer_add weight area_name D1 D2 ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "area_completer_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_completer_add" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "area_completer_add" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "area_completer_add" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast<double >(val4);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_completer_add(arg1,(char const *)arg2,arg3,arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_completer_add__SWIG_4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:area_completer_add weight area_name D1 ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "area_completer_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_completer_add" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "area_completer_add" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_completer_add(arg1,(char const *)arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_completer_add__SWIG_5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:area_completer_add weight area_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "area_completer_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_completer_add" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_completer_add(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_completer_add__SWIG_6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:area_completer_add weight ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "area_completer_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_completer_add(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_completer_add__SWIG_7(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":area_completer_add ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_completer_add();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_completer_add(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_area_completer_add__SWIG_7(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_area_completer_add__SWIG_6(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_area_completer_add__SWIG_5(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_area_completer_add__SWIG_4(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_area_completer_add__SWIG_3(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_area_completer_add__SWIG_2(clientData, interp, objc, argv - 1);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_area_completer_add__SWIG_1(clientData, interp, objc, argv - 1);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_area_completer_add__SWIG_0(clientData, interp, objc, argv - 1);
                }
              }
            }
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'area_completer_add'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_hist__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  int arg4 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:area_hist area_name histogram_name mult inside ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_hist" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_hist" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "area_hist" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "area_hist" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_hist((char const *)arg1,(char const *)arg2,arg3,arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_hist__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:area_hist area_name histogram_name mult ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_hist" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_hist" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "area_hist" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast<double >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_hist((char const *)arg1,(char const *)arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_hist__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:area_hist area_name histogram_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_hist" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_hist" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_hist((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_hist__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:area_hist area_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_hist" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_hist((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_hist__SWIG_4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":area_hist ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_hist();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_hist(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_area_hist__SWIG_4(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_area_hist__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_area_hist__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_area_hist__SWIG_1(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_area_hist__SWIG_0(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'area_hist'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_contour__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:contour cntr_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "contour" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::contour((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_contour__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":contour ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::contour();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_contour(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_contour__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_contour__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'contour'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_contour_add__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:contour_add weight cntr_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "contour_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "contour_add" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::contour_add(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_contour_add__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:contour_add weight ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "contour_add" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::contour_add(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_contour_add(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_contour_add__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_contour_add__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'contour_add'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_contour_leq__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:contour_leq cntr_name mult ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "contour_leq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "contour_leq" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::contour_leq((char const *)arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_contour_leq__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:contour_leq cntr_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "contour_leq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::contour_leq((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_contour_leq__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":contour_leq ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::contour_leq();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_contour_leq(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_contour_leq__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_contour_leq__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_contour_leq__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'contour_leq'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_contour_geq__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  double arg2 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:contour_geq cntr_name mult ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "contour_geq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  ecode2 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "contour_geq" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast<double >(val2);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::contour_geq((char const *)arg1,arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_contour_geq__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:contour_geq cntr_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "contour_geq" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::contour_geq((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_contour_geq__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":contour_geq ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::contour_geq();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_contour_geq(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_contour_geq__SWIG_2(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_contour_geq__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_contour_geq__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'contour_geq'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_read__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  int arg6 ;
  int arg7 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooooo:curv_read filename curvname col1 col2 delimiters skip_lines grow_by ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curv_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "curv_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "curv_read" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "curv_read" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  res5 = SWIG_AsCharPtrAndSize(objv[5], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "curv_read" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = buf5;
  ecode6 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "curv_read" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast<int >(val6);
  ecode7 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[7], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "curv_read" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast<int >(val7);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curv_read((char const *)arg1,(char const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_read__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  int arg6 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooo:curv_read filename curvname col1 col2 delimiters skip_lines ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curv_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "curv_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "curv_read" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "curv_read" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  res5 = SWIG_AsCharPtrAndSize(objv[5], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "curv_read" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = buf5;
  ecode6 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "curv_read" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast<int >(val6);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curv_read((char const *)arg1,(char const *)arg2,arg3,arg4,(char const *)arg5,arg6);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_read__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:curv_read filename curvname col1 col2 delimiters ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curv_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "curv_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "curv_read" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "curv_read" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  res5 = SWIG_AsCharPtrAndSize(objv[5], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "curv_read" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = buf5;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curv_read((char const *)arg1,(char const *)arg2,arg3,arg4,(char const *)arg5);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_read__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:curv_read filename curvname col1 col2 ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curv_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "curv_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "curv_read" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "curv_read" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curv_read((char const *)arg1,(char const *)arg2,arg3,arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_read__SWIG_4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:curv_read filename curvname col1 ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curv_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "curv_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "curv_read" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curv_read((char const *)arg1,(char const *)arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_read__SWIG_5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:curv_read filename curvname ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curv_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "curv_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curv_read((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_read__SWIG_6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:curv_read filename ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curv_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curv_read((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_read(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_curv_read__SWIG_6(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_curv_read__SWIG_5(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_curv_read__SWIG_4(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_curv_read__SWIG_3(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_curv_read__SWIG_2(clientData, interp, objc, argv - 1);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_curv_read__SWIG_1(clientData, interp, objc, argv - 1);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_curv_read__SWIG_0(clientData, interp, objc, argv - 1);
                }
              }
            }
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'curv_read'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_load__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:curv_load filename curvname ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curv_load" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "curv_load" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curv_load((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_load__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:curv_load filename ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curv_load" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curv_load((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_load(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_curv_load__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_curv_load__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'curv_load'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_write__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:curv_write filename curv_name delimiter ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curv_write" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "curv_write" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "curv_write" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curv_write((char const *)arg1,(char const *)arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_write__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:curv_write filename curv_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curv_write" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "curv_write" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curv_write((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_write__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:curv_write filename ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curv_write" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curv_write((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_write(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_curv_write__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_curv_write__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_curv_write__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'curv_write'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_save__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:curv_save filename curv_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curv_save" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "curv_save" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curv_save((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_save__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:curv_save filename ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curv_save" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curv_save((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_save(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_curv_save__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_curv_save__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'curv_save'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_getName__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::strvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:curv_getName curv_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curv_getName" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::strvec *)surfit::curv_getName((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        char * val = (*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewStringObj(val,-1));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_getName__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::strvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":curv_getName ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::strvec *)surfit::curv_getName();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        char * val = (*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewStringObj(val,-1));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_getName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_curv_getName__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_curv_getName__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'curv_getName'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_getId__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::intvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:curv_getId curv_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curv_getId" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::intvec *)surfit::curv_getId((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        int val = (int)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewIntObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_getId__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::intvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":curv_getId ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::intvec *)surfit::curv_getId();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        int val = (int)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewIntObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_getId(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_curv_getId__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_curv_getId__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'curv_getId'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_setName__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:curv_setName new_name curv_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curv_setName" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "curv_setName" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curv_setName((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_setName__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:curv_setName new_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curv_setName" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::curv_setName((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_setName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_curv_setName__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_curv_setName__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'curv_setName'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_del__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:curv_del curv_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "curv_del" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::curv_del((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_del__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":curv_del ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::curv_del();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_del(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_curv_del__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_curv_del__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'curv_del'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curv_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":curv_size ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (int)surfit::curv_size();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast<int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_curvs_info(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":curvs_info ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::curvs_info();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_read__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  int arg7 ;
  int arg8 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooooo:cntr_read filename cntrname col1 col2 col3 delimiter skip_lines grow_by ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cntr_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cntr_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cntr_read" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cntr_read" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "cntr_read" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast<int >(val5);
  res6 = SWIG_AsCharPtrAndSize(objv[6], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "cntr_read" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = buf6;
  ecode7 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[7], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "cntr_read" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast<int >(val7);
  ecode8 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[8], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "cntr_read" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast<int >(val8);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::cntr_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_read__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  int arg7 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooooo:cntr_read filename cntrname col1 col2 col3 delimiter skip_lines ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cntr_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cntr_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cntr_read" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cntr_read" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "cntr_read" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast<int >(val5);
  res6 = SWIG_AsCharPtrAndSize(objv[6], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "cntr_read" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = buf6;
  ecode7 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[7], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "cntr_read" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast<int >(val7);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::cntr_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_read__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooo:cntr_read filename cntrname col1 col2 col3 delimiter ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cntr_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cntr_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cntr_read" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cntr_read" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "cntr_read" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast<int >(val5);
  res6 = SWIG_AsCharPtrAndSize(objv[6], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "cntr_read" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = buf6;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::cntr_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,(char const *)arg6);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_read__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:cntr_read filename cntrname col1 col2 col3 ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cntr_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cntr_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cntr_read" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cntr_read" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  ecode5 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "cntr_read" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast<int >(val5);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::cntr_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_read__SWIG_4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:cntr_read filename cntrname col1 col2 ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cntr_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cntr_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cntr_read" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cntr_read" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::cntr_read((char const *)arg1,(char const *)arg2,arg3,arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_read__SWIG_5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:cntr_read filename cntrname col1 ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cntr_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cntr_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cntr_read" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::cntr_read((char const *)arg1,(char const *)arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_read__SWIG_6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:cntr_read filename cntrname ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cntr_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cntr_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::cntr_read((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_read(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_cntr_read__SWIG_6(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_cntr_read__SWIG_5(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_cntr_read__SWIG_4(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_cntr_read__SWIG_3(clientData, interp, objc, argv - 1);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_cntr_read__SWIG_2(clientData, interp, objc, argv - 1);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_cntr_read__SWIG_1(clientData, interp, objc, argv - 1);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_cntr_read__SWIG_0(clientData, interp, objc, argv - 1);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'cntr_read'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_load__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:cntr_load filename cntrname ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cntr_load" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cntr_load" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::cntr_load((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_load__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:cntr_load filename ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cntr_load" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::cntr_load((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_load(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_cntr_load__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_cntr_load__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'cntr_load'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_write__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:cntr_write filename cntr_name delimiter ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cntr_write" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cntr_write" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "cntr_write" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::cntr_write((char const *)arg1,(char const *)arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_write__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:cntr_write filename cntr_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cntr_write" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cntr_write" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::cntr_write((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_write__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:cntr_write filename ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cntr_write" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::cntr_write((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_write(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_cntr_write__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_cntr_write__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_cntr_write__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'cntr_write'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_save__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:cntr_save filename cntr_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cntr_save" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cntr_save" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::cntr_save((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_save__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:cntr_save filename ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cntr_save" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::cntr_save((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_save(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_cntr_save__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_cntr_save__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'cntr_save'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_plus_real__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:cntr_plus_real value cntr_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cntr_plus_real" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cntr_plus_real" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::cntr_plus_real(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_plus_real__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:cntr_plus_real value ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cntr_plus_real" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::cntr_plus_real(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_plus_real(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_cntr_plus_real__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_cntr_plus_real__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'cntr_plus_real'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_minus_real__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:cntr_minus_real value cntr_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cntr_minus_real" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cntr_minus_real" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::cntr_minus_real(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_minus_real__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:cntr_minus_real value ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cntr_minus_real" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::cntr_minus_real(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_minus_real(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_cntr_minus_real__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_cntr_minus_real__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'cntr_minus_real'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_mult_real__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:cntr_mult_real value cntr_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cntr_mult_real" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cntr_mult_real" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::cntr_mult_real(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_mult_real__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:cntr_mult_real value ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cntr_mult_real" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::cntr_mult_real(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_mult_real(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_cntr_mult_real__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_cntr_mult_real__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'cntr_mult_real'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_div_real__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:cntr_div_real value cntr_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cntr_div_real" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cntr_div_real" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::cntr_div_real(arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_div_real__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  surfit::boolvec *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:cntr_div_real value ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cntr_div_real" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast<double >(val1);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::cntr_div_real(arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_div_real(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_cntr_div_real__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_cntr_div_real__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'cntr_div_real'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_to_curv__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:cntr_to_curv cntr_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cntr_to_curv" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::cntr_to_curv((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_to_curv__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":cntr_to_curv ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::cntr_to_curv();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_to_curv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_cntr_to_curv__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_cntr_to_curv__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'cntr_to_curv'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_getName__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::strvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:cntr_getName cntr_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cntr_getName" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::strvec *)surfit::cntr_getName((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        char * val = (*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewStringObj(val,-1));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_getName__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::strvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":cntr_getName ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::strvec *)surfit::cntr_getName();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        char * val = (*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewStringObj(val,-1));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_getName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_cntr_getName__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_cntr_getName__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'cntr_getName'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_getId__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::intvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:cntr_getId cntr_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cntr_getId" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::intvec *)surfit::cntr_getId((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        int val = (int)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewIntObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_getId__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::intvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":cntr_getId ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::intvec *)surfit::cntr_getId();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        int val = (int)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewIntObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_getId(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_cntr_getId__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_cntr_getId__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'cntr_getId'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_setName__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:cntr_setName new_name cntr_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cntr_setName" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cntr_setName" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::cntr_setName((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_setName__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:cntr_setName new_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cntr_setName" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::cntr_setName((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_setName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_cntr_setName__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_cntr_setName__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'cntr_setName'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_del(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:cntr_del cntr_name_or_position ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cntr_del" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::cntr_del((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntr_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":cntr_size ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (int)surfit::cntr_size();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast<int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_cntrs_info(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":cntrs_info ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::cntrs_info();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_read__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  int arg6 ;
  int arg7 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooooo:area_read filename areaname col1 col2 delimiter skip_lines grow_by ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "area_read" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "area_read" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  res5 = SWIG_AsCharPtrAndSize(objv[5], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "area_read" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = buf5;
  ecode6 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "area_read" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast<int >(val6);
  ecode7 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[7], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "area_read" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast<int >(val7);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_read((char const *)arg1,(char const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_read__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  int arg6 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooooo:area_read filename areaname col1 col2 delimiter skip_lines ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "area_read" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "area_read" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  res5 = SWIG_AsCharPtrAndSize(objv[5], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "area_read" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = buf5;
  ecode6 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[6], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "area_read" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast<int >(val6);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_read((char const *)arg1,(char const *)arg2,arg3,arg4,(char const *)arg5,arg6);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_read__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:area_read filename areaname col1 col2 delimiter ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "area_read" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "area_read" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  res5 = SWIG_AsCharPtrAndSize(objv[5], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "area_read" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = buf5;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_read((char const *)arg1,(char const *)arg2,arg3,arg4,(char const *)arg5);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_read__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oooo:area_read filename areaname col1 col2 ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "area_read" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  ecode4 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "area_read" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast<int >(val4);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_read((char const *)arg1,(char const *)arg2,arg3,arg4);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_read__SWIG_4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:area_read filename areaname col1 ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "area_read" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast<int >(val3);
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_read((char const *)arg1,(char const *)arg2,arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_read__SWIG_5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:area_read filename areaname ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_read" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_read((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_read__SWIG_6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:area_read filename ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_read" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_read((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_read(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_area_read__SWIG_6(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_area_read__SWIG_5(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_area_read__SWIG_4(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_area_read__SWIG_3(clientData, interp, objc, argv - 1);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_area_read__SWIG_2(clientData, interp, objc, argv - 1);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_area_read__SWIG_1(clientData, interp, objc, argv - 1);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_area_read__SWIG_0(clientData, interp, objc, argv - 1);
                }
              }
            }
          }
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'area_read'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_load__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:area_load filename areaname ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_load" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_load" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_load((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_load__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:area_load filename ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_load" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_load((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_load(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_area_load__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_area_load__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'area_load'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_write__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:area_write filename area_name delimiter ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_write" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_write" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "area_write" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = buf3;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_write((char const *)arg1,(char const *)arg2,(char const *)arg3);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_write__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:area_write filename area_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_write" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_write" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_write((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_write__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:area_write filename ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_write" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_write((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_write(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_area_write__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_area_write__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_area_write__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'area_write'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_save__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:area_save filename area_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_save" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_save" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_save((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_save__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:area_save filename ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_save" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_save((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_save(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_area_save__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_area_save__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'area_save'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_getName__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::strvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:area_getName area_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_getName" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::strvec *)surfit::area_getName((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        char * val = (*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewStringObj(val,-1));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_getName__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::strvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":area_getName ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::strvec *)surfit::area_getName();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        char * val = (*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewStringObj(val,-1));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_getName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_area_getName__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_area_getName__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'area_getName'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_getId__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::intvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:area_getId area_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_getId" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::intvec *)surfit::area_getId((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        int val = (int)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewIntObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_getId__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::intvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":area_getId ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::intvec *)surfit::area_getId();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        int val = (int)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewIntObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_getId(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_area_getId__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_area_getId__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'area_getId'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_setName__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:area_setName new_name area_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_setName" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "area_setName" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_setName((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_setName__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:area_setName new_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_setName" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_setName((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_setName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_area_setName__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_area_setName__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'area_setName'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_del__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:area_del area_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_del" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::area_del((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_del__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":area_del ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::area_del();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_del(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_area_del__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_area_del__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'area_del'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,":area_size ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (int)surfit::area_size();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast<int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_invert__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  surfit::boolvec *result = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:area_invert area_name ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "area_invert" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_invert((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_invert__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  surfit::boolvec *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":area_invert ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (surfit::boolvec *)surfit::area_invert();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  {
    Tcl_Obj * res_obj = Tcl_NewListObj(0,0);
    Tcl_SetObjResult(interp, res_obj);
    if (result) {
      size_t i;
      for (i = 0; i < (result)->size(); i++)
      {
        bool val = (bool)(*(result))(i);
        Tcl_ListObjAppendElement(interp, res_obj, Tcl_NewBooleanObj(val));
      }
      (result)->release();
    }
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_area_invert(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_area_invert__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_area_invert__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'area_invert'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_areas_info(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":areas_info ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        surfit::areas_info();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_line_check(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,":grid_line_check ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid_line_check();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_line_write__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:grid_line_write filename delimiter ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_line_write" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "grid_line_write" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid_line_write((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_line_write__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:grid_line_write filename ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_line_write" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid_line_write((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_line_write(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_grid_line_write__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_grid_line_write__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'grid_line_write'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_line_save__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:grid_line_save filename grid_linename ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_line_save" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "grid_line_save" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = buf2;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid_line_save((char const *)arg1,(char const *)arg2);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_line_save__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  bool result;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:grid_line_save filename ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "grid_line_save" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = buf1;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid_line_save((char const *)arg1);
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_line_save(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_grid_line_save__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_grid_line_save__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'grid_line_save'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_grid_line_unload(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,":grid_line_unload ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::grid_line_unload();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_trace_grid_line(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,":trace_grid_line ") == TCL_ERROR) SWIG_fail;
  {
    try {
      if (surfit::stop_execution == 0) {
        result = (bool)surfit::trace_grid_line();
        
      }
    }
    catch ( const char * str ) {
      surfit::writelog(LOG_ERROR_TCL,"%s",str);
      return TCL_ERROR;
    }
    catch(...) {
      return TCL_ERROR;
    }
  }
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast<bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}



static swig_command_info swig_commands[] = {
    { SWIG_prefix "init_threads", (swig_wrapper_func) _wrap_init_threads, NULL},
    { SWIG_prefix "get_threads", (swig_wrapper_func) _wrap_get_threads, NULL},
    { SWIG_prefix "clear_data", (swig_wrapper_func) _wrap_clear_data, NULL},
    { SWIG_prefix "mem_info", (swig_wrapper_func) _wrap_mem_info, NULL},
    { SWIG_prefix "types_info", (swig_wrapper_func) _wrap_types_info, NULL},
    { SWIG_prefix "putlog", (swig_wrapper_func) _wrap_putlog, NULL},
    { SWIG_prefix "datafile_mode", (swig_wrapper_func) _wrap_datafile_mode, NULL},
    { SWIG_prefix "datafile_new", (swig_wrapper_func) _wrap_datafile_new, NULL},
    { SWIG_prefix "datafile_append", (swig_wrapper_func) _wrap_datafile_append, NULL},
    { SWIG_prefix "file_load", (swig_wrapper_func) _wrap_file_load, NULL},
    { SWIG_prefix "file_save", (swig_wrapper_func) _wrap_file_save, NULL},
    { SWIG_prefix "file_info", (swig_wrapper_func) _wrap_file_info, NULL},
    { SWIG_prefix "completer", (swig_wrapper_func) _wrap_completer, NULL},
    { SWIG_prefix "completer_add", (swig_wrapper_func) _wrap_completer_add, NULL},
    { SWIG_prefix "value", (swig_wrapper_func) _wrap_value, NULL},
    { SWIG_prefix "value_add", (swig_wrapper_func) _wrap_value_add, NULL},
    { SWIG_prefix "mean", (swig_wrapper_func) _wrap_mean, NULL},
    { SWIG_prefix "wmean", (swig_wrapper_func) _wrap_wmean, NULL},
    { SWIG_prefix "leq", (swig_wrapper_func) _wrap_leq, NULL},
    { SWIG_prefix "geq", (swig_wrapper_func) _wrap_geq, NULL},
    { SWIG_prefix "hist", (swig_wrapper_func) _wrap_hist, NULL},
    { SWIG_prefix "hist_read", (swig_wrapper_func) _wrap_hist_read, NULL},
    { SWIG_prefix "hist_write", (swig_wrapper_func) _wrap_hist_write, NULL},
    { SWIG_prefix "hist_from_surf", (swig_wrapper_func) _wrap_hist_from_surf, NULL},
    { SWIG_prefix "hist_from_pnts", (swig_wrapper_func) _wrap_hist_from_pnts, NULL},
    { SWIG_prefix "hist_getName", (swig_wrapper_func) _wrap_hist_getName, NULL},
    { SWIG_prefix "hist_setName", (swig_wrapper_func) _wrap_hist_setName, NULL},
    { SWIG_prefix "hist_delall", (swig_wrapper_func) _wrap_hist_delall, NULL},
    { SWIG_prefix "hist_del", (swig_wrapper_func) _wrap_hist_del, NULL},
    { SWIG_prefix "hist_size", (swig_wrapper_func) _wrap_hist_size, NULL},
    { SWIG_prefix "hists_info", (swig_wrapper_func) _wrap_hists_info, NULL},
    { SWIG_prefix "surf_histeq", (swig_wrapper_func) _wrap_surf_histeq, NULL},
    { SWIG_prefix "show_w", (swig_wrapper_func) _wrap_show_w, NULL},
    { SWIG_prefix "show_c", (swig_wrapper_func) _wrap_show_c, NULL},
    { SWIG_prefix "log_open", (swig_wrapper_func) _wrap_log_open, NULL},
    { SWIG_prefix "log_clear", (swig_wrapper_func) _wrap_log_clear, NULL},
    { SWIG_prefix "points", (swig_wrapper_func) _wrap_points, NULL},
    { SWIG_prefix "points_add", (swig_wrapper_func) _wrap_points_add, NULL},
    { SWIG_prefix "points_leq", (swig_wrapper_func) _wrap_points_leq, NULL},
    { SWIG_prefix "points_geq", (swig_wrapper_func) _wrap_points_geq, NULL},
    { SWIG_prefix "pnts_load", (swig_wrapper_func) _wrap_pnts_load, NULL},
    { SWIG_prefix "pnts_read", (swig_wrapper_func) _wrap_pnts_read, NULL},
    { SWIG_prefix "pnts_save", (swig_wrapper_func) _wrap_pnts_save, NULL},
    { SWIG_prefix "pnts_write", (swig_wrapper_func) _wrap_pnts_write, NULL},
    { SWIG_prefix "pnts_transform", (swig_wrapper_func) _wrap_pnts_transform, NULL},
    { SWIG_prefix "pnts_inverse_transform", (swig_wrapper_func) _wrap_pnts_inverse_transform, NULL},
    { SWIG_prefix "pnts_rotate", (swig_wrapper_func) _wrap_pnts_rotate, NULL},
    { SWIG_prefix "pnts_filter_by_mask", (swig_wrapper_func) _wrap_pnts_filter_by_mask, NULL},
    { SWIG_prefix "pnts_filter_in_area", (swig_wrapper_func) _wrap_pnts_filter_in_area, NULL},
    { SWIG_prefix "pnts_filter_out_area", (swig_wrapper_func) _wrap_pnts_filter_out_area, NULL},
    { SWIG_prefix "pnts_filter_by_surf", (swig_wrapper_func) _wrap_pnts_filter_by_surf, NULL},
    { SWIG_prefix "pnts_update_by_surf", (swig_wrapper_func) _wrap_pnts_update_by_surf, NULL},
    { SWIG_prefix "pnts_minx", (swig_wrapper_func) _wrap_pnts_minx, NULL},
    { SWIG_prefix "pnts_maxx", (swig_wrapper_func) _wrap_pnts_maxx, NULL},
    { SWIG_prefix "pnts_miny", (swig_wrapper_func) _wrap_pnts_miny, NULL},
    { SWIG_prefix "pnts_maxy", (swig_wrapper_func) _wrap_pnts_maxy, NULL},
    { SWIG_prefix "pnts_minz", (swig_wrapper_func) _wrap_pnts_minz, NULL},
    { SWIG_prefix "pnts_maxz", (swig_wrapper_func) _wrap_pnts_maxz, NULL},
    { SWIG_prefix "pnts_mean", (swig_wrapper_func) _wrap_pnts_mean, NULL},
    { SWIG_prefix "pnts_std", (swig_wrapper_func) _wrap_pnts_std, NULL},
    { SWIG_prefix "pnts_abs", (swig_wrapper_func) _wrap_pnts_abs, NULL},
    { SWIG_prefix "pnts_add_noise", (swig_wrapper_func) _wrap_pnts_add_noise, NULL},
    { SWIG_prefix "pnts_plus", (swig_wrapper_func) _wrap_pnts_plus, NULL},
    { SWIG_prefix "pnts_minus", (swig_wrapper_func) _wrap_pnts_minus, NULL},
    { SWIG_prefix "pnts_mult", (swig_wrapper_func) _wrap_pnts_mult, NULL},
    { SWIG_prefix "pnts_div", (swig_wrapper_func) _wrap_pnts_div, NULL},
    { SWIG_prefix "pnts_set", (swig_wrapper_func) _wrap_pnts_set, NULL},
    { SWIG_prefix "pnts_plus_real", (swig_wrapper_func) _wrap_pnts_plus_real, NULL},
    { SWIG_prefix "pnts_minus_real", (swig_wrapper_func) _wrap_pnts_minus_real, NULL},
    { SWIG_prefix "pnts_mult_real", (swig_wrapper_func) _wrap_pnts_mult_real, NULL},
    { SWIG_prefix "pnts_div_real", (swig_wrapper_func) _wrap_pnts_div_real, NULL},
    { SWIG_prefix "pnts_set_real", (swig_wrapper_func) _wrap_pnts_set_real, NULL},
    { SWIG_prefix "pnts_plus_surf", (swig_wrapper_func) _wrap_pnts_plus_surf, NULL},
    { SWIG_prefix "pnts_minus_surf", (swig_wrapper_func) _wrap_pnts_minus_surf, NULL},
    { SWIG_prefix "pnts_mult_surf", (swig_wrapper_func) _wrap_pnts_mult_surf, NULL},
    { SWIG_prefix "pnts_div_surf", (swig_wrapper_func) _wrap_pnts_div_surf, NULL},
    { SWIG_prefix "pnts_set_surf", (swig_wrapper_func) _wrap_pnts_set_surf, NULL},
    { SWIG_prefix "pnts_concat", (swig_wrapper_func) _wrap_pnts_concat, NULL},
    { SWIG_prefix "pnts_getCount", (swig_wrapper_func) _wrap_pnts_getCount, NULL},
    { SWIG_prefix "pnts_getName", (swig_wrapper_func) _wrap_pnts_getName, NULL},
    { SWIG_prefix "pnts_getId", (swig_wrapper_func) _wrap_pnts_getId, NULL},
    { SWIG_prefix "pnts_setName", (swig_wrapper_func) _wrap_pnts_setName, NULL},
    { SWIG_prefix "pnts_del", (swig_wrapper_func) _wrap_pnts_del, NULL},
    { SWIG_prefix "pnts_size", (swig_wrapper_func) _wrap_pnts_size, NULL},
    { SWIG_prefix "pnts_info", (swig_wrapper_func) _wrap_pnts_info, NULL},
    { SWIG_prefix "grid_save", (swig_wrapper_func) _wrap_grid_save, NULL},
    { SWIG_prefix "grid_load", (swig_wrapper_func) _wrap_grid_load, NULL},
    { SWIG_prefix "grid_unload", (swig_wrapper_func) _wrap_grid_unload, NULL},
    { SWIG_prefix "grid", (swig_wrapper_func) _wrap_grid, NULL},
    { SWIG_prefix "grid2", (swig_wrapper_func) _wrap_grid2, NULL},
    { SWIG_prefix "grid_get", (swig_wrapper_func) _wrap_grid_get, NULL},
    { SWIG_prefix "grid_get2", (swig_wrapper_func) _wrap_grid_get2, NULL},
    { SWIG_prefix "grid_get_for_pnts", (swig_wrapper_func) _wrap_grid_get_for_pnts, NULL},
    { SWIG_prefix "grid_get_for_pnts_step", (swig_wrapper_func) _wrap_grid_get_for_pnts_step, NULL},
    { SWIG_prefix "grid_get_from_surf", (swig_wrapper_func) _wrap_grid_get_from_surf, NULL},
    { SWIG_prefix "grid_check", (swig_wrapper_func) _wrap_grid_check, NULL},
    { SWIG_prefix "grid_info", (swig_wrapper_func) _wrap_grid_info, NULL},
    { SWIG_prefix "grid_getCountX", (swig_wrapper_func) _wrap_grid_getCountX, NULL},
    { SWIG_prefix "grid_setCountX", (swig_wrapper_func) _wrap_grid_setCountX, NULL},
    { SWIG_prefix "grid_getCountY", (swig_wrapper_func) _wrap_grid_getCountY, NULL},
    { SWIG_prefix "grid_setCountY", (swig_wrapper_func) _wrap_grid_setCountY, NULL},
    { SWIG_prefix "grid_getCoordNodeX", (swig_wrapper_func) _wrap_grid_getCoordNodeX, NULL},
    { SWIG_prefix "grid_getCoordNodeY", (swig_wrapper_func) _wrap_grid_getCoordNodeY, NULL},
    { SWIG_prefix "grid_getStepX", (swig_wrapper_func) _wrap_grid_getStepX, NULL},
    { SWIG_prefix "grid_getStepY", (swig_wrapper_func) _wrap_grid_getStepY, NULL},
    { SWIG_prefix "surfit", (swig_wrapper_func) _wrap_surfit, NULL},
    { SWIG_prefix "clear_rules", (swig_wrapper_func) _wrap_clear_rules, NULL},
    { SWIG_prefix "get_solvers_count", (swig_wrapper_func) _wrap_get_solvers_count, NULL},
    { SWIG_prefix "get_solver_long_name", (swig_wrapper_func) _wrap_get_solver_long_name, NULL},
    { SWIG_prefix "get_solver_short_name", (swig_wrapper_func) _wrap_get_solver_short_name, NULL},
    { SWIG_prefix "get_current_solver_short_name", (swig_wrapper_func) _wrap_get_current_solver_short_name, NULL},
    { SWIG_prefix "get_current_solver_long_name", (swig_wrapper_func) _wrap_get_current_solver_long_name, NULL},
    { SWIG_prefix "set_solver", (swig_wrapper_func) _wrap_set_solver, NULL},
    { SWIG_prefix "solvers_info", (swig_wrapper_func) _wrap_solvers_info, NULL},
    { SWIG_prefix "surface", (swig_wrapper_func) _wrap_surface, NULL},
    { SWIG_prefix "surface_add", (swig_wrapper_func) _wrap_surface_add, NULL},
    { SWIG_prefix "surface_leq", (swig_wrapper_func) _wrap_surface_leq, NULL},
    { SWIG_prefix "surface_geq", (swig_wrapper_func) _wrap_surface_geq, NULL},
    { SWIG_prefix "trend", (swig_wrapper_func) _wrap_trend, NULL},
    { SWIG_prefix "trend_add", (swig_wrapper_func) _wrap_trend_add, NULL},
    { SWIG_prefix "mask", (swig_wrapper_func) _wrap_mask, NULL},
    { SWIG_prefix "mask_add", (swig_wrapper_func) _wrap_mask_add, NULL},
    { SWIG_prefix "mask_leq", (swig_wrapper_func) _wrap_mask_leq, NULL},
    { SWIG_prefix "mask_geq", (swig_wrapper_func) _wrap_mask_geq, NULL},
    { SWIG_prefix "mask_surf", (swig_wrapper_func) _wrap_mask_surf, NULL},
    { SWIG_prefix "mask_surf_add", (swig_wrapper_func) _wrap_mask_surf_add, NULL},
    { SWIG_prefix "mask_surf_leq", (swig_wrapper_func) _wrap_mask_surf_leq, NULL},
    { SWIG_prefix "mask_surf_geq", (swig_wrapper_func) _wrap_mask_surf_geq, NULL},
    { SWIG_prefix "mask_mean", (swig_wrapper_func) _wrap_mask_mean, NULL},
    { SWIG_prefix "mask_wmean", (swig_wrapper_func) _wrap_mask_wmean, NULL},
    { SWIG_prefix "mask_completer", (swig_wrapper_func) _wrap_mask_completer, NULL},
    { SWIG_prefix "mask_completer_add", (swig_wrapper_func) _wrap_mask_completer_add, NULL},
    { SWIG_prefix "surf_load", (swig_wrapper_func) _wrap_surf_load, NULL},
    { SWIG_prefix "surf_save", (swig_wrapper_func) _wrap_surf_save, NULL},
    { SWIG_prefix "surf_getValue", (swig_wrapper_func) _wrap_surf_getValue, NULL},
    { SWIG_prefix "surf_getValueIJ", (swig_wrapper_func) _wrap_surf_getValueIJ, NULL},
    { SWIG_prefix "surf_resid", (swig_wrapper_func) _wrap_surf_resid, NULL},
    { SWIG_prefix "surf_D1", (swig_wrapper_func) _wrap_surf_D1, NULL},
    { SWIG_prefix "surf_D2", (swig_wrapper_func) _wrap_surf_D2, NULL},
    { SWIG_prefix "surf_gradient", (swig_wrapper_func) _wrap_surf_gradient, NULL},
    { SWIG_prefix "surf_project", (swig_wrapper_func) _wrap_surf_project, NULL},
    { SWIG_prefix "surf_add_noise", (swig_wrapper_func) _wrap_surf_add_noise, NULL},
    { SWIG_prefix "surf_minz", (swig_wrapper_func) _wrap_surf_minz, NULL},
    { SWIG_prefix "surf_area_minz", (swig_wrapper_func) _wrap_surf_area_minz, NULL},
    { SWIG_prefix "surf_maxz", (swig_wrapper_func) _wrap_surf_maxz, NULL},
    { SWIG_prefix "surf_area_maxz", (swig_wrapper_func) _wrap_surf_area_maxz, NULL},
    { SWIG_prefix "surf_mean", (swig_wrapper_func) _wrap_surf_mean, NULL},
    { SWIG_prefix "surf_area_mean", (swig_wrapper_func) _wrap_surf_area_mean, NULL},
    { SWIG_prefix "surf_mask_mean", (swig_wrapper_func) _wrap_surf_mask_mean, NULL},
    { SWIG_prefix "surf_wmean", (swig_wrapper_func) _wrap_surf_wmean, NULL},
    { SWIG_prefix "surf_area_wmean", (swig_wrapper_func) _wrap_surf_area_wmean, NULL},
    { SWIG_prefix "surf_mask_wmean", (swig_wrapper_func) _wrap_surf_mask_wmean, NULL},
    { SWIG_prefix "surf_std", (swig_wrapper_func) _wrap_surf_std, NULL},
    { SWIG_prefix "surf_sum", (swig_wrapper_func) _wrap_surf_sum, NULL},
    { SWIG_prefix "surf_sum_area", (swig_wrapper_func) _wrap_surf_sum_area, NULL},
    { SWIG_prefix "surf_cells_in_area", (swig_wrapper_func) _wrap_surf_cells_in_area, NULL},
    { SWIG_prefix "surf_plus", (swig_wrapper_func) _wrap_surf_plus, NULL},
    { SWIG_prefix "surf_minus", (swig_wrapper_func) _wrap_surf_minus, NULL},
    { SWIG_prefix "surf_mult", (swig_wrapper_func) _wrap_surf_mult, NULL},
    { SWIG_prefix "surf_div", (swig_wrapper_func) _wrap_surf_div, NULL},
    { SWIG_prefix "surf_set", (swig_wrapper_func) _wrap_surf_set, NULL},
    { SWIG_prefix "surf_plus_area", (swig_wrapper_func) _wrap_surf_plus_area, NULL},
    { SWIG_prefix "surf_minus_area", (swig_wrapper_func) _wrap_surf_minus_area, NULL},
    { SWIG_prefix "surf_mult_area", (swig_wrapper_func) _wrap_surf_mult_area, NULL},
    { SWIG_prefix "surf_div_area", (swig_wrapper_func) _wrap_surf_div_area, NULL},
    { SWIG_prefix "surf_set_area", (swig_wrapper_func) _wrap_surf_set_area, NULL},
    { SWIG_prefix "surf_plus_value", (swig_wrapper_func) _wrap_surf_plus_value, NULL},
    { SWIG_prefix "surf_minus_value", (swig_wrapper_func) _wrap_surf_minus_value, NULL},
    { SWIG_prefix "surf_mult_value", (swig_wrapper_func) _wrap_surf_mult_value, NULL},
    { SWIG_prefix "surf_div_value", (swig_wrapper_func) _wrap_surf_div_value, NULL},
    { SWIG_prefix "surf_set_value", (swig_wrapper_func) _wrap_surf_set_value, NULL},
    { SWIG_prefix "surf_plus_value_area", (swig_wrapper_func) _wrap_surf_plus_value_area, NULL},
    { SWIG_prefix "surf_minus_value_area", (swig_wrapper_func) _wrap_surf_minus_value_area, NULL},
    { SWIG_prefix "surf_mult_value_area", (swig_wrapper_func) _wrap_surf_mult_value_area, NULL},
    { SWIG_prefix "surf_div_value_area", (swig_wrapper_func) _wrap_surf_div_value_area, NULL},
    { SWIG_prefix "surf_set_value_area", (swig_wrapper_func) _wrap_surf_set_value_area, NULL},
    { SWIG_prefix "surf_filter_by_mask", (swig_wrapper_func) _wrap_surf_filter_by_mask, NULL},
    { SWIG_prefix "surf_filter_in_area", (swig_wrapper_func) _wrap_surf_filter_in_area, NULL},
    { SWIG_prefix "surf_filter_out_area", (swig_wrapper_func) _wrap_surf_filter_out_area, NULL},
    { SWIG_prefix "surf_filter_by_surf", (swig_wrapper_func) _wrap_surf_filter_by_surf, NULL},
    { SWIG_prefix "surf_swapxy", (swig_wrapper_func) _wrap_surf_swapxy, NULL},
    { SWIG_prefix "surf_get_details_level", (swig_wrapper_func) _wrap_surf_get_details_level, NULL},
    { SWIG_prefix "surf_decomp", (swig_wrapper_func) _wrap_surf_decomp, NULL},
    { SWIG_prefix "surf_auto_decomp", (swig_wrapper_func) _wrap_surf_auto_decomp, NULL},
    { SWIG_prefix "surf_recons", (swig_wrapper_func) _wrap_surf_recons, NULL},
    { SWIG_prefix "surf_full_recons", (swig_wrapper_func) _wrap_surf_full_recons, NULL},
    { SWIG_prefix "surf_to_pnts", (swig_wrapper_func) _wrap_surf_to_pnts, NULL},
    { SWIG_prefix "surf_to_mask", (swig_wrapper_func) _wrap_surf_to_mask, NULL},
    { SWIG_prefix "surf_getCountX", (swig_wrapper_func) _wrap_surf_getCountX, NULL},
    { SWIG_prefix "surf_getCountY", (swig_wrapper_func) _wrap_surf_getCountY, NULL},
    { SWIG_prefix "surf_getStepX", (swig_wrapper_func) _wrap_surf_getStepX, NULL},
    { SWIG_prefix "surf_getStepY", (swig_wrapper_func) _wrap_surf_getStepY, NULL},
    { SWIG_prefix "surf_undef", (swig_wrapper_func) _wrap_surf_undef, NULL},
    { SWIG_prefix "surf_info", (swig_wrapper_func) _wrap_surf_info, NULL},
    { SWIG_prefix "surf_getName", (swig_wrapper_func) _wrap_surf_getName, NULL},
    { SWIG_prefix "surf_getId", (swig_wrapper_func) _wrap_surf_getId, NULL},
    { SWIG_prefix "surf_setName", (swig_wrapper_func) _wrap_surf_setName, NULL},
    { SWIG_prefix "surf_del", (swig_wrapper_func) _wrap_surf_del, NULL},
    { SWIG_prefix "surf_size", (swig_wrapper_func) _wrap_surf_size, NULL},
    { SWIG_prefix "surfs_info", (swig_wrapper_func) _wrap_surfs_info, NULL},
    { SWIG_prefix "surf_trace_cntr", (swig_wrapper_func) _wrap_surf_trace_cntr, NULL},
    { SWIG_prefix "mask_load", (swig_wrapper_func) _wrap_mask_load, NULL},
    { SWIG_prefix "mask_save", (swig_wrapper_func) _wrap_mask_save, NULL},
    { SWIG_prefix "mask_getValue", (swig_wrapper_func) _wrap_mask_getValue, NULL},
    { SWIG_prefix "mask_and", (swig_wrapper_func) _wrap_mask_and, NULL},
    { SWIG_prefix "mask_not", (swig_wrapper_func) _wrap_mask_not, NULL},
    { SWIG_prefix "mask_or", (swig_wrapper_func) _wrap_mask_or, NULL},
    { SWIG_prefix "mask_xor", (swig_wrapper_func) _wrap_mask_xor, NULL},
    { SWIG_prefix "mask_to_surf", (swig_wrapper_func) _wrap_mask_to_surf, NULL},
    { SWIG_prefix "mask_from_surf", (swig_wrapper_func) _wrap_mask_from_surf, NULL},
    { SWIG_prefix "mask_apply_to_surf", (swig_wrapper_func) _wrap_mask_apply_to_surf, NULL},
    { SWIG_prefix "mask_getName", (swig_wrapper_func) _wrap_mask_getName, NULL},
    { SWIG_prefix "mask_getId", (swig_wrapper_func) _wrap_mask_getId, NULL},
    { SWIG_prefix "mask_setName", (swig_wrapper_func) _wrap_mask_setName, NULL},
    { SWIG_prefix "mask_del", (swig_wrapper_func) _wrap_mask_del, NULL},
    { SWIG_prefix "mask_size", (swig_wrapper_func) _wrap_mask_size, NULL},
    { SWIG_prefix "mask_info", (swig_wrapper_func) _wrap_mask_info, NULL},
    { SWIG_prefix "fault", (swig_wrapper_func) _wrap_fault, NULL},
    { SWIG_prefix "curve", (swig_wrapper_func) _wrap_curve, NULL},
    { SWIG_prefix "curve_add", (swig_wrapper_func) _wrap_curve_add, NULL},
    { SWIG_prefix "curve_leq", (swig_wrapper_func) _wrap_curve_leq, NULL},
    { SWIG_prefix "curve_geq", (swig_wrapper_func) _wrap_curve_geq, NULL},
    { SWIG_prefix "curve_surf", (swig_wrapper_func) _wrap_curve_surf, NULL},
    { SWIG_prefix "curve_surf_add", (swig_wrapper_func) _wrap_curve_surf_add, NULL},
    { SWIG_prefix "curve_surf_leq", (swig_wrapper_func) _wrap_curve_surf_leq, NULL},
    { SWIG_prefix "curve_surf_geq", (swig_wrapper_func) _wrap_curve_surf_geq, NULL},
    { SWIG_prefix "area", (swig_wrapper_func) _wrap_area, NULL},
    { SWIG_prefix "area_add", (swig_wrapper_func) _wrap_area_add, NULL},
    { SWIG_prefix "area_leq", (swig_wrapper_func) _wrap_area_leq, NULL},
    { SWIG_prefix "area_geq", (swig_wrapper_func) _wrap_area_geq, NULL},
    { SWIG_prefix "area_surf", (swig_wrapper_func) _wrap_area_surf, NULL},
    { SWIG_prefix "area_surf_add", (swig_wrapper_func) _wrap_area_surf_add, NULL},
    { SWIG_prefix "area_surf_leq", (swig_wrapper_func) _wrap_area_surf_leq, NULL},
    { SWIG_prefix "area_surf_geq", (swig_wrapper_func) _wrap_area_surf_geq, NULL},
    { SWIG_prefix "area_mean", (swig_wrapper_func) _wrap_area_mean, NULL},
    { SWIG_prefix "area_wmean", (swig_wrapper_func) _wrap_area_wmean, NULL},
    { SWIG_prefix "area_completer", (swig_wrapper_func) _wrap_area_completer, NULL},
    { SWIG_prefix "area_completer_add", (swig_wrapper_func) _wrap_area_completer_add, NULL},
    { SWIG_prefix "area_hist", (swig_wrapper_func) _wrap_area_hist, NULL},
    { SWIG_prefix "contour", (swig_wrapper_func) _wrap_contour, NULL},
    { SWIG_prefix "contour_add", (swig_wrapper_func) _wrap_contour_add, NULL},
    { SWIG_prefix "contour_leq", (swig_wrapper_func) _wrap_contour_leq, NULL},
    { SWIG_prefix "contour_geq", (swig_wrapper_func) _wrap_contour_geq, NULL},
    { SWIG_prefix "curv_read", (swig_wrapper_func) _wrap_curv_read, NULL},
    { SWIG_prefix "curv_load", (swig_wrapper_func) _wrap_curv_load, NULL},
    { SWIG_prefix "curv_write", (swig_wrapper_func) _wrap_curv_write, NULL},
    { SWIG_prefix "curv_save", (swig_wrapper_func) _wrap_curv_save, NULL},
    { SWIG_prefix "curv_getName", (swig_wrapper_func) _wrap_curv_getName, NULL},
    { SWIG_prefix "curv_getId", (swig_wrapper_func) _wrap_curv_getId, NULL},
    { SWIG_prefix "curv_setName", (swig_wrapper_func) _wrap_curv_setName, NULL},
    { SWIG_prefix "curv_del", (swig_wrapper_func) _wrap_curv_del, NULL},
    { SWIG_prefix "curv_size", (swig_wrapper_func) _wrap_curv_size, NULL},
    { SWIG_prefix "curvs_info", (swig_wrapper_func) _wrap_curvs_info, NULL},
    { SWIG_prefix "cntr_read", (swig_wrapper_func) _wrap_cntr_read, NULL},
    { SWIG_prefix "cntr_load", (swig_wrapper_func) _wrap_cntr_load, NULL},
    { SWIG_prefix "cntr_write", (swig_wrapper_func) _wrap_cntr_write, NULL},
    { SWIG_prefix "cntr_save", (swig_wrapper_func) _wrap_cntr_save, NULL},
    { SWIG_prefix "cntr_plus_real", (swig_wrapper_func) _wrap_cntr_plus_real, NULL},
    { SWIG_prefix "cntr_minus_real", (swig_wrapper_func) _wrap_cntr_minus_real, NULL},
    { SWIG_prefix "cntr_mult_real", (swig_wrapper_func) _wrap_cntr_mult_real, NULL},
    { SWIG_prefix "cntr_div_real", (swig_wrapper_func) _wrap_cntr_div_real, NULL},
    { SWIG_prefix "cntr_to_curv", (swig_wrapper_func) _wrap_cntr_to_curv, NULL},
    { SWIG_prefix "cntr_getName", (swig_wrapper_func) _wrap_cntr_getName, NULL},
    { SWIG_prefix "cntr_getId", (swig_wrapper_func) _wrap_cntr_getId, NULL},
    { SWIG_prefix "cntr_setName", (swig_wrapper_func) _wrap_cntr_setName, NULL},
    { SWIG_prefix "cntr_del", (swig_wrapper_func) _wrap_cntr_del, NULL},
    { SWIG_prefix "cntr_size", (swig_wrapper_func) _wrap_cntr_size, NULL},
    { SWIG_prefix "cntrs_info", (swig_wrapper_func) _wrap_cntrs_info, NULL},
    { SWIG_prefix "area_read", (swig_wrapper_func) _wrap_area_read, NULL},
    { SWIG_prefix "area_load", (swig_wrapper_func) _wrap_area_load, NULL},
    { SWIG_prefix "area_write", (swig_wrapper_func) _wrap_area_write, NULL},
    { SWIG_prefix "area_save", (swig_wrapper_func) _wrap_area_save, NULL},
    { SWIG_prefix "area_getName", (swig_wrapper_func) _wrap_area_getName, NULL},
    { SWIG_prefix "area_getId", (swig_wrapper_func) _wrap_area_getId, NULL},
    { SWIG_prefix "area_setName", (swig_wrapper_func) _wrap_area_setName, NULL},
    { SWIG_prefix "area_del", (swig_wrapper_func) _wrap_area_del, NULL},
    { SWIG_prefix "area_size", (swig_wrapper_func) _wrap_area_size, NULL},
    { SWIG_prefix "area_invert", (swig_wrapper_func) _wrap_area_invert, NULL},
    { SWIG_prefix "areas_info", (swig_wrapper_func) _wrap_areas_info, NULL},
    { SWIG_prefix "grid_line_check", (swig_wrapper_func) _wrap_grid_line_check, NULL},
    { SWIG_prefix "grid_line_write", (swig_wrapper_func) _wrap_grid_line_write, NULL},
    { SWIG_prefix "grid_line_save", (swig_wrapper_func) _wrap_grid_line_save, NULL},
    { SWIG_prefix "grid_line_unload", (swig_wrapper_func) _wrap_grid_line_unload, NULL},
    { SWIG_prefix "trace_grid_line", (swig_wrapper_func) _wrap_trace_grid_line, NULL},
    {0, 0, 0}
};

static swig_var_info swig_variables[] = {
    { SWIG_prefix "stop_execution", 0, (swig_variable_func) stop_execution_get,(swig_variable_func) stop_execution_set},
    { SWIG_prefix "tol", 0, (swig_variable_func) tol_get,(swig_variable_func) tol_set},
    { SWIG_prefix "undef_value", 0, (swig_variable_func) undef_value_get,(swig_variable_func) undef_value_set},
    { SWIG_prefix "sor_omega", 0, (swig_variable_func) sor_omega_get,(swig_variable_func) sor_omega_set},
    { SWIG_prefix "ssor_omega", 0, (swig_variable_func) ssor_omega_get,(swig_variable_func) ssor_omega_set},
    { SWIG_prefix "map_name", 0, (swig_variable_func) map_name_get,(swig_variable_func) map_name_set},
    { SWIG_prefix "reproject_faults", 0, (swig_variable_func) reproject_faults_get,(swig_variable_func) reproject_faults_set},
    { SWIG_prefix "reproject_undef_areas", 0, (swig_variable_func) reproject_undef_areas_get,(swig_variable_func) reproject_undef_areas_set},
    { SWIG_prefix "process_isolated_areas", 0, (swig_variable_func) process_isolated_areas_get,(swig_variable_func) process_isolated_areas_set},
    { SWIG_prefix "penalty_max_iter", 0, (swig_variable_func) penalty_max_iter_get,(swig_variable_func) penalty_max_iter_set},
    { SWIG_prefix "penalty_weight", 0, (swig_variable_func) penalty_weight_get,(swig_variable_func) penalty_weight_set},
    { SWIG_prefix "penalty_weight_mult", 0, (swig_variable_func) penalty_weight_mult_get,(swig_variable_func) penalty_weight_mult_set},
    { SWIG_prefix "basis_cnt", 0, (swig_variable_func) basis_cnt_get,(swig_variable_func) basis_cnt_set},
    {0,0,0,0}
};

static swig_const_info swig_constants[] = {
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_char,
};

static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_char,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

#ifdef __cplusplus
}
#endif
/*************************************************************************
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.

 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.

 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
**/

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head;
  static int init_run = 0;
  
  clientdata = clientdata;
  
  if (init_run) return;
  init_run = 1;
  
  /* Initialize the swig_module */
  swig_module.type_initial = swig_type_initial;
  swig_module.cast_initial = swig_cast_initial;
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (module_head) {
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  } else {
    /* This is the first module loaded */
    swig_module.next = &swig_module;
    SWIG_SetModule(clientdata, &swig_module);
  }
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  
  SWIGINTERN void
  SWIG_Tcl_InstallConstants(Tcl_Interp *interp, swig_const_info constants[]) {
    int i;
    Tcl_Obj *obj;
    
    if (!swigconstTableinit) {
      Tcl_InitHashTable(&swigconstTable, TCL_STRING_KEYS);
      swigconstTableinit = 1;
    }
    for (i = 0; constants[i].type; i++) {
      switch(constants[i].type) {
      case SWIG_TCL_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_TCL_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        SWIG_Tcl_SetConstantObj(interp, constants[i].name, obj);
      }
    }
  }
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

SWIGEXPORT int SWIG_init(Tcl_Interp *interp) {
  int i;
  if (interp == 0) return TCL_ERROR;
#ifdef USE_TCL_STUBS
  if (Tcl_InitStubs(interp, (char*)"8.1", 0) == NULL) {
    return TCL_ERROR;
  }
#endif  
  Tcl_PkgProvide(interp, (char*)SWIG_name, (char*)SWIG_version);
  
#ifdef SWIG_namespace
  Tcl_Eval(interp, "namespace eval " SWIG_namespace " { }");
#endif
  
  SWIG_InitializeModule((void *) interp);
  SWIG_PropagateClientData();
  
  for (i = 0; swig_commands[i].name; i++) {
    Tcl_CreateObjCommand(interp, (char *) swig_commands[i].name, (swig_wrapper_func) swig_commands[i].wrapper,
      swig_commands[i].clientdata, NULL);
  }
  for (i = 0; swig_variables[i].name; i++) {
    Tcl_SetVar(interp, (char *) swig_variables[i].name, (char *) "", TCL_GLOBAL_ONLY);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_READS | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].get, (ClientData) swig_variables[i].addr);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_WRITES | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].set, (ClientData) swig_variables[i].addr);
  }
  
  SWIG_Tcl_InstallConstants(interp, swig_constants);
  
  
  
  surfit::surfit_init_variables(interp);
  
  SWIG_Tcl_SetConstantObj(interp, "REAL_NAME", SWIG_FromCharPtr("double"));
  return TCL_OK;
}
SWIGEXPORT int Surfit_SafeInit(Tcl_Interp *interp) {
  return SWIG_init(interp);
}

