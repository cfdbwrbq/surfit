# Process this file with autoconf to produce a configure script.
AC_INIT(surfit/src/surfit_wrap.cxx)
AM_INIT_AUTOMAKE(surfit,1.0.0pre)

# test for c++ features
AC_PROG_CXX
# check for stdc headers
AC_HEADER_STDC

AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL
AC_SUBST(LIBTOOL_DEPS)

# check for stl library
AC_CHECK_LIB(stdc++, main, [LIBS_SURFIT="-llibstdc++ $LIBS_SURFIT"], AC_MSG_ERROR(surfit requires libstdc++))

AH_TEMPLATE([HAVE_FLTKLIB],
            [Define if you have fltk libraries])
#AC_DEFINE_UNQUOTED(HAVE_FLTKLIB)

AH_TEMPLATE([HAVE_GL_WORKS],
            [Define if you have OpenGL libraries])
#AC_DEFINE_UNQUOTED(HAVE_GL_WORKS)

# Get the operating system and version number...
uname=`uname`
uversion=`uname -r | sed -e '1,$s/[[^0-9]]//g'`
if test "x$uname" = x; then
    # MingW doesn't provide any output when uname is run, even with "-s"...
    uname="CYGWIN"
fi


AC_ARG_ENABLE(freeflow, [  --enable-freeflow       turn on freeflow compilation [default=yes]])
AC_ARG_ENABLE(globe,    [  --enable-globe          turn on globe compilation [default=yes]])
AC_ARG_ENABLE(bula,     [  --enable-bula           turn on bula compilation [default=yes]])
AC_ARG_ENABLE(funner,   [  --enable-funner         turn on funner compilation [default=yes]])


if test x$enable_freeflow != xno; then
   BUILD_FREEFLOW="YES"
else
   BUILD_FREEFLOW=""
fi

if test x$enable_globe != xno; then
   BUILD_GLOBE="YES"
else
   BUILD_GLOBE=""
fi

if test x$enable_funner != xno; then
   BUILD_FUNNER="YES"
else
   BUILD_FUNNER=""
fi

if test x$enable_bula != xno; then
   BUILD_BULA="YES"
else
   BUILD_BULA=""
fi


#--------------------------------------------------------------------
#	Try to locate the Tcl package
#--------------------------------------------------------------------

TCLINCLUDE=
TCLLIB=
TCLPACKAGE=

AC_ARG_WITH(tclconfig,[  --with-tclconfig=path  Set location of tclConfig.sh],
        with_tclconfig="$withval")
AC_ARG_WITH(tcl,[  --with-tcl=path         Set location of Tcl package],[
	TCLPACKAGE="$withval"], [TCLPACKAGE=])
AC_ARG_WITH(tclincl,[  --with-tclincl=path     Set location of Tcl include directory],[
	TCLINCLUDE="-I$withval"], [TCLINCLUDE=])
AC_ARG_WITH(tcllib,[  --with-tcllib=path      Set location of Tcl library directory],[
	TCLLIB="-L$withval"], [TCLLIB=])

AC_MSG_CHECKING([for Tcl configuration])
# First check to see if --with-tclconfig was specified.
if test x"${with_tclconfig}" != x ; then
   if test -f "${with_tclconfig}/tclConfig.sh" ; then
      TCLCONFIG=`(cd ${with_tclconfig}; pwd)`
   else
      AC_MSG_ERROR([${with_tcl} directory doesn't contain tclConfig.sh])
   fi
fi
# check in a few common install locations
if test x"${TCLCONFIG}" = x ; then
    for i in `ls -d ${prefix}/lib 2>/dev/null` \
             `ls -d /usr/lib 2>/dev/null` \
	     `ls -d /usr/local/lib 2>/dev/null` ; do
	if test -f "$i/tclConfig.sh" ; then
	    TCLCONFIG=`(cd $i; pwd)`
	    break
	fi
    done
fi
if test x"${TCLCONFIG}" = x ; then
    AC_MSG_RESULT(no)
else
    AC_MSG_RESULT(found $TCLCONFIG/tclConfig.sh)
    . $TCLCONFIG/tclConfig.sh
    TCLINCLUDE=-I$TCL_PREFIX/include
    TCLLIB=$TCL_LIB_SPEC
fi

if test -z "$TCLINCLUDE"; then
   if test -n "$TCLPACKAGE"; then
	TCLINCLUDE="-I$TCLPACKAGE/include"
   fi
fi

if test -z "$TCLLIB"; then
   if test -n "$TCLPACKAGE"; then
	TCLLIB="-L$TCLPACKAGE/lib -ltcl"
   fi
fi

AC_MSG_CHECKING(for Tcl header files)
if test -z "$TCLINCLUDE"; then
AC_TRY_CPP([#include <tcl.h>], , TCLINCLUDE="")
if test -z "$TCLINCLUDE"; then
	dirs="$prefix/include /usr/local/include /usr/local/include/tcl8.0 /usr/include /opt/local/include"
	for i in $dirs ; do
		if test -r $i/tcl.h; then
			AC_MSG_RESULT($i)
			TCLINCLUDE="-I$i"
			break
		fi
	done
fi
if test -z "$TCLINCLUDE"; then
#	TCLINCLUDE="-I/usr/local/include"
    	AC_MSG_RESULT(not found)
fi
else
        AC_MSG_RESULT($TCLINCLUDE)
fi

AC_MSG_CHECKING(for Tcl library)
if test -z "$TCLLIB"; then
dirs="$prefix/lib /usr/local/lib /usr/lib /opt/local/lib"
for i in $dirs ; do
	if test -r $i/libtcl.a; then
	    AC_MSG_RESULT($i)
	    TCLLIB="-L$i -ltcl"
	    break
	fi
done
if test -z "$TCLLIB"; then
	AC_MSG_RESULT(not found)
#	TCLLIB="-L/usr/local/lib"
fi
else
AC_MSG_RESULT($TCLLIB)
fi

AC_SUBST(TCLINCLUDE)
AC_SUBST(TCLLIB)

#--------------------------------------------------------------------
#	Try to locate the FLTK package
#--------------------------------------------------------------------

FLTK_INCLUDE=
FLTK_LIB=

AC_ARG_WITH(fltk_incl,[  --with-fltk_incl=path     Set location of fltk include directory],[
	FLTK_INCLUDE="-I$withval"], [FLTK_INCLUDE=])
AC_ARG_WITH(fltk_lib,[  --with-fltk_lib=path      Set location of fltk library directory],[
	FLTK_LIB="-L$withval"], [FLTK_LIB=])

AC_MSG_CHECKING(for fltk header files)
if test -z "$FLTK_INCLUDE"; then
AC_TRY_CPP([#include <FL/Fl.H>], , FLTK_INCLUDE="")
if test -z "$FLTK_INCLUDE"; then
	dirs="$prefix/include /usr/local/include /usr/include /opt/local/include"
	for i in $dirs ; do
		if test -r $i/Fl/Fl.H; then
			AC_MSG_RESULT($i)
			FLTK_INCLUDE="-I$i"
			break
		fi
	done
fi
if test -z "$FLTK_INCLUDE"; then
	FLTK_INCLUDE="-I/usr/local/include"
    	AC_MSG_RESULT(not found)
fi
else
        AC_MSG_RESULT($FLTK_INCLUDE)
fi

AC_MSG_CHECKING(for fltk library)
if test -z "$FLTK_LIB"; then
dirs="$prefix/lib /usr/local/lib /usr/lib /opt/local/lib"
for i in $dirs ; do
	if test -r $i/libfltk.a; then
	    AC_MSG_RESULT($i)
	    FLTK_LIB="-L$i -lfltk "
	    AC_DEFINE(HAVE_FLTKLIB)
	    break
	fi
done

if test -z "$FLTK_LIB"; then
	AC_MSG_RESULT(not found)
	FLTK_LIB="-L/usr/local/lib"
        BUILD_BULA=""
        BUILD_FUNNER=""
fi
else
AC_MSG_RESULT($FLTK_LIB)
fi

AC_MSG_CHECKING(for fltk_gl library)
if test -z "$FLTK_GL_LIB"; then
dirs="$prefix/lib /usr/local/lib /usr/lib /opt/local/lib"
for i in $dirs ; do
	if test -r $i/libfltk_gl.a; then
	    AC_MSG_RESULT($i)
	    FLTK_GL_LIB="-L$i -lfltk_gl "
	    break
	fi
done

if test -z "$FLTK_GL_LIB"; then
	AC_MSG_RESULT(not found)
	FLTK_GL_LIB="-L/usr/local/lib"
        BUILD_BULA=""
        BUILD_FUNNER=""
fi
else
AC_MSG_RESULT($FLTK_GL_LIB)
fi


AC_SUBST(FLTK_INCLUDE)
AC_SUBST(FLTK_LIB)
AC_SUBST(FLTK_GL_LIB)
                  
case $uname in
    CYGWIN* | MINGW*)
	dnl Cygwin environment...
	CFLAGS="-mwindows -DWIN32 $CFLAGS"
	CXXFLAGS="-mwindows -DWIN32 $CXXFLAGS"
	LDFLAGS="-mwindows $LDFLAGS"
	LIBS="$LIBS -lole32 -lwsock32 -lcomctl32"

	GLLIB=""

	AC_CHECK_HEADER(GL/gl.h,GLLIB="-lopengl32")
	AC_CHECK_HEADER(GL/glu.h,GLLIB="-lglu32 $GLLIB")
	
	;;

    Darwin*)
        # MacOS X uses Carbon for graphics...
        LIBS="$LIBS -framework Carbon -framework ApplicationServices"

        GLLIB="-framework AGL -framework OpenGL"

	;;

    *)
	# All others are UNIX/X11...

	dnl Check for X11...
	AC_PATH_XTRA

	if test x$no_x = xyes; then
	    AC_MSG_WARN(Configure could not find required X11 libraries.)
	    GLLIB=""
	else 

   	    LIBS="$LIBS -lXext -lX11 $X_EXTRA_LIBS"
	    CFLAGS="$CFLAGS$X_CFLAGS"
	    CXXFLAGS="$CXXFLAGS$X_CFLAGS"
	    LDFLAGS="$X_LIBS $LDFLAGS"

	    # Check for OpenGL unless disabled...
	    GLLIB=""


	        AC_SEARCH_LIBS(dlopen, dl)
	        AC_CHECK_HEADER(GL/gl.h,
		    AC_CHECK_LIB(GL, glXMakeCurrent, GLLIB="-lGL", \
		        AC_CHECK_LIB(MesaGL,glXMakeCurrent, GLLIB=" -lMesaGL",,\
			    -lm), \
		        -lm)
	        )
	        AC_CHECK_HEADER(GL/glu.h,
		    if test x$ac_cv_lib_GL_glXMakeCurrent = xyes; then
		        GLLIB="-lGLU $GLLIB"
		    fi
		    if test x$ac_cv_lib_MesaGL_glXMakeCurrent = xyes; then
		        GLLIB="-lMesaGLU $GLLIB"
		    fi
	        )

	fi

	;;
esac

if test -z "$GLLIB"; then
   AC_MSG_WARN(surfit was configured without OpenGL support!)
   BUILD_BULA=""
   BUILD_FUNNER=""
else
   AC_DEFINE(HAVE_GL_WORKS)
fi

                
AC_SUBST(GLLIB)

AC_CONFIG_HEADER(config.h:config.h.in)

AM_CONDITIONAL(MAKE_FREEFLOW,  [test "x$BUILD_FREEFLOW" != "x"])
AM_CONDITIONAL(MAKE_GLOBE,     [test "x$BUILD_GLOBE" != "x"])
AM_CONDITIONAL(MAKE_BULA,      [test "x$BUILD_BULA" != "x"])
AM_CONDITIONAL(MAKE_FUNNER,    [test "x$BUILD_FUNNER" != "x"])


AC_OUTPUT([Makefile])
