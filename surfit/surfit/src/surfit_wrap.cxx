/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.13u-20020617-2210
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    inline SwigValueWrapper() : tt(0) { }
    inline ~SwigValueWrapper() { if (tt) delete tt; } 
    inline SwigValueWrapper& operator=(const T& t) { tt = new T(t); return *this; }
    inline operator T&() const { return *tt; }
    inline T *operator&() { return tt; }
};                                                    
#endif

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__)
#       if defined(_MSC_VER)
#               if defined(STATIC_LINKED)
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) extern a
#               else
#                       define SWIGEXPORT(a) __declspec(dllexport) a
#                       define SWIGIMPORT(a) extern a
#               endif
#       else
#               if defined(__BORLANDC__)
#                       define SWIGEXPORT(a) a _export
#                       define SWIGIMPORT(a) a _export
#               else
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) a
#               endif
#       endif
#else
#       define SWIGEXPORT(a) a
#       define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;                 
  swig_converter_func     converter;
  const char             *str;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
  void                   *clientdata;	
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);

#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti)
{
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
 l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty)
{
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  while (s) {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
	s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      return s;
    }
    s = s->next;
  }
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) 
{
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) 
{
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
     ty = (*ty->dcast)(ptr);
     if (ty) lastty = ty;
  }
  return lastty;
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = swig_type_list;
      while (tc) {
	if ((strcmp(tc->name, equiv->name) == 0))
	  SWIG_TypeClientData(tc,clientdata);
	tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}
#endif

#ifdef __cplusplus
}

#endif

/*
 * $Header$
 * 
 * swigtcl8.swg
 */

#include <tcl.h>
#include <stdlib.h>
#include <stdarg.h>
#include <ctype.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Constant table */

#define SWIG_TCL_INT     1
#define SWIG_TCL_FLOAT   2
#define SWIG_TCL_STRING  3
#define SWIG_TCL_POINTER 4
#define SWIG_TCL_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

typedef int   (*swig_wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef int   (*swig_wrapper_func)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef char *(*swig_variable_func)(ClientData, Tcl_Interp *, char *, char *, int);
typedef void  (*swig_delete_func)(ClientData);

typedef struct swig_method { 
  const char     *name;
  swig_wrapper   method;
} swig_method;

typedef struct swig_attribute {
  const char     *name;
  swig_wrapper   getmethod;
  swig_wrapper   setmethod;
} swig_attribute;
  
typedef struct swig_class {
  const char         *name;
  swig_type_info   **type;
  swig_wrapper       constructor;
  void              (*destructor)(void *);
  swig_method        *methods;
  swig_attribute     *attributes;
  struct swig_class **bases;
} swig_class;

typedef struct swig_instance {
  Tcl_Obj       *thisptr;
  void          *thisvalue;
  swig_class   *classptr;
  int            destroy;
  Tcl_Command    cmdtok;
} swig_instance;

#ifdef SWIG_NOINCLUDE
SWIGEXPORT(char *)    SWIG_PackData(char *c, void *ptr, int sz);
SWIGEXPORT(char *)    SWIG_UnpackData(char *c, void *ptr, int sz);
SWIGEXPORT(int)       SWIG_ConvertPtrFromString(Tcl_Interp *, char *, void **, swig_type_info *,int flags);
SWIGEXPORT(int)       SWIG_ConvertPtr(Tcl_Interp *, Tcl_Obj *, void **, swig_type_info *, int flags);
SWIGEXPORT(int)       SWIG_ConvertPacked(Tcl_Interp *, Tcl_Obj *, void *, int sz, swig_type_info *, int flags);
SWIGEXPORT(void)      SWIG_MakePtr(char *, void *, swig_type_info *, int flags);
SWIGEXPORT(Tcl_Obj *) SWIG_NewPointerObj(void *, swig_type_info *, int flags);
SWIGEXPORT(Tcl_Obj *) SWIG_NewPackedObj(void *, int sz, swig_type_info *, int flags);
SWIGEXPORT(int)       SWIG_GetArgs(Tcl_Interp *, int, Tcl_Obj *CONST [], const char *, ...);
SWIGEXPORT(char *)    SWIG_PointerTypeFromString(char *c);
SWIGEXPORT(void)      SWIG_Acquire(void *ptr);
SWIGEXPORT(int)       SWIG_Disown(void *ptr);
SWIGEXPORT(void)      SWIG_InstallConstants(Tcl_Interp *interp, struct swig_const_info constants[]);
SWIGEXPORT(Tcl_Obj *) SWIG_GetConstant(const char *key);
SWIGEXPORT(Tcl_Obj *) SWIG_NewInstanceObj(Tcl_Interp *interp, void *, swig_type_info *, int flags);
SWIGEXPORT(int)       SWIG_ObjectConstructor(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST objv[]);
SWIGEXPORT(int)       SWIG_MethodCommand(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST objv[]);
SWIGEXPORT(void)      SWIG_ObjectDelete(ClientData);
#else

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  int i;
  unsigned char *u = (unsigned char *) ptr;
  register unsigned char uu;
  for (i = 0; i < sz; i++,u++) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  int i;
  for (i = 0; i < sz; i++, u++) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_ConvertPtrFromString(Tcl_Interp *interp, char *c, void **ptr, swig_type_info *ty, int flags)
{
  swig_type_info *tc;
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) return TCL_OK;
    Tcl_SetResult(interp, (char *) "Type error. Expected a pointer", TCL_STATIC);
    return TCL_ERROR;
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) {
      Tcl_SetResult(interp, (char *) "Type error. Expected ", TCL_STATIC);
      Tcl_AppendElement(interp, (char *) ty->name);
      return TCL_ERROR;
    }
    *ptr = SWIG_TypeCast(tc,(void *) *ptr);
  }
  flags = 0;
  return TCL_OK;
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_ConvertPtr(Tcl_Interp *interp, Tcl_Obj *oc, void **ptr, swig_type_info *ty, int flags)
{
  return SWIG_ConvertPtrFromString(interp, Tcl_GetStringFromObj(oc,NULL), ptr, ty, flags);
}

/* Convert a pointer value */
SWIGRUNTIME(char *)
SWIG_PointerTypeFromString(char *c) {
  char d;
  /* Pointer values must start with leading underscore. NULL has no type */
  if (*c != '_') {
    return 0;
  }
  c++;
  /* Extract hex value from pointer */
  while ((d = *c)) {
    if (!(((d >= '0') && (d <= '9')) || ((d >= 'a') && (d <= 'f')))) break;
    c++;
  }
  return c;
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_ConvertPacked(Tcl_Interp *interp, Tcl_Obj *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;
  
  if (!obj) goto type_error;
  c = Tcl_GetStringFromObj(obj,NULL);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return TCL_OK;

type_error:

  if (flags) {
    if (ty) {
      Tcl_SetResult(interp, (char *) "Type error. Expected ", TCL_STATIC);
      Tcl_AppendElement(interp, (char *) ty->name);
      return TCL_ERROR;
    } else {
      Tcl_SetResult(interp, (char *) "Expected packed data.", TCL_STATIC);
      return TCL_ERROR;
    }
  }
  return TCL_ERROR;
}


/* Take a pointer and convert it to a string */
SWIGRUNTIME(void) 
SWIG_MakePtr(char *c, void *ptr, swig_type_info *ty, int flags) {
  if (ptr) {
    *(c++) = '_';
    c = SWIG_PackData(c,&ptr,sizeof(void *));
    strcpy(c,ty->name);
  } else {
    strcpy(c,(char *)"NULL");
  }
  flags = 0;
}

/* Create a new pointer object */
SWIGRUNTIME(Tcl_Obj *)
SWIG_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  Tcl_Obj *robj;
  char result[512];
  SWIG_MakePtr(result,ptr,type,flags);
  robj = Tcl_NewStringObj(result,-1);
  return robj;
}

SWIGRUNTIME(Tcl_Obj *)
SWIG_NewPackedObj(void *ptr, int sz, swig_type_info *type, int flags) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  flags = 0;
  return Tcl_NewStringObj(result,-1);
}

static Tcl_HashTable   swigconstTable;
static int             swigconstTableinit = 0;

/* Install Constants */
SWIGRUNTIME(void)
SWIG_InstallConstants(Tcl_Interp *interp, swig_const_info constants[]) {
  int i;
  Tcl_Obj *obj;
  Tcl_HashEntry *entryPtr;
  int            newobj;

  if (!swigconstTableinit) {
    Tcl_InitHashTable(&swigconstTable, TCL_STRING_KEYS);
    swigconstTableinit = 1;
  }
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_TCL_INT:
      obj = Tcl_NewIntObj(constants[i].lvalue);
      break;
    case SWIG_TCL_FLOAT:
      obj = Tcl_NewDoubleObj(constants[i].dvalue);
      break;
    case SWIG_TCL_STRING:
      obj = Tcl_NewStringObj((char *) constants[i].pvalue,-1);
      break;
    case SWIG_TCL_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_TCL_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype),0);
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      Tcl_ObjSetVar2(interp,Tcl_NewStringObj(constants[i].name,-1), NULL, obj, TCL_GLOBAL_ONLY);
      entryPtr = Tcl_CreateHashEntry(&swigconstTable, constants[i].name, &newobj);
      Tcl_SetHashValue(entryPtr, (ClientData) obj);
    }
  }
}

SWIGRUNTIME(Tcl_Obj *)
SWIG_GetConstant(const char *key) {
  Tcl_HashEntry *entryPtr;
  if (!swigconstTableinit) return 0;
  entryPtr = Tcl_FindHashEntry(&swigconstTable, key);
  if (entryPtr) {
    return (Tcl_Obj *) Tcl_GetHashValue(entryPtr);
  }
  printf("Searching %s\n", key);
  return 0;
}

/* Get arguments */
SWIGRUNTIME(int)
SWIG_GetArgs(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], const char *fmt, ...)
{
  int        argno = 0, opt = 0, tempi;
  double     tempd;
  const char *c;
  va_list    ap;
  void      *vptr;
  Tcl_Obj   *obj = 0;
  swig_type_info *ty;

  va_start(ap,fmt);
  for (c = fmt; (*c && (*c != ':') && (*c != ';')); c++,argno++) {
    if (*c == '|') {
      opt = 1;
      c++;
    }
    if (argno >= (objc-1)) {
      if (!opt) {
	Tcl_SetResult(interp, (char *) "Wrong # args. ", TCL_STATIC);
	goto argerror;
      } else {
	va_end(ap);
	return TCL_OK;
      }
    }

    vptr = va_arg(ap,void *);
    if (vptr) {
      if (isupper(*c)) {
	obj = SWIG_GetConstant(Tcl_GetStringFromObj(objv[argno+1],0));
	if (!obj) obj = objv[argno+1];
      } else {
	obj = objv[argno+1];
      }
      switch(*c) {
      case 'i': case 'I':
      case 'l': case 'L':
      case 'h': case 'H':
      case 'b': case 'B':
	if (Tcl_GetIntFromObj(interp,obj,&tempi) != TCL_OK) goto argerror;
	if ((*c == 'i') || (*c == 'I')) *((int *)vptr) = tempi;
	else if ((*c == 'l') || (*c == 'L')) *((long *)vptr) = tempi;
	else if ((*c == 'h') || (*c == 'H')) *((short*)vptr) = tempi;
	else if ((*c == 'b') || (*c == 'B')) *((unsigned char *)vptr) = tempi;
	break;
      case 'f': case 'F':
      case 'd': case 'D':
	if (Tcl_GetDoubleFromObj(interp,obj,&tempd) != TCL_OK) goto argerror;
	if ((*c == 'f') || (*c == 'F')) *((float *) vptr) = (float)tempd;
	else if ((*c == 'd') || (*c == 'D')) *((double*) vptr) = tempd;
	break;
      case 's': case 'S':
	if (*(c+1) == '#') {
	  int *vlptr = (int *) va_arg(ap, void *);
	  *((char **) vptr) = Tcl_GetStringFromObj(obj, vlptr);
	  c++;
	} else {
	  *((char **)vptr) = Tcl_GetStringFromObj(obj,NULL);
	}
	break;
      case 'c': case 'C':
	*((char *)vptr) = *(Tcl_GetStringFromObj(obj,NULL));
	break;
      case 'p': case 'P':
	ty = (swig_type_info *) va_arg(ap, void *);
	if (SWIG_ConvertPtr(interp, obj, (void **) vptr, ty,0) == TCL_ERROR) goto argerror;
	break;
      case 'o': case 'O':
	*((Tcl_Obj **)vptr) = objv[argno+1];
	break;
      default:
	break;
      }
    }
  }
  
  if ((*c != ';') && ((objc-1) > argno)) {
    Tcl_SetResult(interp, (char *) "Wrong # args.", TCL_STATIC);
    goto argerror;
  }
  va_end(ap);
  return TCL_OK;
  
 argerror:
  {
    char temp[32];
    sprintf(temp,"%d", argno+1);
    c = strchr(fmt,':');
    if (!c) c = strchr(fmt,';');
    if (!c) c = (char *)"";
    Tcl_AppendResult(interp,c," argument ", temp, NULL);
    va_end(ap);
    return TCL_ERROR;
  }
}

/* Object support */
static Tcl_HashTable  swigobjectTable;
static int            swigobjectTableinit = 0;

/* Acquire ownership of a pointer */
SWIGRUNTIME(void)
SWIG_Acquire(void *ptr)
{
  Tcl_HashEntry *entryPtr;
  int newobj;
  if (!swigobjectTableinit) {
    Tcl_InitHashTable(&swigobjectTable, TCL_ONE_WORD_KEYS);
    swigobjectTableinit = 1;
  }
  entryPtr = Tcl_CreateHashEntry(&swigobjectTable, (char *) ptr, &newobj);
}

/* Disown a pointer.  Returns 1 if we owned it to begin with */
SWIGRUNTIME(int)
SWIG_Disown(void *ptr)
{
  Tcl_HashEntry *entryPtr;
  if (!swigobjectTableinit) return 0;
  entryPtr = Tcl_FindHashEntry(&swigobjectTable, (char *) ptr);
  if (entryPtr) {
    Tcl_DeleteHashEntry(entryPtr);
    return 1;
  } 
  return 0;
}

SWIGRUNTIME(void)
SWIG_ObjectDelete(ClientData clientData) {
  swig_instance *si = (swig_instance *) clientData;
  if ((si) && (si->destroy) && (SWIG_Disown(si->thisvalue))) {
    if (si->classptr->destructor) {
      (si->classptr->destructor)(si->thisvalue);
    }
  }
  Tcl_DecrRefCount(si->thisptr);
  free(si);
}

/* Function to invoke object methods given an instance */
SWIGRUNTIME(int)
SWIG_MethodCommand(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[])
{
  char *method,   *attrname;
  swig_instance   *inst = (swig_instance *) clientData;
  swig_method     *meth;
  swig_attribute  *attr;
  Tcl_Obj         *oldarg;
  Tcl_Obj         **objv;
  int              rcode;
  swig_class      *cls;
  swig_class      *cls_stack[64];
  int              cls_stack_bi[64];
  int              cls_stack_top = 0;
  int              numconf = 2;
  int              bi;

  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
    return TCL_ERROR;
  }
  method = Tcl_GetStringFromObj(objv[1],NULL);
  if (strcmp(method,"-acquire") == 0) {
    inst->destroy = 1;
    SWIG_Acquire(inst->thisvalue);
    return TCL_OK;
  } 
  if (strcmp(method,"-disown") == 0) {
    if (inst->destroy) {
      SWIG_Disown(inst->thisvalue);
    }
    inst->destroy = 0;
    return TCL_OK;
  }
  if (strcmp(method,"-delete") == 0) {
    Tcl_DeleteCommandFromToken(interp,inst->cmdtok);
    return TCL_OK;
  }
  cls_stack[cls_stack_top] = inst->classptr;
  cls_stack_bi[cls_stack_top] = -1;
  cls = inst->classptr;
  while (1) {
    bi = cls_stack_bi[cls_stack_top];
    cls = cls_stack[cls_stack_top];
    if (bi != -1) {
      cls = cls->bases[bi];
      if (cls) {
	cls_stack_bi[cls_stack_top]++;
	cls_stack_top++;
	cls_stack[cls_stack_top] = cls;
	cls_stack_bi[cls_stack_top] = -1;
	continue;
      }
    }
    if (!cls) {
      cls_stack_top--;
      if (cls_stack_top < 0) break;
      else continue;
    }
    cls_stack_bi[cls_stack_top]++;

    meth = cls->methods;
    /* Check for methods */
    while (meth && meth->name) {
      if (strcmp(meth->name,method) == 0) {
	oldarg = objv[1];
	objv[1] = inst->thisptr;
	Tcl_IncrRefCount(inst->thisptr);
	rcode = (*meth->method)(clientData,interp,objc,objv);
	objv[1] = oldarg;
	Tcl_DecrRefCount(inst->thisptr);
	return rcode;
      }
      meth++;
    }
    /* Check class methods for a match */
    if (strcmp(method,"cget") == 0) {
      if (objc < 3) {
	Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
	return TCL_ERROR;
      }
      attrname = Tcl_GetStringFromObj(objv[2],NULL);
      attr = cls->attributes;
      while (attr && attr->name) {
	if ((strcmp(attr->name, attrname) == 0) && (attr->getmethod)) {
	  oldarg = objv[1];
	  objv[1] = inst->thisptr;
	  Tcl_IncrRefCount(inst->thisptr);
	  rcode = (*attr->getmethod)(clientData,interp,2, objv);
	  objv[1] = oldarg;
	  Tcl_DecrRefCount(inst->thisptr);
	  return rcode;
	}
	attr++;
      }
      if (strcmp(attrname, "-this") == 0) {
	Tcl_SetObjResult(interp, Tcl_DuplicateObj(inst->thisptr));
	return TCL_OK;
      }
    } else if (strcmp(method, "configure") == 0) {
      int i;
      if (objc < 4) {
	Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
	return TCL_ERROR;
      }
      i = 2;
      while (i < objc) {
	attrname = Tcl_GetStringFromObj(objv[i],NULL);
	attr = cls->attributes;
	while (attr && attr->name) {
	  if ((strcmp(attr->name, attrname) == 0) && (attr->setmethod)) {
	    oldarg = objv[i];
	    objv[i] = inst->thisptr;
	    Tcl_IncrRefCount(inst->thisptr);
	    rcode = (*attr->setmethod)(clientData,interp,3, &objv[i-1]);
	    objv[i] = oldarg;
	    Tcl_DecrRefCount(inst->thisptr);
	    if (rcode != TCL_OK) return rcode;
	    numconf += 2;
	  }
	  attr++;
	}
	i+=2;
      }
    }
  }
  if (strcmp(method,"configure") == 0) {
    if (numconf >= objc) {
      return TCL_OK;
    } else {
      Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
      return TCL_ERROR;
    }
  }
  if (strcmp(method,"cget") == 0) {
      Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
      return TCL_ERROR;
  }

  Tcl_SetResult(interp, (char *) "Invalid method. Must be one of: configure cget -acquire -disown -delete", TCL_STATIC);
  cls = inst->classptr;
  bi = 0;
  while (cls) {
    meth = cls->methods;
    while (meth && meth->name) {
      char *cr = (char *) Tcl_GetStringResult(interp);
      if (!strstr(strchr(cr,':'), meth->name))
	Tcl_AppendElement(interp, (char *) meth->name);
      meth++;
    }
    cls = inst->classptr->bases[bi++];
  }
  return TCL_ERROR;
}

/* Function to create objects */
SWIGRUNTIME(int)
SWIG_ObjectConstructor(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[])
{
    Tcl_Obj          *newObj = 0;
    void             *thisvalue = 0;
    swig_instance   *newinst = 0;
    swig_class      *classptr = (swig_class *) clientData;
    swig_wrapper     cons = 0;
    char             *name = 0;
    int               firstarg = 0;
    int               thisarg = 0;
    int               destroy = 1; 

    if (!classptr) {
      Tcl_SetResult(interp, (char *) "swig: internal runtime error. No class object defined.", TCL_STATIC);
      return TCL_ERROR;
    }
    cons = classptr->constructor;
    if (objc > 1) {
      char *s = Tcl_GetStringFromObj(objv[1],NULL);
      if (strcmp(s,"-this") == 0) {
	thisarg = 2;
	cons = 0;
      } else if (strcmp(s,"-args") == 0) {
	firstarg = 1;
      } else if (objc == 2) {
	firstarg = 1;
	name = s;
      } else if (objc >= 3) {
	char *s1;
	name = s;
	s1 = Tcl_GetStringFromObj(objv[2],NULL);
	if (strcmp(s1,"-this") == 0) {
	  thisarg = 3;
	  cons = 0;
	} else {
	  firstarg = 1;
	}
      }
    }
    if (cons) {
      int result;
      result = (*cons)(0, interp, objc-firstarg, &objv[firstarg]);
      if (result != TCL_OK) {
	return result;
      }
      newObj = Tcl_DuplicateObj(Tcl_GetObjResult(interp));
      if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
    } else if (thisarg > 0) {
      if (thisarg < objc) {
	destroy = 0;
	newObj = Tcl_DuplicateObj(objv[thisarg]);
	if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
      } else {
	Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
	return TCL_ERROR;
      }
    } else {
      Tcl_SetResult(interp, (char *) "No constructor available.", TCL_STATIC);
      return TCL_ERROR;
    }
    if (SWIG_ConvertPtr(interp,newObj, (void **) &thisvalue, *(classptr->type),0) == TCL_ERROR) {
      Tcl_DecrRefCount(newObj);
      return TCL_ERROR;
    }
    newinst = (swig_instance *) malloc(sizeof(swig_instance));
    newinst->thisptr = newObj;
    Tcl_IncrRefCount(newObj);
    newinst->thisvalue = thisvalue;
    newinst->classptr = classptr;
    newinst->destroy = destroy;
    if (destroy) {
      SWIG_Acquire(thisvalue);
    }
    newinst->cmdtok = Tcl_CreateObjCommand(interp,name, (swig_wrapper) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
    return TCL_OK;
}


/* This function takes the current result and turns it into an object command */
SWIGRUNTIME(Tcl_Obj *)
SWIG_NewInstanceObj(Tcl_Interp *interp, void *thisvalue, swig_type_info *type, int flags) {
  Tcl_Obj *robj = SWIG_NewPointerObj(thisvalue, type,0);
  /* Check to see if this pointer belongs to a class or not */
  if ((type->clientdata) && (interp)) {
    Tcl_CmdInfo    ci;
    char          *name;
    name = Tcl_GetStringFromObj(robj,NULL);
    if (!Tcl_GetCommandInfo(interp,name, &ci) || (flags)) {
      swig_instance *newinst = (swig_instance *) malloc(sizeof(swig_instance));
      newinst->thisptr = Tcl_DuplicateObj(robj);
      Tcl_IncrRefCount(newinst->thisptr);
      newinst->thisvalue = thisvalue;
      newinst->classptr = (swig_class *) type->clientdata;
      newinst->destroy = flags;
      newinst->cmdtok = Tcl_CreateObjCommand(interp, Tcl_GetStringFromObj(robj,NULL), (swig_wrapper_func) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
      if (flags) {
	SWIG_Acquire(thisvalue);
      }
    }
  }
  return robj;
}

#endif

/* Structure for command table */
typedef struct {
  const char *name;
  int       (*wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
  ClientData  clientdata;
} swig_command_info;

/* Structure for variable linking table */
typedef struct {
  const char *name;
  void *addr;
  char * (*get)(ClientData, Tcl_Interp *, char *, char *, int);
  char * (*set)(ClientData, Tcl_Interp *, char *, char *, int);
} swig_var_info;

#ifdef __cplusplus
}
#endif






/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_surfit__task swig_types[0] 
#define  SWIGTYPE_p_surfit__area swig_types[1] 
#define  SWIGTYPE_p_surfit__trend swig_types[2] 
#define  SWIGTYPE_p_surfit__flt swig_types[3] 
#define  SWIGTYPE_p_surfit__wcntr swig_types[4] 
#define  SWIGTYPE_p_surfit__wfunc swig_types[5] 
#define  SWIGTYPE_p_surfit__defarea swig_types[6] 
#define  SWIGTYPE_p_surfit__cntr swig_types[7] 
#define  SWIGTYPE_p_surfit__func swig_types[8] 
#define  SWIGTYPE_p_surfit__curv swig_types[9] 
#define  SWIGTYPE_p_surfit__dynamic swig_types[10] 
#define  SWIGTYPE_p_surfit__wiso swig_types[11] 
#define  SWIGTYPE_p_surfit__iso swig_types[12] 
#define  SWIGTYPE_p_surfit__warea swig_types[13] 
#define  SWIGTYPE_p_surfit__wtask swig_types[14] 
static swig_type_info *swig_types[16];

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Surfit_Init
#define SWIG_name    "surfit"
#define SWIG_prefix  ""
#define SWIG_version "0.0"


#ifdef __cplusplus
extern "C" {
#endif
#ifdef MAC_TCL
#pragma export on
#endif
SWIGEXPORT(int) SWIG_init(Tcl_Interp *);
#ifdef MAC_TCL
#pragma export off
#endif
#ifdef __cplusplus
}
#endif




/*------------------------------------------------------------------------------
 *	$Id$
 *
 *	Copyright (c) 2002-2004 by M. V. Dmitrievsky and V. N. Kutrunov
 *	See COPYING file for copying and redistribution conditions.
 *
 *	This program is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; version 2 of the License.
 *
 *	This program is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	Contact info: surfit.sourceforge.net
 *----------------------------------------------------------------------------*/

#include "ie.h"
#include "real.h"
#include "variables_internal.h"
#include "variables_tcl.h"
#include "fileio.h"
#include "color_scale.h"
#include "file_manager.h"
#include "completer_tcl.h"
#include "license.h"
#include "fill_with_tcl.h"

extern float surfit::tol;
extern int surfit::datafile_mode;
extern int surfit::priority;
extern double surfit::undef_value;
extern double surfit::sor_omega;
extern double surfit::ssor_omega;
extern char *surfit::map_name;

#include "fileio.h"


#include "task_tcl.h"
#include "tasks.h"
#include "wtask_tcl.h"
#include "wtasks.h"
#include "dynamic_tcl.h"
#include "dynamics.h"


#include "grid_tcl.h"


#include "main_method.h"


#include "func_tcl.h"
#include "funcs.h"
#include "wfunc_tcl.h"
#include "wfuncs.h"
#include "trends.h"
#include "trend_tcl.h"
#include "defarea_tcl.h"
#include "defareas.h"


#include "mrf.h"
#include "func.h"


#include "curv_tcl.h"
#include "curvs.h"
#include "flt_tcl.h"
#include "flts.h"
#include "iso_tcl.h"
#include "isos.h"
#include "wiso_tcl.h"
#include "wisos.h"
#include "area_tcl.h"
#include "areas.h"
#include "warea_tcl.h"
#include "wareas.h"
#include "cntr_tcl.h"
#include "cntrs.h"
#include "wcntr_tcl.h"
#include "wcntrs.h"
#include "grid_line_tcl.h"


#include "draw.h"
#include "colors.h"
#include "grid_show.h"
#include "task_show.h"
#include "wtask_show.h"
#include "func_show.h"
#include "wfunc_show.h"
#include "trend_show.h"
#include "defarea_show.h"
#include "curv_show.h"
#include "iso_show.h"
#include "wiso_show.h"
#include "flt_show.h"
#include "area_show.h"
#include "warea_show.h"
#include "cntr_show.h"
#include "wcntr_show.h"
#include "file_manager.h"

extern int surfit::bg_color_red;
extern int surfit::bg_color_green;
extern int surfit::bg_color_blue;
extern int surfit::bg_color_alpha;
extern int surfit::task_color_red;
extern int surfit::task_color_green;
extern int surfit::task_color_blue;
extern int surfit::task_color_alpha;
extern int surfit::wtask_color_red;
extern int surfit::wtask_color_green;
extern int surfit::wtask_color_blue;
extern int surfit::wtask_color_alpha;
extern int surfit::iso_color_red;
extern int surfit::iso_color_green;
extern int surfit::iso_color_blue;
extern int surfit::iso_color_alpha;
extern int surfit::curv_color_red;
extern int surfit::curv_color_green;
extern int surfit::curv_color_blue;
extern int surfit::curv_color_alpha;
extern int surfit::flt_color_red;
extern int surfit::flt_color_green;
extern int surfit::flt_color_blue;
extern int surfit::flt_color_alpha;
extern int surfit::warea_color_red;
extern int surfit::warea_color_green;
extern int surfit::warea_color_blue;
extern int surfit::warea_color_alpha;
extern int surfit::area_color_red;
extern int surfit::area_color_green;
extern int surfit::area_color_blue;
extern int surfit::area_color_alpha;
extern int surfit::grid_amount_x;
extern int surfit::grid_amount_y;
extern int surfit::grid_amount_z;
extern float surfit::x_shift;
extern float surfit::y_shift;
extern float surfit::scale;
extern float surfit::z_scale;
extern int surfit::axis_labels;
extern int surfit::point_size;
extern int surfit::isoline;
extern int surfit::draw_task;
extern int surfit::draw_wtask;
extern int surfit::draw_func;
extern int surfit::draw_wfunc;
extern int surfit::draw_trend;
extern int surfit::draw_iso;
extern int surfit::draw_curv;
extern int surfit::draw_wiso;
extern int surfit::draw_cntr;
extern int surfit::draw_pcntr;
extern int surfit::draw_wcntr;
extern int surfit::draw_area;
extern int surfit::draw_warea;
extern int surfit::draw_parea;
extern int surfit::draw_flt;
extern int surfit::draw_grid;
extern int surfit::draw_defarea;
extern int surfit::light;
extern int surfit::smooth;
extern int surfit::fix_axes;
extern double surfit::minx;
extern double surfit::maxx;
extern double surfit::miny;
extern double surfit::maxy;
extern double surfit::minz;
extern double surfit::maxz;
extern float surfit::show_x_from;
extern float surfit::show_x_to;
extern float surfit::show_y_from;
extern float surfit::show_y_to;
extern int surfit::show_in_area;
#ifdef __cplusplus
extern "C" {
#endif
static char *_wrap_tol_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewDoubleObj((double) surfit::tol);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_tol_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        double temp;
        if (Tcl_GetDoubleFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected a double.";
        }
        surfit::tol = (float) temp;
    }
    return NULL;
}


static char *_wrap_datafile_mode_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::datafile_mode);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_datafile_mode_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::datafile_mode = (int) temp;
    }
    return NULL;
}


static char *_wrap_priority_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::priority);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_priority_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::priority = (int) temp;
    }
    return NULL;
}


static char *_wrap_undef_value_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewDoubleObj((double) surfit::undef_value);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_undef_value_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        double temp;
        if (Tcl_GetDoubleFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected a double.";
        }
        surfit::undef_value = (double) temp;
    }
    return NULL;
}


static char *_wrap_sor_omega_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewDoubleObj((double) surfit::sor_omega);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_sor_omega_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        double temp;
        if (Tcl_GetDoubleFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected a double.";
        }
        surfit::sor_omega = (double) temp;
    }
    return NULL;
}


static char *_wrap_ssor_omega_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewDoubleObj((double) surfit::ssor_omega);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_ssor_omega_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        double temp;
        if (Tcl_GetDoubleFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected a double.";
        }
        surfit::ssor_omega = (double) temp;
    }
    return NULL;
}


static char *_wrap_map_name_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewStringObj((char*) surfit::map_name,-1);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_map_name_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        char  *temp = Tcl_GetStringFromObj(value,NULL);
        if (surfit::map_name) delete [] surfit::map_name;
        surfit::map_name = (char *) new char[strlen(temp)+1];
        strcpy((char *) surfit::map_name,temp);
    }
    return NULL;
}


static int
_wrap_rw_mode_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:rw_mode_set newmode ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::rw_mode_set((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_rw_mode_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":rw_mode_get ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (char *)surfit::rw_mode_get();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewStringObj(result,-1));
    return TCL_OK;
}

static int
_wrap_clear_data(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    if (SWIG_GetArgs(interp, objc, objv,":clear_data ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::clear_data();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_mem_info(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    if (SWIG_GetArgs(interp, objc, objv,":mem_info ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::mem_info();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_putlog(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:putlog str ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::putlog((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_set_color_scale(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double arg2 ;
    double arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    int arg8 ;
    int arg9 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"dddiiiiii:set_color_scale from to step r1 g1 b1 r2 g2 b2 ",&arg1,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7,&arg8,&arg9) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::set_color_scale(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_set_default_color_scale(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    if (SWIG_GetArgs(interp, objc, objv,":set_default_color_scale ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::set_default_color_scale();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_file_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:file_load filename ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::file_load((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_file_save(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:file_save filename ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::file_save((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_completer_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double arg2 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"dd:completer_set D1 D2 ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::completer_set(arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_fill_with_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 = FLT_MAX ;
    
    if (SWIG_GetArgs(interp, objc, objv,"|d:fill_with_set value ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::fill_with_set(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_fill_with_unload(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":fill_with_unload ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::fill_with_unload();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_fill_with_check(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":fill_with_check ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::fill_with_check();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_show_w(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    if (SWIG_GetArgs(interp, objc, objv,":show_w ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::show_w();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_show_c(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    if (SWIG_GetArgs(interp, objc, objv,":show_c ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::show_c();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_log_open(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 = 3 ;
    char *arg2 = NULL ;
    
    if (SWIG_GetArgs(interp, objc, objv,"|is:log_open level logname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::log_open(arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_log_clear(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    if (SWIG_GetArgs(interp, objc, objv,":log_clear ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::log_clear();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_file_info(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:file_info filename ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::file_info((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_task_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:task_load filename taskname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::task_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_task_read(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    int arg3 = 3 ;
    int arg4 = 1 ;
    int arg5 = 2 ;
    int arg6 = 3 ;
    char *arg7 = " " ;
    int arg8 = 250 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|siiiisi:task_read filename taskname columns col1 col2 col3 delimiter grow_by ",&arg1,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7,&arg8) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::task_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_task_unload(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    if (SWIG_GetArgs(interp, objc, objv,":task_unload ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::task_unload();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_task_save(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:task_save filename taskname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::task_save((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_task_write(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = "\t" ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:task_write filename delimiter ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::task_write((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_task_transform(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"dddd:task_transform shiftX scaleX shiftY scaleY ",&arg1,&arg2,&arg3,&arg4) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::task_transform(arg1,arg2,arg3,arg4);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_task_inverse_transform(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"dddd:task_inverse_transform shiftX scaleX shiftY scaleY ",&arg1,&arg2,&arg3,&arg4) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::task_inverse_transform(arg1,arg2,arg3,arg4);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_task_filter_by_defarea(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":task_filter_by_defarea ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::task_filter_by_defarea();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_task_filter_by_func(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:task_filter_by_func eps ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::task_filter_by_func(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_task_update_by_func(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":task_update_by_func ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::task_update_by_func();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_task_minx(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":task_minx ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::task_minx();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_task_maxx(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":task_maxx ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::task_maxx();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_task_miny(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":task_miny ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::task_miny();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_task_maxy(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":task_maxy ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::task_maxy();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_task_minz(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":task_minz ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::task_minz();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_task_maxz(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":task_maxz ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::task_maxz();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_task_add_noise(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:task_add_noise std ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::task_add_noise(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_task_mean(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":task_mean ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::task_mean();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_task_std(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:task_std mean ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::task_std(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_task_plus(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::task *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:task_plus tsk ",&arg1,SWIGTYPE_p_surfit__task) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::task_plus(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_task_minus(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::task *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:task_minus tsk ",&arg1,SWIGTYPE_p_surfit__task) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::task_minus(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_task_mult(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::task *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:task_mult tsk ",&arg1,SWIGTYPE_p_surfit__task) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::task_mult(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_task_div(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::task *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:task_div tsk ",&arg1,SWIGTYPE_p_surfit__task) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::task_div(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_task_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::task *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:task_set tsk ",&arg1,SWIGTYPE_p_surfit__task) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::task_set(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_task_plus_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:task_plus_real val ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::task_plus_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_task_minus_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:task_minus_real val ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::task_minus_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_task_mult_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:task_mult_real val ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::task_mult_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_task_div_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:task_div_real val ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::task_div_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_task_set_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:task_set_real val ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::task_set_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_task_to_wtask(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:task_to_wtask weight ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::task_to_wtask(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_task_to_wtasks(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:task_to_wtasks weight ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::task_to_wtasks(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_task_to_tasks(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":task_to_tasks ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::task_to_tasks();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_task_check(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":task_check ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::task_check();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_task_size(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":task_size ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::task_size();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_task_name(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 = NULL ;
    surfit::task *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"|sp:task_name new_name tsk ",&arg1,&arg2,SWIGTYPE_p_surfit__task) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::task_name((char const *)arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_tasks_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:tasks_load filename taskname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::tasks_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_tasks_read(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    int arg3 = 3 ;
    int arg4 = 1 ;
    int arg5 = 2 ;
    int arg6 = 3 ;
    char *arg7 = " " ;
    int arg8 = 250 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|siiiisi:tasks_read filename taskname columns col1 col2 col3 delimiter grow_by ",&arg1,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7,&arg8) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::tasks_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_tasks_delall(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":tasks_delall ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::tasks_delall();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_tasks_del(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:tasks_del pos ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::tasks_del(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_task_concat(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::task *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:task_concat tsk ",&arg1,SWIGTYPE_p_surfit__task) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::task_concat(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_tasks_at(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    surfit::task *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:tasks_at pos ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::task *)surfit::tasks_at(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__task,0));
    return TCL_OK;
}

static int
_wrap_tasks_first(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::task *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":tasks_first ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::task *)surfit::tasks_first();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__task,0));
    return TCL_OK;
}

static int
_wrap_tasks_last(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::task *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":tasks_last ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::task *)surfit::tasks_last();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__task,0));
    return TCL_OK;
}

static int
_wrap_tasks_size(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":tasks_size ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::tasks_size();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_tasks_info(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":tasks_info ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::tasks_info();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtask_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:wtask_load filename taskname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wtask_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtask_read(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    int arg3 = 4 ;
    int arg4 = 1 ;
    int arg5 = 2 ;
    int arg6 = 3 ;
    int arg7 = 4 ;
    char *arg8 = " " ;
    int arg9 = 250 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|siiiiisi:wtask_read filename taskname columns col1 col2 col3 col4 delimiter grow_by ",&arg1,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7,&arg8,&arg9) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::wtask_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8,arg9);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_wtask_unload(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    if (SWIG_GetArgs(interp, objc, objv,":wtask_unload ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::wtask_unload();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_wtask_save(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:wtask_save filename taskname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wtask_save((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtask_write(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = "\t" ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:wtask_write filename delimiter ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wtask_write((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtask_transform(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"dddd:wtask_transform shiftX scaleX shiftY scaleY ",&arg1,&arg2,&arg3,&arg4) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::wtask_transform(arg1,arg2,arg3,arg4);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_wtask_inverse_transform(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"dddd:wtask_inverse_transform shiftX scaleX shiftY scaleY ",&arg1,&arg2,&arg3,&arg4) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::wtask_inverse_transform(arg1,arg2,arg3,arg4);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_wtask_filter_by_defarea(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wtask_filter_by_defarea ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wtask_filter_by_defarea();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtask_filter_by_func(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:wtask_filter_by_func eps ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wtask_filter_by_func(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtask_update_by_func(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wtask_update_by_func ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wtask_update_by_func();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtask_minx(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wtask_minx ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::wtask_minx();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_wtask_maxx(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wtask_maxx ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::wtask_maxx();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_wtask_miny(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wtask_miny ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::wtask_miny();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_wtask_maxy(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wtask_maxy ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::wtask_maxy();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_wtask_minz(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wtask_minz ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::wtask_minz();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_wtask_maxz(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wtask_maxz ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::wtask_maxz();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_wtask_add_noise(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:wtask_add_noise std ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wtask_add_noise(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtask_mean(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wtask_mean ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::wtask_mean();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_wtask_std(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:wtask_std mean ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::wtask_std(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_wtask_plus(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::wtask *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:wtask_plus wtsk ",&arg1,SWIGTYPE_p_surfit__wtask) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wtask_plus(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtask_minus(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::wtask *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:wtask_minus wtsk ",&arg1,SWIGTYPE_p_surfit__wtask) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wtask_minus(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtask_mult(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::wtask *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:wtask_mult wtsk ",&arg1,SWIGTYPE_p_surfit__wtask) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wtask_mult(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtask_div(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::wtask *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:wtask_div wtsk ",&arg1,SWIGTYPE_p_surfit__wtask) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wtask_div(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtask_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::wtask *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:wtask_set wtsk ",&arg1,SWIGTYPE_p_surfit__wtask) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wtask_set(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtask_plus_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:wtask_plus_real val ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wtask_plus_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtask_minus_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:wtask_minus_real val ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wtask_minus_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtask_mult_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:wtask_mult_real val ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wtask_mult_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtask_div_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:wtask_div_real val ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wtask_div_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtask_set_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:wtask_set_real val ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wtask_set_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtask_to_task(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wtask_to_task ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wtask_to_task();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtask_to_tasks(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wtask_to_tasks ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wtask_to_tasks();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtask_to_wtasks(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wtask_to_wtasks ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wtask_to_wtasks();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtask_check(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wtask_check ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wtask_check();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtask_size(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wtask_size ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::wtask_size();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtask_name(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 = NULL ;
    surfit::wtask *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"|sp:wtask_name new_name wtsk ",&arg1,&arg2,SWIGTYPE_p_surfit__wtask) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wtask_name((char const *)arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtasks_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:wtasks_load filename taskname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wtasks_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtasks_read(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    int arg3 = 4 ;
    int arg4 = 1 ;
    int arg5 = 2 ;
    int arg6 = 3 ;
    int arg7 = 4 ;
    char *arg8 = " " ;
    int arg9 = 250 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|siiiiisi:wtasks_read filename taskname columns col1 col2 col3 col4 delimiter grow_by ",&arg1,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7,&arg8,&arg9) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wtasks_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8,arg9);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtasks_delall(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wtasks_delall ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wtasks_delall();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtasks_del(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:wtasks_del pos ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wtasks_del(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtask_concat(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::wtask *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:wtask_concat wtsk ",&arg1,SWIGTYPE_p_surfit__wtask) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wtask_concat(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtasks_at(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    surfit::wtask *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:wtasks_at pos ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::wtask *)surfit::wtasks_at(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__wtask,0));
    return TCL_OK;
}

static int
_wrap_wtasks_first(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::wtask *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wtasks_first ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::wtask *)surfit::wtasks_first();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__wtask,0));
    return TCL_OK;
}

static int
_wrap_wtasks_last(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::wtask *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wtasks_last ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::wtask *)surfit::wtasks_last();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__wtask,0));
    return TCL_OK;
}

static int
_wrap_wtasks_size(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wtasks_size ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::wtasks_size();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wtasks_info(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wtasks_info ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::wtasks_info();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_dynamic_unload(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":dynamic_unload ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::dynamic_unload();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_dynamic_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ss:dynamic_load load_proc_name unload_proc_name ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::dynamic_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_dynamics_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ss:dynamics_load iload_proc_name iunload_proc_name ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::dynamics_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_dynamics_delall(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":dynamics_delall ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::dynamics_delall();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_dynamics_info(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":dynamics_info ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::dynamics_info();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_dynamic_name(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    surfit::dynamic *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|p:dynamic_name new_name dynam ",&arg1,&arg2,SWIGTYPE_p_surfit__dynamic) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::dynamic_name((char const *)arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_grid_save(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:grid_save filename ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::grid_save((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_grid_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:grid_load filename gridname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::grid_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_grid_unload(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    if (SWIG_GetArgs(interp, objc, objv,":grid_unload ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::grid_unload();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_grid_auto(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 = 0 ;
    double arg2 = 0 ;
    double arg3 = 2 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"|ddd:grid_auto stepX stepY percent ",&arg1,&arg2,&arg3) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::grid_auto(arg1,arg2,arg3);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_grid_auto2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 = 0 ;
    double arg2 = 0 ;
    double arg3 = 2 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"|ddd:grid_auto2 stepX stepY percent ",&arg1,&arg2,&arg3) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::grid_auto2(arg1,arg2,arg3);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_grid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    double arg6 ;
    char *arg7 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"dddddd|s:grid_get startX endX stepX startY endY stepY name ",&arg1,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::grid_get(arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_grid_get2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    double arg6 ;
    char *arg7 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"dddddd|s:grid_get2 startX endX stepX startY endY stepY name ",&arg1,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::grid_get2(arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_grid_get_for_task(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    int arg2 ;
    char *arg3 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ii|s:grid_get_for_task Xnodes Ynodes name ",&arg1,&arg2,&arg3) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::grid_get_for_task(arg1,arg2,(char const *)arg3);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_grid_get_for_task_step(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double arg2 ;
    char *arg3 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"dd|s:grid_get_for_task_step stepX stepY name ",&arg1,&arg2,&arg3) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::grid_get_for_task_step(arg1,arg2,(char const *)arg3);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_grid_get_from_func(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"|s:grid_get_from_func name ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::grid_get_from_func((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_grid_get_for_func(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    int arg2 ;
    char *arg3 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ii|s:grid_get_for_func Xnodes Ynodes name ",&arg1,&arg2,&arg3) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::grid_get_for_func(arg1,arg2,(char const *)arg3);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_grid_get_for_func_step(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double arg2 ;
    char *arg3 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"dd|s:grid_get_for_func_step stepX stepY name ",&arg1,&arg2,&arg3) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::grid_get_for_func_step(arg1,arg2,(char const *)arg3);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_grid_check(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":grid_check ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::grid_check();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_grid_info(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    if (SWIG_GetArgs(interp, objc, objv,":grid_info ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::grid_info();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_grid_getCountX(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":grid_getCountX ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::grid_getCountX();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_grid_getCountY(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":grid_getCountY ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::grid_getCountY();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_grid_getCoordNodeX(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:grid_getCoordNodeX i ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::grid_getCoordNodeX(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_grid_getCoordNodeY(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:grid_getCoordNodeY j ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::grid_getCoordNodeY(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_grid_getStepX(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":grid_getStepX ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::grid_getStepX();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_grid_getStepY(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":grid_getStepY ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::grid_getStepY();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_solve(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    if (SWIG_GetArgs(interp, objc, objv,":solve ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::solve();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static char *_wrap_solver_code_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::solver_code);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_solver_code_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::solver_code = (int) temp;
    }
    return NULL;
}


static int
_wrap_func_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:func_load filename funcname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_load_grd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:func_load_grd filename funcname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_load_grd((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_unload(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    if (SWIG_GetArgs(interp, objc, objv,":func_unload ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::func_unload();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_func_save(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:func_save filename funcname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_save((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_save_grd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:func_save_grd filename ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_save_grd((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_save_xyz(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:func_save_xyz filename ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_save_xyz((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_save_bmp(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:func_save_bmp filename ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_save_bmp((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_getValue(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double arg2 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,"dd:func_getValue x y ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::func_getValue(arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_func_resid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:func_resid filename ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_resid((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_D1(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":func_D1 ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::func_D1();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_func_D2(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":func_D2 ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::func_D2();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_func_gradient(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    if (SWIG_GetArgs(interp, objc, objv,":func_gradient ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::func_gradient();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_func_project(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":func_project ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_project();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_add_noise(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:func_add_noise std ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_add_noise(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_minz(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":func_minz ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::func_minz();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_func_maxz(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":func_maxz ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::func_maxz();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_func_mean(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":func_mean ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::func_mean();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_func_std(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:func_std mean_value ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::func_std(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_func_sum(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":func_sum ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::func_sum();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_func_plus(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::func *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:func_plus func ",&arg1,SWIGTYPE_p_surfit__func) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_plus(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_minus(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::func *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:func_minus func ",&arg1,SWIGTYPE_p_surfit__func) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_minus(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_minus_undef(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::func *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:func_minus_undef func ",&arg1,SWIGTYPE_p_surfit__func) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_minus_undef(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_mult(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::func *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:func_mult func ",&arg1,SWIGTYPE_p_surfit__func) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_mult(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_div(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::func *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:func_div func ",&arg1,SWIGTYPE_p_surfit__func) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_div(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::func *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:func_set func ",&arg1,SWIGTYPE_p_surfit__func) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_set(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_plus_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:func_plus_real val ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_plus_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_minus_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:func_minus_real val ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_minus_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_mult_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:func_mult_real val ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_mult_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_div_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:func_div_real val ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_div_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_set_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:func_set_real val ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_set_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_get_details_level(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":func_get_details_level ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::func_get_details_level();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_decomp(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":func_decomp ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_decomp();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_auto_decomp(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:func_auto_decomp eps ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_auto_decomp(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_recons(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":func_recons ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_recons();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_full_recons(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":func_full_recons ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_full_recons();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_to_task(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":func_to_task ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_to_task();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_to_defarea(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double arg2 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"dd:func_to_defarea true_from true_to ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_to_defarea(arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_to_defareas(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double arg2 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"dd:func_to_defareas true_from true_to ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_to_defareas(arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_to_trend(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double arg2 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"dd:func_to_trend D1 D2 ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_to_trend(arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_to_trends(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double arg2 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"dd:func_to_trends D1 D2 ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_to_trends(arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_to_wfunc(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:func_to_wfunc weight ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_to_wfunc(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_to_wfuncs(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:func_to_wfuncs weight ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_to_wfuncs(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_to_funcs(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":func_to_funcs ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_to_funcs();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_check(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":func_check ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_check();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_getCountX(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":func_getCountX ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::func_getCountX();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_getCountY(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":func_getCountY ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::func_getCountY();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_getStepX(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":func_getStepX ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::func_getStepX();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_func_getStepY(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":func_getStepY ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::func_getStepY();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_func_undef(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:func_undef new_undef_value ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_undef(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_func_info(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::func *arg1 = NULL ;
    
    if (SWIG_GetArgs(interp, objc, objv,"|p:func_info func ",&arg1,SWIGTYPE_p_surfit__func) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::func_info(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_func_name(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 = NULL ;
    surfit::func *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"|sp:func_name new_name fnc ",&arg1,&arg2,SWIGTYPE_p_surfit__func) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::func_name((char const *)arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_funcs_delall(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":funcs_delall ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::funcs_delall();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_funcs_del(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:funcs_del pos ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::funcs_del(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_funcs_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:funcs_load filename funcname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::funcs_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_funcs_load_grd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:funcs_load_grd filename funcname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::funcs_load_grd((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_funcs_unload(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:funcs_unload name ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::funcs_unload((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_funcs_at(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    surfit::func *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:funcs_at pos ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::func *)surfit::funcs_at(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__func,0));
    return TCL_OK;
}

static int
_wrap_funcs_first(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::func *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":funcs_first ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::func *)surfit::funcs_first();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__func,0));
    return TCL_OK;
}

static int
_wrap_funcs_last(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::func *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":funcs_last ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::func *)surfit::funcs_last();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__func,0));
    return TCL_OK;
}

static int
_wrap_funcs_size(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":funcs_size ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::funcs_size();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_funcs_info(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":funcs_info ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::funcs_info();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:wfunc_load filename wfuncname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfunc_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_load_grd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    double arg2 ;
    char *arg3 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"sd|s:wfunc_load_grd filename weight wfuncname ",&arg1,&arg2,&arg3) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfunc_load_grd((char const *)arg1,arg2,(char const *)arg3);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_unload(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    if (SWIG_GetArgs(interp, objc, objv,":wfunc_unload ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::wfunc_unload();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_wfunc_save(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:wfunc_save filename wfuncname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfunc_save((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_save_grd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:wfunc_save_grd filename ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfunc_save_grd((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_save_xyz(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:wfunc_save_xyz filename ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfunc_save_xyz((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_save_bmp(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:wfunc_save_bmp filename ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfunc_save_bmp((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_getValue(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double arg2 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,"dd:wfunc_getValue x y ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::wfunc_getValue(arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_wfunc_add_noise(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:wfunc_add_noise std ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfunc_add_noise(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_minz(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wfunc_minz ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::wfunc_minz();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_wfunc_maxz(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wfunc_maxz ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::wfunc_maxz();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_wfunc_mean(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wfunc_mean ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::wfunc_mean();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_wfunc_std(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:wfunc_std mean_value ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::wfunc_std(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_wfunc_plus(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::wfunc *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:wfunc_plus fnc ",&arg1,SWIGTYPE_p_surfit__wfunc) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfunc_plus(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_minus(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::wfunc *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:wfunc_minus fnc ",&arg1,SWIGTYPE_p_surfit__wfunc) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfunc_minus(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_mult(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::wfunc *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:wfunc_mult fnc ",&arg1,SWIGTYPE_p_surfit__wfunc) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfunc_mult(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_div(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::wfunc *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:wfunc_div fnc ",&arg1,SWIGTYPE_p_surfit__wfunc) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfunc_div(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::wfunc *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:wfunc_set fnc ",&arg1,SWIGTYPE_p_surfit__wfunc) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfunc_set(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_plus_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:wfunc_plus_real val ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfunc_plus_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_mult_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:wfunc_mult_real val ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfunc_mult_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_div_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:wfunc_div_real val ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfunc_div_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_set_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:wfunc_set_real val ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfunc_set_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_get_details_level(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wfunc_get_details_level ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::wfunc_get_details_level();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_decomp(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wfunc_decomp ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfunc_decomp();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_auto_decomp(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:wfunc_auto_decomp eps ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfunc_auto_decomp(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_recons(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wfunc_recons ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfunc_recons();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_full_recons(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wfunc_full_recons ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfunc_full_recons();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_to_wtask(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wfunc_to_wtask ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfunc_to_wtask();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_to_func(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wfunc_to_func ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfunc_to_func();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_to_funcs(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wfunc_to_funcs ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfunc_to_funcs();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_to_wfuncs(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wfunc_to_wfuncs ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfunc_to_wfuncs();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_check(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wfunc_check ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfunc_check();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_getCountX(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wfunc_getCountX ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::wfunc_getCountX();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_getCountY(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wfunc_getCountY ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::wfunc_getCountY();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_getStepX(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wfunc_getStepX ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::wfunc_getStepX();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_wfunc_getStepY(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wfunc_getStepY ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::wfunc_getStepY();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_wfunc_undef(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:wfunc_undef new_undef_value ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfunc_undef(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfunc_info(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::wfunc *arg1 = NULL ;
    
    if (SWIG_GetArgs(interp, objc, objv,"|p:wfunc_info fnc ",&arg1,SWIGTYPE_p_surfit__wfunc) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::wfunc_info(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_wfunc_name(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 = NULL ;
    surfit::wfunc *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"|sp:wfunc_name new_name wfnc ",&arg1,&arg2,SWIGTYPE_p_surfit__wfunc) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfunc_name((char const *)arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfuncs_delall(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wfuncs_delall ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfuncs_delall();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfuncs_del(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:wfuncs_del pos ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfuncs_del(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfuncs_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:wfuncs_load filename wfuncname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfuncs_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfuncs_load_grd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    double arg2 ;
    char *arg3 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"sd|s:wfuncs_load_grd filename weight wfuncname ",&arg1,&arg2,&arg3) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfuncs_load_grd((char const *)arg1,arg2,(char const *)arg3);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfuncs_unload(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:wfuncs_unload name ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wfuncs_unload((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfuncs_at(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    surfit::wfunc *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:wfuncs_at pos ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::wfunc *)surfit::wfuncs_at(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__wfunc,0));
    return TCL_OK;
}

static int
_wrap_wfuncs_first(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::wfunc *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wfuncs_first ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::wfunc *)surfit::wfuncs_first();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__wfunc,0));
    return TCL_OK;
}

static int
_wrap_wfuncs_last(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::wfunc *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wfuncs_last ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::wfunc *)surfit::wfuncs_last();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__wfunc,0));
    return TCL_OK;
}

static int
_wrap_wfuncs_size(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wfuncs_size ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::wfuncs_size();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wfuncs_info(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wfuncs_info ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::wfuncs_info();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:trend_load filename funcname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_load_grd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    double arg2 = 1 ;
    double arg3 = 0 ;
    char *arg4 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|dds:trend_load_grd filename D1 D2 trendname ",&arg1,&arg2,&arg3,&arg4) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_load_grd((char const *)arg1,arg2,arg3,(char const *)arg4);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_unload(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    if (SWIG_GetArgs(interp, objc, objv,":trend_unload ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::trend_unload();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_trend_save(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:trend_save filename funcname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_save((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_save_grd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:trend_save_grd filename ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_save_grd((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_save_xyz(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:trend_save_xyz filename ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_save_xyz((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_save_bmp(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:trend_save_bmp filename ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_save_bmp((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_getValue(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double arg2 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,"dd:trend_getValue x y ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::trend_getValue(arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_trend_resid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:trend_resid filename ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_resid((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_project(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":trend_project ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_project();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_minz(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":trend_minz ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::trend_minz();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_trend_maxz(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":trend_maxz ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::trend_maxz();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_trend_mean(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":trend_mean ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::trend_mean();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_trend_std(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:trend_std mean ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::trend_std(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_trend_plus(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::trend *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:trend_plus fnc ",&arg1,SWIGTYPE_p_surfit__trend) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_plus(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_minus(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::trend *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:trend_minus fnc ",&arg1,SWIGTYPE_p_surfit__trend) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_minus(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_minus_undef(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::trend *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:trend_minus_undef fnc ",&arg1,SWIGTYPE_p_surfit__trend) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_minus_undef(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_mult(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::trend *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:trend_mult fnc ",&arg1,SWIGTYPE_p_surfit__trend) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_mult(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_div(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::trend *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:trend_div fnc ",&arg1,SWIGTYPE_p_surfit__trend) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_div(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::trend *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:trend_set fnc ",&arg1,SWIGTYPE_p_surfit__trend) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_set(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_plus_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:trend_plus_real val ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_plus_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_minus_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:trend_minus_real val ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_minus_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_mult_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:trend_mult_real val ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_mult_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_div_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:trend_div_real val ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_div_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_set_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:trend_set_real val ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_set_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_get_details_level(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":trend_get_details_level ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::trend_get_details_level();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_decomp(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":trend_decomp ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_decomp();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_auto_decomp(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:trend_auto_decomp eps ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_auto_decomp(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_recons(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":trend_recons ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_recons();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_full_recons(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":trend_full_recons ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_full_recons();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_to_func(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":trend_to_func ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_to_func();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_to_funcs(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":trend_to_funcs ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_to_funcs();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_to_trends(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":trend_to_trends ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_to_trends();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_check(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":trend_check ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_check();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_getCountX(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":trend_getCountX ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::trend_getCountX();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_getCountY(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":trend_getCountY ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::trend_getCountY();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_getStepX(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":trend_getStepX ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::trend_getStepX();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_trend_getStepY(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double result;
    
    if (SWIG_GetArgs(interp, objc, objv,":trend_getStepY ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (double)surfit::trend_getStepY();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_trend_undef(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:trend_undef new_undef_value ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_undef(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trend_info(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::trend *arg1 = NULL ;
    
    if (SWIG_GetArgs(interp, objc, objv,"|p:trend_info fnc ",&arg1,SWIGTYPE_p_surfit__trend) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::trend_info(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_trend_name(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 = NULL ;
    surfit::trend *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"|sp:trend_name new_name trnd ",&arg1,&arg2,SWIGTYPE_p_surfit__trend) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trend_name((char const *)arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trends_delall(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":trends_delall ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trends_delall();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trends_del(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:trends_del pos ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trends_del(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trends_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:trends_load filename trendname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trends_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trends_load_grd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    double arg2 ;
    double arg3 ;
    char *arg4 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"sdd|s:trends_load_grd filename D1 D2 trendname ",&arg1,&arg2,&arg3,&arg4) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trends_load_grd((char const *)arg1,arg2,arg3,(char const *)arg4);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trends_unload(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:trends_unload name ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trends_unload((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trends_at(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    surfit::trend *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:trends_at pos ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::trend *)surfit::trends_at(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__trend,0));
    return TCL_OK;
}

static int
_wrap_trends_first(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::trend *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":trends_first ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::trend *)surfit::trends_first();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__trend,0));
    return TCL_OK;
}

static int
_wrap_trends_last(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::trend *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":trends_last ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::trend *)surfit::trends_last();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__trend,0));
    return TCL_OK;
}

static int
_wrap_trends_size(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":trends_size ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::trends_size();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trends_info(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":trends_info ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::trends_info();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_defarea_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:defarea_load filename defname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::defarea_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_defarea_unload(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    if (SWIG_GetArgs(interp, objc, objv,":defarea_unload ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            surfit::defarea_unload();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    
    return TCL_OK;
}

static int
_wrap_defarea_save(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:defarea_save filename defname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::defarea_save((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_defarea_save_grd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:defarea_save_grd filename ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::defarea_save_grd((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_defarea_save_xyz(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:defarea_save_xyz filename ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::defarea_save_xyz((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_defarea_getValue(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double arg2 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"dd:defarea_getValue x y ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::defarea_getValue(arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_defarea_and(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::defarea *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:defarea_and def ",&arg1,SWIGTYPE_p_surfit__defarea) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::defarea_and(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_defarea_not(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::defarea *arg1 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"|p:defarea_not def ",&arg1,SWIGTYPE_p_surfit__defarea) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::defarea_not(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_defarea_or(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::defarea *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:defarea_or def ",&arg1,SWIGTYPE_p_surfit__defarea) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::defarea_or(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_defarea_xor(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::defarea *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:defarea_xor def ",&arg1,SWIGTYPE_p_surfit__defarea) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::defarea_xor(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_defarea_to_func(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":defarea_to_func ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::defarea_to_func();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_defarea_to_funcs(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":defarea_to_funcs ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::defarea_to_funcs();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_defarea_to_defareas(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":defarea_to_defareas ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::defarea_to_defareas();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_defarea_check(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":defarea_check ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::defarea_check();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_defarea_by_func(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":defarea_by_func ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::defarea_by_func();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_defarea_apply_to_func(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":defarea_apply_to_func ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::defarea_apply_to_func();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_defarea_name(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 = NULL ;
    surfit::defarea *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"|sp:defarea_name new_name def ",&arg1,&arg2,SWIGTYPE_p_surfit__defarea) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::defarea_name((char const *)arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_defareas_delall(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":defareas_delall ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::defareas_delall();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_defareas_del(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:defareas_del pos ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::defareas_del(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_defareas_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = 0 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:defareas_load filename defareaname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::defareas_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_defareas_load_grd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:defareas_load_grd filename defareaname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::defareas_load_grd((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_defareas_unload(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:defareas_unload name ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::defareas_unload((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_defareas_at(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    surfit::defarea *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:defareas_at pos ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::defarea *)surfit::defareas_at(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__defarea,0));
    return TCL_OK;
}

static int
_wrap_defareas_first(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::defarea *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":defareas_first ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::defarea *)surfit::defareas_first();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__defarea,0));
    return TCL_OK;
}

static int
_wrap_defareas_last(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::defarea *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":defareas_last ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::defarea *)surfit::defareas_last();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__defarea,0));
    return TCL_OK;
}

static int
_wrap_defareas_size(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":defareas_size ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::defareas_size();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_defareas_info(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":defareas_info ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::defareas_info();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_curv_read(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 ;
    int arg3 = 2 ;
    int arg4 = 1 ;
    int arg5 = 2 ;
    char *arg6 = " " ;
    int arg7 = 250 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ss|iiisi:curv_read filename curvname columns col1 col2 delimiter grow_by ",&arg1,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::curv_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_curv_write(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ss:curv_write filename delimiter ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::curv_write((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_curv_save(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:curv_save filename curvname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::curv_save((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_curv_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:curv_load filename curvname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::curv_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_curv_unload(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":curv_unload ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::curv_unload();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_curv_to_iso(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:curv_to_iso value ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::curv_to_iso(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_curv_to_isos(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:curv_to_isos value ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::curv_to_isos(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_curv_to_wiso(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double arg2 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"dd:curv_to_wiso value weight ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::curv_to_wiso(arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_curv_to_wisos(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double arg2 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"dd:curv_to_wisos value weight ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::curv_to_wisos(arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_curv_to_flt(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":curv_to_flt ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::curv_to_flt();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_curv_to_flts(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":curv_to_flts ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::curv_to_flts();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_curv_to_area(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:curv_to_area value ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::curv_to_area(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_curv_to_areas(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:curv_to_areas value ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::curv_to_areas(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_curv_to_warea(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double arg2 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"dd:curv_to_warea value weight ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::curv_to_warea(arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_curv_to_wareas(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double arg2 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"dd:curv_to_wareas value weight ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::curv_to_wareas(arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_curv_check(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":curv_check ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::curv_check();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_curv_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::curv *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:curv_set contour ",&arg1,SWIGTYPE_p_surfit__curv) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::curv_set(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_curv_name(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 = NULL ;
    surfit::curv *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"|sp:curv_name name crv ",&arg1,&arg2,SWIGTYPE_p_surfit__curv) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::curv_name((char const *)arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_curvs_delall(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":curvs_delall ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::curvs_delall();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_curvs_del(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:curvs_del pos ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::curvs_del(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_curvs_read(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    int arg3 = 2 ;
    int arg4 = 1 ;
    int arg5 = 2 ;
    char *arg6 = " " ;
    int arg7 = 250 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|siiisi:curvs_read filename curvname columns col1 col2 delimiter grow_by ",&arg1,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::curvs_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_curvs_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:curvs_load filename curvname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::curvs_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_curvs_at(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    surfit::curv *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:curvs_at pos ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::curv *)surfit::curvs_at(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__curv,0));
    return TCL_OK;
}

static int
_wrap_curvs_first(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::curv *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":curvs_first ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::curv *)surfit::curvs_first();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__curv,0));
    return TCL_OK;
}

static int
_wrap_curvs_last(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::curv *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":curvs_last ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::curv *)surfit::curvs_last();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__curv,0));
    return TCL_OK;
}

static int
_wrap_curvs_size(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":curvs_size ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::curvs_size();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_curvs_info(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":curvs_info ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::curvs_info();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_flt_read(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 ;
    int arg3 = 2 ;
    int arg4 = 1 ;
    int arg5 = 2 ;
    char *arg6 = " " ;
    int arg7 = 250 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ss|iiisi:flt_read filename fltname columns col1 col2 delimiter grow_by ",&arg1,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::flt_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_flt_write(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ss:flt_write filename delimiter ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::flt_write((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_flt_save(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:flt_save filename fltname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::flt_save((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_flt_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:flt_load filename fltname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::flt_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_flt_unload(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":flt_unload ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::flt_unload();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_flt_to_curv(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":flt_to_curv ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::flt_to_curv();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_flt_to_curvs(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":flt_to_curvs ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::flt_to_curvs();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_flt_to_grid_line(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":flt_to_grid_line ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::flt_to_grid_line();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_flt_to_flts(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":flt_to_flts ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::flt_to_flts();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_flt_check(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":flt_check ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::flt_check();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_flt_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::flt *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:flt_set fault ",&arg1,SWIGTYPE_p_surfit__flt) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::flt_set(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_flt_name(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 = NULL ;
    surfit::flt *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"|sp:flt_name new_name fault ",&arg1,&arg2,SWIGTYPE_p_surfit__flt) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::flt_name((char const *)arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_flts_delall(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":flts_delall ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::flts_delall();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_flts_del(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:flts_del pos ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::flts_del(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_flts_read(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 ;
    int arg3 = 2 ;
    int arg4 = 1 ;
    int arg5 = 2 ;
    char *arg6 = " " ;
    int arg7 = 250 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ss|iiisi:flts_read filename fltname columns col1 col2 delimiter grow_by ",&arg1,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::flts_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_flts_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:flts_load filename fltname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::flts_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_flts_at(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    surfit::flt *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:flts_at pos ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::flt *)surfit::flts_at(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__flt,0));
    return TCL_OK;
}

static int
_wrap_flts_first(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::flt *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":flts_first ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::flt *)surfit::flts_first();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__flt,0));
    return TCL_OK;
}

static int
_wrap_flts_last(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::flt *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":flts_last ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::flt *)surfit::flts_last();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__flt,0));
    return TCL_OK;
}

static int
_wrap_flts_size(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":flts_size ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::flts_size();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_flts_info(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":flts_info ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::flts_info();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_iso_read(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 ;
    double arg3 ;
    int arg4 = 2 ;
    int arg5 = 1 ;
    int arg6 = 2 ;
    char *arg7 = " " ;
    int arg8 = 250 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ssd|iiisi:iso_read filename isoname value columns col1 col2 delimiter grow_by ",&arg1,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7,&arg8) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::iso_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_iso_write(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ss:iso_write filename delimiter ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::iso_write((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_iso_save(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:iso_save filename isoname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::iso_save((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_iso_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:iso_load filename isoname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::iso_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_iso_unload(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":iso_unload ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::iso_unload();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_iso_to_wiso(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:iso_to_wiso weight ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::iso_to_wiso(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_iso_to_wisos(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:iso_to_wisos weight ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::iso_to_wisos(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_iso_to_curv(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":iso_to_curv ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::iso_to_curv();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_iso_to_curvs(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":iso_to_curvs ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::iso_to_curvs();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_iso_to_isos(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":iso_to_isos ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::iso_to_isos();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_iso_check(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":iso_check ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::iso_check();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_iso_value(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:iso_value value ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::iso_value(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_iso_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::iso *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:iso_set isoline ",&arg1,SWIGTYPE_p_surfit__iso) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::iso_set(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_iso_name(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 = NULL ;
    surfit::iso *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"|sp:iso_name new_name isoline ",&arg1,&arg2,SWIGTYPE_p_surfit__iso) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::iso_name((char const *)arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_isos_delall(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":isos_delall ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::isos_delall();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_isos_del(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:isos_del pos ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::isos_del(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_isos_read(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 ;
    double arg3 ;
    int arg4 = 2 ;
    int arg5 = 1 ;
    int arg6 = 2 ;
    char *arg7 = " " ;
    int arg8 = 250 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ssd|iiisi:isos_read filename isoname value columns col1 col2 delimiter grow_by ",&arg1,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7,&arg8) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::isos_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_isos_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:isos_load filename isoname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::isos_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_isos_at(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    surfit::iso *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:isos_at pos ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::iso *)surfit::isos_at(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__iso,0));
    return TCL_OK;
}

static int
_wrap_isos_first(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::iso *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":isos_first ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::iso *)surfit::isos_first();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__iso,0));
    return TCL_OK;
}

static int
_wrap_isos_last(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::iso *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":isos_last ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::iso *)surfit::isos_last();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__iso,0));
    return TCL_OK;
}

static int
_wrap_isos_size(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":isos_size ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::isos_size();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_isos_info(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":isos_info ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::isos_info();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wiso_read(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 ;
    double arg3 ;
    double arg4 ;
    int arg5 = 2 ;
    int arg6 = 1 ;
    int arg7 = 2 ;
    char *arg8 = " " ;
    int arg9 = 250 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ssdd|iiisi:wiso_read filename isoname value weight columns col1 col2 delimiter grow_by ",&arg1,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7,&arg8,&arg9) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wiso_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8,arg9);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wiso_write(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ss:wiso_write filename delimiter ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wiso_write((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wiso_save(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:wiso_save filename isoname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wiso_save((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wiso_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:wiso_load filename isoname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wiso_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wiso_unload(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wiso_unload ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wiso_unload();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wiso_to_iso(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wiso_to_iso ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wiso_to_iso();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wiso_to_isos(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wiso_to_isos ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wiso_to_isos();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wiso_to_curv(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wiso_to_curv ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wiso_to_curv();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wiso_to_curvs(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wiso_to_curvs ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wiso_to_curvs();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wiso_to_wisos(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wiso_to_wisos ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wiso_to_wisos();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wiso_check(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wiso_check ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wiso_check();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wiso_value(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:wiso_value value ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wiso_value(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wiso_weight(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:wiso_weight weight ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wiso_weight(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wiso_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::wiso *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:wiso_set wisoline ",&arg1,SWIGTYPE_p_surfit__wiso) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wiso_set(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wiso_name(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 = NULL ;
    surfit::wiso *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"|sp:wiso_name name wisoline ",&arg1,&arg2,SWIGTYPE_p_surfit__wiso) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wiso_name((char const *)arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wisos_delall(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wisos_delall ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wisos_delall();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wisos_del(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:wisos_del pos ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wisos_del(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wisos_read(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 ;
    double arg3 ;
    double arg4 ;
    int arg5 = 2 ;
    int arg6 = 1 ;
    int arg7 = 2 ;
    char *arg8 = " " ;
    int arg9 = 250 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ssdd|iiisi:wisos_read filename wisoname value weight columns col1 col2 delimiter grow_by ",&arg1,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7,&arg8,&arg9) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wisos_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8,arg9);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wisos_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:wisos_load filename wisoname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wisos_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wisos_at(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    surfit::wiso *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:wisos_at pos ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::wiso *)surfit::wisos_at(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__wiso,0));
    return TCL_OK;
}

static int
_wrap_wisos_first(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::wiso *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wisos_first ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::wiso *)surfit::wisos_first();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__wiso,0));
    return TCL_OK;
}

static int
_wrap_wisos_last(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::wiso *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wisos_last ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::wiso *)surfit::wisos_last();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__wiso,0));
    return TCL_OK;
}

static int
_wrap_wisos_size(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wisos_size ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::wisos_size();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wisos_info(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wisos_info ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::wisos_info();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_area_read(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 ;
    double arg3 = surfit::undef_value ;
    int arg4 = 2 ;
    int arg5 = 1 ;
    int arg6 = 2 ;
    char *arg7 = " " ;
    int arg8 = 250 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ss|diiisi:area_read filename areaname value columns col1 col2 delimiter grow_by ",&arg1,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7,&arg8) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::area_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_area_write(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = " " ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:area_write filename delimiter ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::area_write((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_area_save(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:area_save filename areaname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::area_save((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_area_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:area_load filename areaname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::area_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_area_unload(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":area_unload ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::area_unload();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_area_to_curv(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":area_to_curv ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::area_to_curv();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_area_to_curvs(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":area_to_curvs ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::area_to_curvs();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_area_to_areas(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":area_to_areas ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::area_to_areas();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_area_check(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":area_check ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::area_check();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_area_value(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:area_value value ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::area_value(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_area_value_undef(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":area_value_undef ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::area_value_undef();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_area_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::area *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:area_set arealine ",&arg1,SWIGTYPE_p_surfit__area) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::area_set(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_area_name(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 = NULL ;
    surfit::area *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"|sp:area_name new_name arealine ",&arg1,&arg2,SWIGTYPE_p_surfit__area) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::area_name((char const *)arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_areas_delall(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":areas_delall ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::areas_delall();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_areas_del(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:areas_del pos ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::areas_del(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_areas_read(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 ;
    double arg3 = surfit::undef_value ;
    int arg4 = 2 ;
    int arg5 = 1 ;
    int arg6 = 2 ;
    char *arg7 = " " ;
    int arg8 = 250 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ss|diiisi:areas_read filename areaname value columns col1 col2 delimiter grow_by ",&arg1,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7,&arg8) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::areas_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_areas_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:areas_load filename areaname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::areas_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_areas_at(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    surfit::area *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:areas_at pos ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::area *)surfit::areas_at(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__area,0));
    return TCL_OK;
}

static int
_wrap_areas_first(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::area *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":areas_first ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::area *)surfit::areas_first();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__area,0));
    return TCL_OK;
}

static int
_wrap_areas_last(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::area *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":areas_last ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::area *)surfit::areas_last();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__area,0));
    return TCL_OK;
}

static int
_wrap_areas_size(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":areas_size ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::areas_size();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_areas_info(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":areas_info ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::areas_info();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_warea_read(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 ;
    double arg3 ;
    double arg4 ;
    int arg5 = 2 ;
    int arg6 = 1 ;
    int arg7 = 2 ;
    char *arg8 = " " ;
    int arg9 = 250 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ssdd|iiisi:warea_read filename wareaname value weight columns col1 col2 delimiter grow_by ",&arg1,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7,&arg8,&arg9) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::warea_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8,arg9);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_warea_write(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ss:warea_write filename delimiter ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::warea_write((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_warea_save(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:warea_save filename wareaname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::warea_save((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_warea_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:warea_load filename wareaname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::warea_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_warea_unload(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":warea_unload ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::warea_unload();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_warea_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::warea *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:warea_set warealine ",&arg1,SWIGTYPE_p_surfit__warea) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::warea_set(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_warea_name(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 = NULL ;
    surfit::warea *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"|sp:warea_name new_name warealine ",&arg1,&arg2,SWIGTYPE_p_surfit__warea) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::warea_name((char const *)arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_warea_to_area(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":warea_to_area ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::warea_to_area();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_warea_to_areas(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":warea_to_areas ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::warea_to_areas();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_warea_to_curv(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":warea_to_curv ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::warea_to_curv();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_warea_to_curvs(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":warea_to_curvs ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::warea_to_curvs();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_warea_to_wareas(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":warea_to_wareas ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::warea_to_wareas();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_warea_check(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":warea_check ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::warea_check();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_warea_value(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:warea_value value ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::warea_value(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_warea_weight(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:warea_weight weight ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::warea_weight(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wareas_delall(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wareas_delall ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wareas_delall();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wareas_del(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:wareas_del pos ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wareas_del(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wareas_read(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 ;
    double arg3 ;
    double arg4 ;
    int arg5 = 2 ;
    int arg6 = 1 ;
    int arg7 = 2 ;
    char *arg8 = " " ;
    int arg9 = 250 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ssdd|iiisi:wareas_read filename wareaname value weight columns col1 col2 delimiter grow_by ",&arg1,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7,&arg8,&arg9) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wareas_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8,arg9);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wareas_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:wareas_load filename wareaname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wareas_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wareas_at(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    surfit::warea *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:wareas_at pos ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::warea *)surfit::wareas_at(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__warea,0));
    return TCL_OK;
}

static int
_wrap_wareas_first(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::warea *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wareas_first ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::warea *)surfit::wareas_first();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__warea,0));
    return TCL_OK;
}

static int
_wrap_wareas_last(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::warea *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wareas_last ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::warea *)surfit::wareas_last();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__warea,0));
    return TCL_OK;
}

static int
_wrap_wareas_size(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wareas_size ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::wareas_size();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wareas_info(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wareas_info ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::wareas_info();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_cntr_read(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 ;
    int arg3 = 3 ;
    int arg4 = 1 ;
    int arg5 = 2 ;
    int arg6 = 3 ;
    char *arg7 = " " ;
    int arg8 = 250 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ss|iiiisi:cntr_read filename cntrname columns col1 col2 col3 delimiter grow_by ",&arg1,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7,&arg8) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::cntr_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_cntr_write(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ss:cntr_write filename delimiter ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::cntr_write((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_cntr_save(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:cntr_save filename cntrname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::cntr_save((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_cntr_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:cntr_load filename cntrname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::cntr_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_cntr_unload(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":cntr_unload ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::cntr_unload();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_cntr_plus_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:cntr_plus_real value ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::cntr_plus_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_cntr_minus_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:cntr_minus_real value ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::cntr_minus_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_cntr_mult_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:cntr_mult_real value ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::cntr_mult_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_cntr_div_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:cntr_div_real value ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::cntr_div_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_cntr_to_wcntr(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:cntr_to_wcntr weight ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::cntr_to_wcntr(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_cntr_to_wcntrs(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:cntr_to_wcntrs weight ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::cntr_to_wcntrs(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_cntr_to_curv(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":cntr_to_curv ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::cntr_to_curv();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_cntr_to_curvs(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":cntr_to_curvs ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::cntr_to_curvs();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_cntr_to_cntrs(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":cntr_to_cntrs ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::cntr_to_cntrs();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_cntr_check(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":cntr_check ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::cntr_check();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_cntr_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::cntr *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:cntr_set contour ",&arg1,SWIGTYPE_p_surfit__cntr) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::cntr_set(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_cntr_name(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 = NULL ;
    surfit::cntr *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"|sp:cntr_name new_name contour ",&arg1,&arg2,SWIGTYPE_p_surfit__cntr) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::cntr_name((char const *)arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_cntrs_delall(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":cntrs_delall ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::cntrs_delall();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_cntrs_del(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:cntrs_del pos ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::cntrs_del(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_cntrs_read(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 ;
    int arg3 = 3 ;
    int arg4 = 1 ;
    int arg5 = 2 ;
    int arg6 = 3 ;
    char *arg7 = " " ;
    int arg8 = 250 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ss|iiiisi:cntrs_read filename cntrname columns col1 col2 col3 delimiter grow_by ",&arg1,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7,&arg8) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::cntrs_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,(char const *)arg7,arg8);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_cntrs_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:cntrs_load filename cntrname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::cntrs_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_cntrs_at(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    surfit::cntr *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:cntrs_at pos ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::cntr *)surfit::cntrs_at(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__cntr,0));
    return TCL_OK;
}

static int
_wrap_cntrs_first(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::cntr *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":cntrs_first ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::cntr *)surfit::cntrs_first();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__cntr,0));
    return TCL_OK;
}

static int
_wrap_cntrs_last(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::cntr *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":cntrs_last ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::cntr *)surfit::cntrs_last();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__cntr,0));
    return TCL_OK;
}

static int
_wrap_cntrs_size(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":cntrs_size ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::cntrs_size();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_cntrs_info(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":cntrs_info ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::cntrs_info();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_cntrs_to_wcntrs(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:cntrs_to_wcntrs weight ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::cntrs_to_wcntrs(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wcntr_read(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 ;
    double arg3 ;
    int arg4 = 3 ;
    int arg5 = 1 ;
    int arg6 = 2 ;
    int arg7 = 3 ;
    char *arg8 = " " ;
    int arg9 = 250 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ssd|iiiisi:wcntr_read filename cntrname weight columns col1 col2 col3 delimiter grow_by ",&arg1,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7,&arg8,&arg9) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wcntr_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8,arg9);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wcntr_write(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ss:wcntr_write filename delimiter ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wcntr_write((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wcntr_save(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:wcntr_save filename cntrname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wcntr_save((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wcntr_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:wcntr_load filename cntrname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wcntr_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wcntr_unload(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wcntr_unload ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wcntr_unload();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wcntr_plus_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:wcntr_plus_real value ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wcntr_plus_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wcntr_minus_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:wcntr_minus_real value ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wcntr_minus_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wcntr_mult_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:wcntr_mult_real value ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wcntr_mult_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wcntr_div_real(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"d:wcntr_div_real value ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wcntr_div_real(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wcntr_to_cntr(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wcntr_to_cntr ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wcntr_to_cntr();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wcntr_to_cntrs(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wcntr_to_cntrs ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wcntr_to_cntrs();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wcntr_to_curv(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wcntr_to_curv ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wcntr_to_curv();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wcntr_to_curvs(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wcntr_to_curvs ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wcntr_to_curvs();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wcntr_to_wcntrs(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wcntr_to_wcntrs ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wcntr_to_wcntrs();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wcntr_check(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wcntr_check ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wcntr_check();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wcntr_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::wcntr *arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"p:wcntr_set wcontour ",&arg1,SWIGTYPE_p_surfit__wcntr) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wcntr_set(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wcntr_name(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 = NULL ;
    surfit::wcntr *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"|sp:wcntr_name new_name wcontour ",&arg1,&arg2,SWIGTYPE_p_surfit__wcntr) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wcntr_name((char const *)arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wcntrs_delall(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wcntrs_delall ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wcntrs_delall();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wcntrs_del(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:wcntrs_del pos ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wcntrs_del(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wcntrs_read(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 ;
    double arg3 ;
    int arg4 = 3 ;
    int arg5 = 1 ;
    int arg6 = 2 ;
    int arg7 = 3 ;
    char *arg8 = " " ;
    int arg9 = 250 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"ssd|iiiisi:wcntrs_read filename cntrname weight columns col1 col2 col3 delimiter grow_by ",&arg1,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7,&arg8,&arg9) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wcntrs_read((char const *)arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8,arg9);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wcntrs_load(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:wcntrs_load filename cntrname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::wcntrs_load((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wcntrs_at(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    surfit::wcntr *result;
    
    if (SWIG_GetArgs(interp, objc, objv,"i:wcntrs_at pos ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::wcntr *)surfit::wcntrs_at(arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__wcntr,0));
    return TCL_OK;
}

static int
_wrap_wcntrs_first(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::wcntr *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wcntrs_first ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::wcntr *)surfit::wcntrs_first();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__wcntr,0));
    return TCL_OK;
}

static int
_wrap_wcntrs_last(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    surfit::wcntr *result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wcntrs_last ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (surfit::wcntr *)surfit::wcntrs_last();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,SWIG_NewPointerObj((void *) result, SWIGTYPE_p_surfit__wcntr,0));
    return TCL_OK;
}

static int
_wrap_wcntrs_size(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wcntrs_size ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::wcntrs_size();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_wcntrs_info(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int result;
    
    if (SWIG_GetArgs(interp, objc, objv,":wcntrs_info ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (int)surfit::wcntrs_info();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_grid_line_check(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":grid_line_check ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::grid_line_check();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_grid_line_write(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = " " ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:grid_line_write filename delimiter ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::grid_line_write((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_grid_line_save(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    char *arg2 = NULL ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"s|s:grid_line_save filename grid_linename ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::grid_line_save((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_grid_line_unload(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":grid_line_unload ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::grid_line_unload();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_trace_grid_line(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,":trace_grid_line ") == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::trace_grid_line();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static int
_wrap_grid_line_fill_true(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    double arg1 ;
    double arg2 ;
    bool result;
    
    if (SWIG_GetArgs(interp, objc, objv,"dd:grid_line_fill_true x y ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        try {
            result = (bool)surfit::grid_line_fill_true(arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
    }
    Tcl_SetObjResult(interp,Tcl_NewIntObj((long) result));
    return TCL_OK;
}

static char *_wrap_bg_color_red_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::bg_color_red);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_bg_color_red_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::bg_color_red = (int) temp;
    }
    return NULL;
}


static char *_wrap_bg_color_green_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::bg_color_green);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_bg_color_green_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::bg_color_green = (int) temp;
    }
    return NULL;
}


static char *_wrap_bg_color_blue_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::bg_color_blue);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_bg_color_blue_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::bg_color_blue = (int) temp;
    }
    return NULL;
}


static char *_wrap_bg_color_alpha_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::bg_color_alpha);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_bg_color_alpha_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::bg_color_alpha = (int) temp;
    }
    return NULL;
}


static char *_wrap_task_color_red_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::task_color_red);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_task_color_red_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::task_color_red = (int) temp;
    }
    return NULL;
}


static char *_wrap_task_color_green_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::task_color_green);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_task_color_green_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::task_color_green = (int) temp;
    }
    return NULL;
}


static char *_wrap_task_color_blue_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::task_color_blue);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_task_color_blue_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::task_color_blue = (int) temp;
    }
    return NULL;
}


static char *_wrap_task_color_alpha_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::task_color_alpha);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_task_color_alpha_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::task_color_alpha = (int) temp;
    }
    return NULL;
}


static char *_wrap_wtask_color_red_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::wtask_color_red);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_wtask_color_red_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::wtask_color_red = (int) temp;
    }
    return NULL;
}


static char *_wrap_wtask_color_green_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::wtask_color_green);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_wtask_color_green_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::wtask_color_green = (int) temp;
    }
    return NULL;
}


static char *_wrap_wtask_color_blue_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::wtask_color_blue);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_wtask_color_blue_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::wtask_color_blue = (int) temp;
    }
    return NULL;
}


static char *_wrap_wtask_color_alpha_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::wtask_color_alpha);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_wtask_color_alpha_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::wtask_color_alpha = (int) temp;
    }
    return NULL;
}


static char *_wrap_iso_color_red_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::iso_color_red);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_iso_color_red_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::iso_color_red = (int) temp;
    }
    return NULL;
}


static char *_wrap_iso_color_green_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::iso_color_green);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_iso_color_green_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::iso_color_green = (int) temp;
    }
    return NULL;
}


static char *_wrap_iso_color_blue_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::iso_color_blue);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_iso_color_blue_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::iso_color_blue = (int) temp;
    }
    return NULL;
}


static char *_wrap_iso_color_alpha_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::iso_color_alpha);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_iso_color_alpha_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::iso_color_alpha = (int) temp;
    }
    return NULL;
}


static char *_wrap_curv_color_red_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::curv_color_red);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_curv_color_red_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::curv_color_red = (int) temp;
    }
    return NULL;
}


static char *_wrap_curv_color_green_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::curv_color_green);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_curv_color_green_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::curv_color_green = (int) temp;
    }
    return NULL;
}


static char *_wrap_curv_color_blue_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::curv_color_blue);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_curv_color_blue_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::curv_color_blue = (int) temp;
    }
    return NULL;
}


static char *_wrap_curv_color_alpha_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::curv_color_alpha);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_curv_color_alpha_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::curv_color_alpha = (int) temp;
    }
    return NULL;
}


static char *_wrap_flt_color_red_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::flt_color_red);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_flt_color_red_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::flt_color_red = (int) temp;
    }
    return NULL;
}


static char *_wrap_flt_color_green_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::flt_color_green);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_flt_color_green_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::flt_color_green = (int) temp;
    }
    return NULL;
}


static char *_wrap_flt_color_blue_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::flt_color_blue);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_flt_color_blue_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::flt_color_blue = (int) temp;
    }
    return NULL;
}


static char *_wrap_flt_color_alpha_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::flt_color_alpha);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_flt_color_alpha_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::flt_color_alpha = (int) temp;
    }
    return NULL;
}


static char *_wrap_warea_color_red_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::warea_color_red);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_warea_color_red_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::warea_color_red = (int) temp;
    }
    return NULL;
}


static char *_wrap_warea_color_green_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::warea_color_green);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_warea_color_green_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::warea_color_green = (int) temp;
    }
    return NULL;
}


static char *_wrap_warea_color_blue_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::warea_color_blue);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_warea_color_blue_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::warea_color_blue = (int) temp;
    }
    return NULL;
}


static char *_wrap_warea_color_alpha_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::warea_color_alpha);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_warea_color_alpha_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::warea_color_alpha = (int) temp;
    }
    return NULL;
}


static char *_wrap_area_color_red_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::area_color_red);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_area_color_red_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::area_color_red = (int) temp;
    }
    return NULL;
}


static char *_wrap_area_color_green_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::area_color_green);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_area_color_green_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::area_color_green = (int) temp;
    }
    return NULL;
}


static char *_wrap_area_color_blue_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::area_color_blue);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_area_color_blue_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::area_color_blue = (int) temp;
    }
    return NULL;
}


static char *_wrap_area_color_alpha_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::area_color_alpha);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_area_color_alpha_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::area_color_alpha = (int) temp;
    }
    return NULL;
}


static char *_wrap_grid_amount_x_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::grid_amount_x);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_grid_amount_x_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::grid_amount_x = (int) temp;
    }
    return NULL;
}


static char *_wrap_grid_amount_y_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::grid_amount_y);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_grid_amount_y_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::grid_amount_y = (int) temp;
    }
    return NULL;
}


static char *_wrap_grid_amount_z_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::grid_amount_z);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_grid_amount_z_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::grid_amount_z = (int) temp;
    }
    return NULL;
}


static char *_wrap_x_shift_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewDoubleObj((double) surfit::x_shift);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_x_shift_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        double temp;
        if (Tcl_GetDoubleFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected a double.";
        }
        surfit::x_shift = (float) temp;
    }
    return NULL;
}


static char *_wrap_y_shift_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewDoubleObj((double) surfit::y_shift);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_y_shift_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        double temp;
        if (Tcl_GetDoubleFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected a double.";
        }
        surfit::y_shift = (float) temp;
    }
    return NULL;
}


static char *_wrap_scale_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewDoubleObj((double) surfit::scale);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_scale_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        double temp;
        if (Tcl_GetDoubleFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected a double.";
        }
        surfit::scale = (float) temp;
    }
    return NULL;
}


static char *_wrap_z_scale_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewDoubleObj((double) surfit::z_scale);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_z_scale_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        double temp;
        if (Tcl_GetDoubleFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected a double.";
        }
        surfit::z_scale = (float) temp;
    }
    return NULL;
}


static char *_wrap_axis_labels_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::axis_labels);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_axis_labels_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::axis_labels = (int) temp;
    }
    return NULL;
}


static char *_wrap_point_size_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::point_size);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_point_size_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::point_size = (int) temp;
    }
    return NULL;
}


static char *_wrap_isoline_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::isoline);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_isoline_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::isoline = (int) temp;
    }
    return NULL;
}


static char *_wrap_draw_task_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::draw_task);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_draw_task_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::draw_task = (int) temp;
    }
    return NULL;
}


static char *_wrap_draw_wtask_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::draw_wtask);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_draw_wtask_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::draw_wtask = (int) temp;
    }
    return NULL;
}


static char *_wrap_draw_func_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::draw_func);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_draw_func_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::draw_func = (int) temp;
    }
    return NULL;
}


static char *_wrap_draw_wfunc_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::draw_wfunc);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_draw_wfunc_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::draw_wfunc = (int) temp;
    }
    return NULL;
}


static char *_wrap_draw_trend_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::draw_trend);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_draw_trend_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::draw_trend = (int) temp;
    }
    return NULL;
}


static char *_wrap_draw_iso_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::draw_iso);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_draw_iso_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::draw_iso = (int) temp;
    }
    return NULL;
}


static char *_wrap_draw_curv_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::draw_curv);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_draw_curv_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::draw_curv = (int) temp;
    }
    return NULL;
}


static char *_wrap_draw_wiso_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::draw_wiso);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_draw_wiso_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::draw_wiso = (int) temp;
    }
    return NULL;
}


static char *_wrap_draw_cntr_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::draw_cntr);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_draw_cntr_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::draw_cntr = (int) temp;
    }
    return NULL;
}


static char *_wrap_draw_pcntr_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::draw_pcntr);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_draw_pcntr_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::draw_pcntr = (int) temp;
    }
    return NULL;
}


static char *_wrap_draw_wcntr_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::draw_wcntr);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_draw_wcntr_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::draw_wcntr = (int) temp;
    }
    return NULL;
}


static char *_wrap_draw_area_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::draw_area);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_draw_area_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::draw_area = (int) temp;
    }
    return NULL;
}


static char *_wrap_draw_warea_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::draw_warea);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_draw_warea_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::draw_warea = (int) temp;
    }
    return NULL;
}


static char *_wrap_draw_parea_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::draw_parea);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_draw_parea_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::draw_parea = (int) temp;
    }
    return NULL;
}


static char *_wrap_draw_flt_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::draw_flt);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_draw_flt_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::draw_flt = (int) temp;
    }
    return NULL;
}


static char *_wrap_draw_grid_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::draw_grid);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_draw_grid_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::draw_grid = (int) temp;
    }
    return NULL;
}


static char *_wrap_draw_defarea_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::draw_defarea);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_draw_defarea_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::draw_defarea = (int) temp;
    }
    return NULL;
}


static char *_wrap_light_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::light);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_light_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::light = (int) temp;
    }
    return NULL;
}


static char *_wrap_smooth_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::smooth);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_smooth_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::smooth = (int) temp;
    }
    return NULL;
}


static char *_wrap_fix_axes_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::fix_axes);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_fix_axes_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::fix_axes = (int) temp;
    }
    return NULL;
}


static char *_wrap_minx_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewDoubleObj((double) surfit::minx);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_minx_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        double temp;
        if (Tcl_GetDoubleFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected a double.";
        }
        surfit::minx = (double) temp;
    }
    return NULL;
}


static char *_wrap_maxx_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewDoubleObj((double) surfit::maxx);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_maxx_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        double temp;
        if (Tcl_GetDoubleFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected a double.";
        }
        surfit::maxx = (double) temp;
    }
    return NULL;
}


static char *_wrap_miny_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewDoubleObj((double) surfit::miny);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_miny_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        double temp;
        if (Tcl_GetDoubleFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected a double.";
        }
        surfit::miny = (double) temp;
    }
    return NULL;
}


static char *_wrap_maxy_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewDoubleObj((double) surfit::maxy);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_maxy_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        double temp;
        if (Tcl_GetDoubleFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected a double.";
        }
        surfit::maxy = (double) temp;
    }
    return NULL;
}


static char *_wrap_minz_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewDoubleObj((double) surfit::minz);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_minz_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        double temp;
        if (Tcl_GetDoubleFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected a double.";
        }
        surfit::minz = (double) temp;
    }
    return NULL;
}


static char *_wrap_maxz_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewDoubleObj((double) surfit::maxz);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_maxz_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        double temp;
        if (Tcl_GetDoubleFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected a double.";
        }
        surfit::maxz = (double) temp;
    }
    return NULL;
}


static char *_wrap_show_x_from_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewDoubleObj((double) surfit::show_x_from);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_show_x_from_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        double temp;
        if (Tcl_GetDoubleFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected a double.";
        }
        surfit::show_x_from = (float) temp;
    }
    return NULL;
}


static char *_wrap_show_x_to_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewDoubleObj((double) surfit::show_x_to);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_show_x_to_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        double temp;
        if (Tcl_GetDoubleFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected a double.";
        }
        surfit::show_x_to = (float) temp;
    }
    return NULL;
}


static char *_wrap_show_y_from_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewDoubleObj((double) surfit::show_y_from);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_show_y_from_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        double temp;
        if (Tcl_GetDoubleFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected a double.";
        }
        surfit::show_y_from = (float) temp;
    }
    return NULL;
}


static char *_wrap_show_y_to_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewDoubleObj((double) surfit::show_y_to);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_show_y_to_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        double temp;
        if (Tcl_GetDoubleFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected a double.";
        }
        surfit::show_y_to = (float) temp;
    }
    return NULL;
}


static char *_wrap_show_in_area_get(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    
    value = Tcl_NewIntObj((long) surfit::show_in_area);
    if (value) {
        Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
        Tcl_DecrRefCount(value);
    }
    return NULL;
}


static char *_wrap_show_in_area_set(ClientData clientData, Tcl_Interp *interp, char *name1, char *name2, int flags) {
    Tcl_Obj *value = 0;
    Tcl_Obj *name1o = 0;
    
    name1o = Tcl_NewStringObj(name1,-1);
    value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
    Tcl_DecrRefCount(name1o);
    if (!value) return NULL;
    {
        long temp;
        if (Tcl_GetLongFromObj(interp, value, &temp) != TCL_OK) {
            return (char*) "Type error. expected an integer";
        }
        surfit::show_in_area = (int) temp;
    }
    return NULL;
}


static int
_wrap_bg_color(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:bg_color color_name ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::bg_color((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}

static int
_wrap_task_color(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:task_color color_name ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::task_color((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}

static int
_wrap_wtask_color(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:wtask_color color_name ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::wtask_color((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}

static int
_wrap_flt_color(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:flt_color color_name ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::flt_color((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}

static int
_wrap_iso_color(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:iso_color color_name ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::iso_color((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}

static int
_wrap_wiso_color(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:wiso_color color_name ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::wiso_color((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}

static int
_wrap_init(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    int arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ii:init w h ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::init(arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}

static int
_wrap_draw(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    int arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ii:draw w h ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::draw(arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}

static int
_wrap_draw_obj(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    int arg2 ;
    char *arg3 ;
    char *arg4 = NULL ;
    
    if (SWIG_GetArgs(interp, objc, objv,"iis|s:draw_obj w h obj_name name ",&arg1,&arg2,&arg3,&arg4) == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::draw_obj(arg1,arg2,(char const *)arg3,(char const *)arg4);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}

static int
_wrap_cleanup(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    if (SWIG_GetArgs(interp, objc, objv,":cleanup ") == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::cleanup();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}

static int
_wrap_moving(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    int arg2 ;
    float arg3 ;
    float arg4 ;
    int arg5 ;
    int arg6 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"iiffii:moving beginx beginy x y W H ",&arg1,&arg2,&arg3,&arg4,&arg5,&arg6) == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::moving(arg1,arg2,arg3,arg4,arg5,arg6);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}

static int
_wrap_init_quat(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    if (SWIG_GetArgs(interp, objc, objv,":init_quat ") == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::init_quat();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}

static int
_wrap_get_selection_from_screen(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    int arg1 ;
    int arg2 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"ii:get_selection_from_screen W H ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::get_selection_from_screen(arg1,arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}

static int
_wrap_draw_minz(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    float result;
    
    if (SWIG_GetArgs(interp, objc, objv,":draw_minz ") == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            result = (float)surfit::draw_minz();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_draw_maxz(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    float result;
    
    if (SWIG_GetArgs(interp, objc, objv,":draw_maxz ") == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            result = (float)surfit::draw_maxz();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    Tcl_SetObjResult(interp,Tcl_NewDoubleObj((double) result));
    return TCL_OK;
}

static int
_wrap_grid_show(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 = NULL ;
    char *arg2 = NULL ;
    
    if (SWIG_GetArgs(interp, objc, objv,"|ss:grid_show filename gridname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::grid_show((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}

static int
_wrap_task_show(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 = NULL ;
    char *arg2 = NULL ;
    
    if (SWIG_GetArgs(interp, objc, objv,"|ss:task_show filename taskname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::task_show((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}

static int
_wrap_wtask_show(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 = NULL ;
    char *arg2 = NULL ;
    
    if (SWIG_GetArgs(interp, objc, objv,"|ss:wtask_show filename taskname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::wtask_show((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}

static int
_wrap_func_show(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 = NULL ;
    char *arg2 = NULL ;
    
    if (SWIG_GetArgs(interp, objc, objv,"|ss:func_show filename funcname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::func_show((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}

static int
_wrap_wfunc_show(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 = NULL ;
    char *arg2 = NULL ;
    
    if (SWIG_GetArgs(interp, objc, objv,"|ss:wfunc_show filename funcname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::wfunc_show((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}

static int
_wrap_trend_show(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 = NULL ;
    char *arg2 = NULL ;
    
    if (SWIG_GetArgs(interp, objc, objv,"|ss:trend_show filename funcname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::trend_show((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}

static int
_wrap_defarea_show(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 = NULL ;
    char *arg2 = NULL ;
    
    if (SWIG_GetArgs(interp, objc, objv,"|ss:defarea_show filename funcname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::defarea_show((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}

static int
_wrap_iso_show(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 = NULL ;
    char *arg2 = NULL ;
    
    if (SWIG_GetArgs(interp, objc, objv,"|ss:iso_show filename isoname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::iso_show((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}

static int
_wrap_wiso_show(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 = NULL ;
    char *arg2 = NULL ;
    
    if (SWIG_GetArgs(interp, objc, objv,"|ss:wiso_show filename isoname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::wiso_show((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}

static int
_wrap_curv_show(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 = NULL ;
    char *arg2 = NULL ;
    
    if (SWIG_GetArgs(interp, objc, objv,"|ss:curv_show filename curvname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::curv_show((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}

static int
_wrap_flt_show(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    float arg1 ;
    char *arg2 = NULL ;
    char *arg3 = NULL ;
    
    if (SWIG_GetArgs(interp, objc, objv,"f|ss:flt_show value filename fltname ",&arg1,&arg2,&arg3) == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::flt_show(arg1,(char const *)arg2,(char const *)arg3);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}

static int
_wrap_warea_show(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 = NULL ;
    char *arg2 = NULL ;
    
    if (SWIG_GetArgs(interp, objc, objv,"|ss:warea_show filename wareaname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::warea_show((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}

static int
_wrap_cntr_show(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 = NULL ;
    char *arg2 = NULL ;
    
    if (SWIG_GetArgs(interp, objc, objv,"|ss:cntr_show filename wareaname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::cntr_show((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}

static int
_wrap_wcntr_show(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 = NULL ;
    char *arg2 = NULL ;
    
    if (SWIG_GetArgs(interp, objc, objv,"|ss:wcntr_show filename wareaname ",&arg1,&arg2) == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::wcntr_show((char const *)arg1,(char const *)arg2);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}

static int
_wrap_mem_show(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    if (SWIG_GetArgs(interp, objc, objv,":mem_show ") == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::mem_show();
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}

static int
_wrap_file_show(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    char *arg1 ;
    
    if (SWIG_GetArgs(interp, objc, objv,"s:file_show filename ",&arg1) == TCL_ERROR) return TCL_ERROR;
    {
        #ifdef HAVE_GL_WORKS
        try {
            surfit::file_show((char const *)arg1);
            
        }
        catch(...) {
            return TCL_ERROR;
        }
        #else
        return TCL_ERROR;
        #endif
    }
    
    return TCL_OK;
}


static swig_command_info swig_commands[] = {
    { SWIG_prefix "rw_mode_set", (swig_wrapper_func) _wrap_rw_mode_set, NULL},
    { SWIG_prefix "rw_mode_get", (swig_wrapper_func) _wrap_rw_mode_get, NULL},
    { SWIG_prefix "clear_data", (swig_wrapper_func) _wrap_clear_data, NULL},
    { SWIG_prefix "mem_info", (swig_wrapper_func) _wrap_mem_info, NULL},
    { SWIG_prefix "putlog", (swig_wrapper_func) _wrap_putlog, NULL},
    { SWIG_prefix "set_color_scale", (swig_wrapper_func) _wrap_set_color_scale, NULL},
    { SWIG_prefix "set_default_color_scale", (swig_wrapper_func) _wrap_set_default_color_scale, NULL},
    { SWIG_prefix "file_load", (swig_wrapper_func) _wrap_file_load, NULL},
    { SWIG_prefix "file_save", (swig_wrapper_func) _wrap_file_save, NULL},
    { SWIG_prefix "completer_set", (swig_wrapper_func) _wrap_completer_set, NULL},
    { SWIG_prefix "fill_with_set", (swig_wrapper_func) _wrap_fill_with_set, NULL},
    { SWIG_prefix "fill_with_unload", (swig_wrapper_func) _wrap_fill_with_unload, NULL},
    { SWIG_prefix "fill_with_check", (swig_wrapper_func) _wrap_fill_with_check, NULL},
    { SWIG_prefix "show_w", (swig_wrapper_func) _wrap_show_w, NULL},
    { SWIG_prefix "show_c", (swig_wrapper_func) _wrap_show_c, NULL},
    { SWIG_prefix "log_open", (swig_wrapper_func) _wrap_log_open, NULL},
    { SWIG_prefix "log_clear", (swig_wrapper_func) _wrap_log_clear, NULL},
    { SWIG_prefix "file_info", (swig_wrapper_func) _wrap_file_info, NULL},
    { SWIG_prefix "task_load", (swig_wrapper_func) _wrap_task_load, NULL},
    { SWIG_prefix "task_read", (swig_wrapper_func) _wrap_task_read, NULL},
    { SWIG_prefix "task_unload", (swig_wrapper_func) _wrap_task_unload, NULL},
    { SWIG_prefix "task_save", (swig_wrapper_func) _wrap_task_save, NULL},
    { SWIG_prefix "task_write", (swig_wrapper_func) _wrap_task_write, NULL},
    { SWIG_prefix "task_transform", (swig_wrapper_func) _wrap_task_transform, NULL},
    { SWIG_prefix "task_inverse_transform", (swig_wrapper_func) _wrap_task_inverse_transform, NULL},
    { SWIG_prefix "task_filter_by_defarea", (swig_wrapper_func) _wrap_task_filter_by_defarea, NULL},
    { SWIG_prefix "task_filter_by_func", (swig_wrapper_func) _wrap_task_filter_by_func, NULL},
    { SWIG_prefix "task_update_by_func", (swig_wrapper_func) _wrap_task_update_by_func, NULL},
    { SWIG_prefix "task_minx", (swig_wrapper_func) _wrap_task_minx, NULL},
    { SWIG_prefix "task_maxx", (swig_wrapper_func) _wrap_task_maxx, NULL},
    { SWIG_prefix "task_miny", (swig_wrapper_func) _wrap_task_miny, NULL},
    { SWIG_prefix "task_maxy", (swig_wrapper_func) _wrap_task_maxy, NULL},
    { SWIG_prefix "task_minz", (swig_wrapper_func) _wrap_task_minz, NULL},
    { SWIG_prefix "task_maxz", (swig_wrapper_func) _wrap_task_maxz, NULL},
    { SWIG_prefix "task_add_noise", (swig_wrapper_func) _wrap_task_add_noise, NULL},
    { SWIG_prefix "task_mean", (swig_wrapper_func) _wrap_task_mean, NULL},
    { SWIG_prefix "task_std", (swig_wrapper_func) _wrap_task_std, NULL},
    { SWIG_prefix "task_plus", (swig_wrapper_func) _wrap_task_plus, NULL},
    { SWIG_prefix "task_minus", (swig_wrapper_func) _wrap_task_minus, NULL},
    { SWIG_prefix "task_mult", (swig_wrapper_func) _wrap_task_mult, NULL},
    { SWIG_prefix "task_div", (swig_wrapper_func) _wrap_task_div, NULL},
    { SWIG_prefix "task_set", (swig_wrapper_func) _wrap_task_set, NULL},
    { SWIG_prefix "task_plus_real", (swig_wrapper_func) _wrap_task_plus_real, NULL},
    { SWIG_prefix "task_minus_real", (swig_wrapper_func) _wrap_task_minus_real, NULL},
    { SWIG_prefix "task_mult_real", (swig_wrapper_func) _wrap_task_mult_real, NULL},
    { SWIG_prefix "task_div_real", (swig_wrapper_func) _wrap_task_div_real, NULL},
    { SWIG_prefix "task_set_real", (swig_wrapper_func) _wrap_task_set_real, NULL},
    { SWIG_prefix "task_to_wtask", (swig_wrapper_func) _wrap_task_to_wtask, NULL},
    { SWIG_prefix "task_to_wtasks", (swig_wrapper_func) _wrap_task_to_wtasks, NULL},
    { SWIG_prefix "task_to_tasks", (swig_wrapper_func) _wrap_task_to_tasks, NULL},
    { SWIG_prefix "task_check", (swig_wrapper_func) _wrap_task_check, NULL},
    { SWIG_prefix "task_size", (swig_wrapper_func) _wrap_task_size, NULL},
    { SWIG_prefix "task_name", (swig_wrapper_func) _wrap_task_name, NULL},
    { SWIG_prefix "tasks_load", (swig_wrapper_func) _wrap_tasks_load, NULL},
    { SWIG_prefix "tasks_read", (swig_wrapper_func) _wrap_tasks_read, NULL},
    { SWIG_prefix "tasks_delall", (swig_wrapper_func) _wrap_tasks_delall, NULL},
    { SWIG_prefix "tasks_del", (swig_wrapper_func) _wrap_tasks_del, NULL},
    { SWIG_prefix "task_concat", (swig_wrapper_func) _wrap_task_concat, NULL},
    { SWIG_prefix "tasks_at", (swig_wrapper_func) _wrap_tasks_at, NULL},
    { SWIG_prefix "tasks_first", (swig_wrapper_func) _wrap_tasks_first, NULL},
    { SWIG_prefix "tasks_last", (swig_wrapper_func) _wrap_tasks_last, NULL},
    { SWIG_prefix "tasks_size", (swig_wrapper_func) _wrap_tasks_size, NULL},
    { SWIG_prefix "tasks_info", (swig_wrapper_func) _wrap_tasks_info, NULL},
    { SWIG_prefix "wtask_load", (swig_wrapper_func) _wrap_wtask_load, NULL},
    { SWIG_prefix "wtask_read", (swig_wrapper_func) _wrap_wtask_read, NULL},
    { SWIG_prefix "wtask_unload", (swig_wrapper_func) _wrap_wtask_unload, NULL},
    { SWIG_prefix "wtask_save", (swig_wrapper_func) _wrap_wtask_save, NULL},
    { SWIG_prefix "wtask_write", (swig_wrapper_func) _wrap_wtask_write, NULL},
    { SWIG_prefix "wtask_transform", (swig_wrapper_func) _wrap_wtask_transform, NULL},
    { SWIG_prefix "wtask_inverse_transform", (swig_wrapper_func) _wrap_wtask_inverse_transform, NULL},
    { SWIG_prefix "wtask_filter_by_defarea", (swig_wrapper_func) _wrap_wtask_filter_by_defarea, NULL},
    { SWIG_prefix "wtask_filter_by_func", (swig_wrapper_func) _wrap_wtask_filter_by_func, NULL},
    { SWIG_prefix "wtask_update_by_func", (swig_wrapper_func) _wrap_wtask_update_by_func, NULL},
    { SWIG_prefix "wtask_minx", (swig_wrapper_func) _wrap_wtask_minx, NULL},
    { SWIG_prefix "wtask_maxx", (swig_wrapper_func) _wrap_wtask_maxx, NULL},
    { SWIG_prefix "wtask_miny", (swig_wrapper_func) _wrap_wtask_miny, NULL},
    { SWIG_prefix "wtask_maxy", (swig_wrapper_func) _wrap_wtask_maxy, NULL},
    { SWIG_prefix "wtask_minz", (swig_wrapper_func) _wrap_wtask_minz, NULL},
    { SWIG_prefix "wtask_maxz", (swig_wrapper_func) _wrap_wtask_maxz, NULL},
    { SWIG_prefix "wtask_add_noise", (swig_wrapper_func) _wrap_wtask_add_noise, NULL},
    { SWIG_prefix "wtask_mean", (swig_wrapper_func) _wrap_wtask_mean, NULL},
    { SWIG_prefix "wtask_std", (swig_wrapper_func) _wrap_wtask_std, NULL},
    { SWIG_prefix "wtask_plus", (swig_wrapper_func) _wrap_wtask_plus, NULL},
    { SWIG_prefix "wtask_minus", (swig_wrapper_func) _wrap_wtask_minus, NULL},
    { SWIG_prefix "wtask_mult", (swig_wrapper_func) _wrap_wtask_mult, NULL},
    { SWIG_prefix "wtask_div", (swig_wrapper_func) _wrap_wtask_div, NULL},
    { SWIG_prefix "wtask_set", (swig_wrapper_func) _wrap_wtask_set, NULL},
    { SWIG_prefix "wtask_plus_real", (swig_wrapper_func) _wrap_wtask_plus_real, NULL},
    { SWIG_prefix "wtask_minus_real", (swig_wrapper_func) _wrap_wtask_minus_real, NULL},
    { SWIG_prefix "wtask_mult_real", (swig_wrapper_func) _wrap_wtask_mult_real, NULL},
    { SWIG_prefix "wtask_div_real", (swig_wrapper_func) _wrap_wtask_div_real, NULL},
    { SWIG_prefix "wtask_set_real", (swig_wrapper_func) _wrap_wtask_set_real, NULL},
    { SWIG_prefix "wtask_to_task", (swig_wrapper_func) _wrap_wtask_to_task, NULL},
    { SWIG_prefix "wtask_to_tasks", (swig_wrapper_func) _wrap_wtask_to_tasks, NULL},
    { SWIG_prefix "wtask_to_wtasks", (swig_wrapper_func) _wrap_wtask_to_wtasks, NULL},
    { SWIG_prefix "wtask_check", (swig_wrapper_func) _wrap_wtask_check, NULL},
    { SWIG_prefix "wtask_size", (swig_wrapper_func) _wrap_wtask_size, NULL},
    { SWIG_prefix "wtask_name", (swig_wrapper_func) _wrap_wtask_name, NULL},
    { SWIG_prefix "wtasks_load", (swig_wrapper_func) _wrap_wtasks_load, NULL},
    { SWIG_prefix "wtasks_read", (swig_wrapper_func) _wrap_wtasks_read, NULL},
    { SWIG_prefix "wtasks_delall", (swig_wrapper_func) _wrap_wtasks_delall, NULL},
    { SWIG_prefix "wtasks_del", (swig_wrapper_func) _wrap_wtasks_del, NULL},
    { SWIG_prefix "wtask_concat", (swig_wrapper_func) _wrap_wtask_concat, NULL},
    { SWIG_prefix "wtasks_at", (swig_wrapper_func) _wrap_wtasks_at, NULL},
    { SWIG_prefix "wtasks_first", (swig_wrapper_func) _wrap_wtasks_first, NULL},
    { SWIG_prefix "wtasks_last", (swig_wrapper_func) _wrap_wtasks_last, NULL},
    { SWIG_prefix "wtasks_size", (swig_wrapper_func) _wrap_wtasks_size, NULL},
    { SWIG_prefix "wtasks_info", (swig_wrapper_func) _wrap_wtasks_info, NULL},
    { SWIG_prefix "dynamic_unload", (swig_wrapper_func) _wrap_dynamic_unload, NULL},
    { SWIG_prefix "dynamic_load", (swig_wrapper_func) _wrap_dynamic_load, NULL},
    { SWIG_prefix "dynamics_load", (swig_wrapper_func) _wrap_dynamics_load, NULL},
    { SWIG_prefix "dynamics_delall", (swig_wrapper_func) _wrap_dynamics_delall, NULL},
    { SWIG_prefix "dynamics_info", (swig_wrapper_func) _wrap_dynamics_info, NULL},
    { SWIG_prefix "dynamic_name", (swig_wrapper_func) _wrap_dynamic_name, NULL},
    { SWIG_prefix "grid_save", (swig_wrapper_func) _wrap_grid_save, NULL},
    { SWIG_prefix "grid_load", (swig_wrapper_func) _wrap_grid_load, NULL},
    { SWIG_prefix "grid_unload", (swig_wrapper_func) _wrap_grid_unload, NULL},
    { SWIG_prefix "grid_auto", (swig_wrapper_func) _wrap_grid_auto, NULL},
    { SWIG_prefix "grid_auto2", (swig_wrapper_func) _wrap_grid_auto2, NULL},
    { SWIG_prefix "grid_get", (swig_wrapper_func) _wrap_grid_get, NULL},
    { SWIG_prefix "grid_get2", (swig_wrapper_func) _wrap_grid_get2, NULL},
    { SWIG_prefix "grid_get_for_task", (swig_wrapper_func) _wrap_grid_get_for_task, NULL},
    { SWIG_prefix "grid_get_for_task_step", (swig_wrapper_func) _wrap_grid_get_for_task_step, NULL},
    { SWIG_prefix "grid_get_from_func", (swig_wrapper_func) _wrap_grid_get_from_func, NULL},
    { SWIG_prefix "grid_get_for_func", (swig_wrapper_func) _wrap_grid_get_for_func, NULL},
    { SWIG_prefix "grid_get_for_func_step", (swig_wrapper_func) _wrap_grid_get_for_func_step, NULL},
    { SWIG_prefix "grid_check", (swig_wrapper_func) _wrap_grid_check, NULL},
    { SWIG_prefix "grid_info", (swig_wrapper_func) _wrap_grid_info, NULL},
    { SWIG_prefix "grid_getCountX", (swig_wrapper_func) _wrap_grid_getCountX, NULL},
    { SWIG_prefix "grid_getCountY", (swig_wrapper_func) _wrap_grid_getCountY, NULL},
    { SWIG_prefix "grid_getCoordNodeX", (swig_wrapper_func) _wrap_grid_getCoordNodeX, NULL},
    { SWIG_prefix "grid_getCoordNodeY", (swig_wrapper_func) _wrap_grid_getCoordNodeY, NULL},
    { SWIG_prefix "grid_getStepX", (swig_wrapper_func) _wrap_grid_getStepX, NULL},
    { SWIG_prefix "grid_getStepY", (swig_wrapper_func) _wrap_grid_getStepY, NULL},
    { SWIG_prefix "solve", (swig_wrapper_func) _wrap_solve, NULL},
    { SWIG_prefix "func_load", (swig_wrapper_func) _wrap_func_load, NULL},
    { SWIG_prefix "func_load_grd", (swig_wrapper_func) _wrap_func_load_grd, NULL},
    { SWIG_prefix "func_unload", (swig_wrapper_func) _wrap_func_unload, NULL},
    { SWIG_prefix "func_save", (swig_wrapper_func) _wrap_func_save, NULL},
    { SWIG_prefix "func_save_grd", (swig_wrapper_func) _wrap_func_save_grd, NULL},
    { SWIG_prefix "func_save_xyz", (swig_wrapper_func) _wrap_func_save_xyz, NULL},
    { SWIG_prefix "func_save_bmp", (swig_wrapper_func) _wrap_func_save_bmp, NULL},
    { SWIG_prefix "func_getValue", (swig_wrapper_func) _wrap_func_getValue, NULL},
    { SWIG_prefix "func_resid", (swig_wrapper_func) _wrap_func_resid, NULL},
    { SWIG_prefix "func_D1", (swig_wrapper_func) _wrap_func_D1, NULL},
    { SWIG_prefix "func_D2", (swig_wrapper_func) _wrap_func_D2, NULL},
    { SWIG_prefix "func_gradient", (swig_wrapper_func) _wrap_func_gradient, NULL},
    { SWIG_prefix "func_project", (swig_wrapper_func) _wrap_func_project, NULL},
    { SWIG_prefix "func_add_noise", (swig_wrapper_func) _wrap_func_add_noise, NULL},
    { SWIG_prefix "func_minz", (swig_wrapper_func) _wrap_func_minz, NULL},
    { SWIG_prefix "func_maxz", (swig_wrapper_func) _wrap_func_maxz, NULL},
    { SWIG_prefix "func_mean", (swig_wrapper_func) _wrap_func_mean, NULL},
    { SWIG_prefix "func_std", (swig_wrapper_func) _wrap_func_std, NULL},
    { SWIG_prefix "func_sum", (swig_wrapper_func) _wrap_func_sum, NULL},
    { SWIG_prefix "func_plus", (swig_wrapper_func) _wrap_func_plus, NULL},
    { SWIG_prefix "func_minus", (swig_wrapper_func) _wrap_func_minus, NULL},
    { SWIG_prefix "func_minus_undef", (swig_wrapper_func) _wrap_func_minus_undef, NULL},
    { SWIG_prefix "func_mult", (swig_wrapper_func) _wrap_func_mult, NULL},
    { SWIG_prefix "func_div", (swig_wrapper_func) _wrap_func_div, NULL},
    { SWIG_prefix "func_set", (swig_wrapper_func) _wrap_func_set, NULL},
    { SWIG_prefix "func_plus_real", (swig_wrapper_func) _wrap_func_plus_real, NULL},
    { SWIG_prefix "func_minus_real", (swig_wrapper_func) _wrap_func_minus_real, NULL},
    { SWIG_prefix "func_mult_real", (swig_wrapper_func) _wrap_func_mult_real, NULL},
    { SWIG_prefix "func_div_real", (swig_wrapper_func) _wrap_func_div_real, NULL},
    { SWIG_prefix "func_set_real", (swig_wrapper_func) _wrap_func_set_real, NULL},
    { SWIG_prefix "func_get_details_level", (swig_wrapper_func) _wrap_func_get_details_level, NULL},
    { SWIG_prefix "func_decomp", (swig_wrapper_func) _wrap_func_decomp, NULL},
    { SWIG_prefix "func_auto_decomp", (swig_wrapper_func) _wrap_func_auto_decomp, NULL},
    { SWIG_prefix "func_recons", (swig_wrapper_func) _wrap_func_recons, NULL},
    { SWIG_prefix "func_full_recons", (swig_wrapper_func) _wrap_func_full_recons, NULL},
    { SWIG_prefix "func_to_task", (swig_wrapper_func) _wrap_func_to_task, NULL},
    { SWIG_prefix "func_to_defarea", (swig_wrapper_func) _wrap_func_to_defarea, NULL},
    { SWIG_prefix "func_to_defareas", (swig_wrapper_func) _wrap_func_to_defareas, NULL},
    { SWIG_prefix "func_to_trend", (swig_wrapper_func) _wrap_func_to_trend, NULL},
    { SWIG_prefix "func_to_trends", (swig_wrapper_func) _wrap_func_to_trends, NULL},
    { SWIG_prefix "func_to_wfunc", (swig_wrapper_func) _wrap_func_to_wfunc, NULL},
    { SWIG_prefix "func_to_wfuncs", (swig_wrapper_func) _wrap_func_to_wfuncs, NULL},
    { SWIG_prefix "func_to_funcs", (swig_wrapper_func) _wrap_func_to_funcs, NULL},
    { SWIG_prefix "func_check", (swig_wrapper_func) _wrap_func_check, NULL},
    { SWIG_prefix "func_getCountX", (swig_wrapper_func) _wrap_func_getCountX, NULL},
    { SWIG_prefix "func_getCountY", (swig_wrapper_func) _wrap_func_getCountY, NULL},
    { SWIG_prefix "func_getStepX", (swig_wrapper_func) _wrap_func_getStepX, NULL},
    { SWIG_prefix "func_getStepY", (swig_wrapper_func) _wrap_func_getStepY, NULL},
    { SWIG_prefix "func_undef", (swig_wrapper_func) _wrap_func_undef, NULL},
    { SWIG_prefix "func_info", (swig_wrapper_func) _wrap_func_info, NULL},
    { SWIG_prefix "func_name", (swig_wrapper_func) _wrap_func_name, NULL},
    { SWIG_prefix "funcs_delall", (swig_wrapper_func) _wrap_funcs_delall, NULL},
    { SWIG_prefix "funcs_del", (swig_wrapper_func) _wrap_funcs_del, NULL},
    { SWIG_prefix "funcs_load", (swig_wrapper_func) _wrap_funcs_load, NULL},
    { SWIG_prefix "funcs_load_grd", (swig_wrapper_func) _wrap_funcs_load_grd, NULL},
    { SWIG_prefix "funcs_unload", (swig_wrapper_func) _wrap_funcs_unload, NULL},
    { SWIG_prefix "funcs_at", (swig_wrapper_func) _wrap_funcs_at, NULL},
    { SWIG_prefix "funcs_first", (swig_wrapper_func) _wrap_funcs_first, NULL},
    { SWIG_prefix "funcs_last", (swig_wrapper_func) _wrap_funcs_last, NULL},
    { SWIG_prefix "funcs_size", (swig_wrapper_func) _wrap_funcs_size, NULL},
    { SWIG_prefix "funcs_info", (swig_wrapper_func) _wrap_funcs_info, NULL},
    { SWIG_prefix "wfunc_load", (swig_wrapper_func) _wrap_wfunc_load, NULL},
    { SWIG_prefix "wfunc_load_grd", (swig_wrapper_func) _wrap_wfunc_load_grd, NULL},
    { SWIG_prefix "wfunc_unload", (swig_wrapper_func) _wrap_wfunc_unload, NULL},
    { SWIG_prefix "wfunc_save", (swig_wrapper_func) _wrap_wfunc_save, NULL},
    { SWIG_prefix "wfunc_save_grd", (swig_wrapper_func) _wrap_wfunc_save_grd, NULL},
    { SWIG_prefix "wfunc_save_xyz", (swig_wrapper_func) _wrap_wfunc_save_xyz, NULL},
    { SWIG_prefix "wfunc_save_bmp", (swig_wrapper_func) _wrap_wfunc_save_bmp, NULL},
    { SWIG_prefix "wfunc_getValue", (swig_wrapper_func) _wrap_wfunc_getValue, NULL},
    { SWIG_prefix "wfunc_add_noise", (swig_wrapper_func) _wrap_wfunc_add_noise, NULL},
    { SWIG_prefix "wfunc_minz", (swig_wrapper_func) _wrap_wfunc_minz, NULL},
    { SWIG_prefix "wfunc_maxz", (swig_wrapper_func) _wrap_wfunc_maxz, NULL},
    { SWIG_prefix "wfunc_mean", (swig_wrapper_func) _wrap_wfunc_mean, NULL},
    { SWIG_prefix "wfunc_std", (swig_wrapper_func) _wrap_wfunc_std, NULL},
    { SWIG_prefix "wfunc_plus", (swig_wrapper_func) _wrap_wfunc_plus, NULL},
    { SWIG_prefix "wfunc_minus", (swig_wrapper_func) _wrap_wfunc_minus, NULL},
    { SWIG_prefix "wfunc_mult", (swig_wrapper_func) _wrap_wfunc_mult, NULL},
    { SWIG_prefix "wfunc_div", (swig_wrapper_func) _wrap_wfunc_div, NULL},
    { SWIG_prefix "wfunc_set", (swig_wrapper_func) _wrap_wfunc_set, NULL},
    { SWIG_prefix "wfunc_plus_real", (swig_wrapper_func) _wrap_wfunc_plus_real, NULL},
    { SWIG_prefix "wfunc_mult_real", (swig_wrapper_func) _wrap_wfunc_mult_real, NULL},
    { SWIG_prefix "wfunc_div_real", (swig_wrapper_func) _wrap_wfunc_div_real, NULL},
    { SWIG_prefix "wfunc_set_real", (swig_wrapper_func) _wrap_wfunc_set_real, NULL},
    { SWIG_prefix "wfunc_get_details_level", (swig_wrapper_func) _wrap_wfunc_get_details_level, NULL},
    { SWIG_prefix "wfunc_decomp", (swig_wrapper_func) _wrap_wfunc_decomp, NULL},
    { SWIG_prefix "wfunc_auto_decomp", (swig_wrapper_func) _wrap_wfunc_auto_decomp, NULL},
    { SWIG_prefix "wfunc_recons", (swig_wrapper_func) _wrap_wfunc_recons, NULL},
    { SWIG_prefix "wfunc_full_recons", (swig_wrapper_func) _wrap_wfunc_full_recons, NULL},
    { SWIG_prefix "wfunc_to_wtask", (swig_wrapper_func) _wrap_wfunc_to_wtask, NULL},
    { SWIG_prefix "wfunc_to_func", (swig_wrapper_func) _wrap_wfunc_to_func, NULL},
    { SWIG_prefix "wfunc_to_funcs", (swig_wrapper_func) _wrap_wfunc_to_funcs, NULL},
    { SWIG_prefix "wfunc_to_wfuncs", (swig_wrapper_func) _wrap_wfunc_to_wfuncs, NULL},
    { SWIG_prefix "wfunc_check", (swig_wrapper_func) _wrap_wfunc_check, NULL},
    { SWIG_prefix "wfunc_getCountX", (swig_wrapper_func) _wrap_wfunc_getCountX, NULL},
    { SWIG_prefix "wfunc_getCountY", (swig_wrapper_func) _wrap_wfunc_getCountY, NULL},
    { SWIG_prefix "wfunc_getStepX", (swig_wrapper_func) _wrap_wfunc_getStepX, NULL},
    { SWIG_prefix "wfunc_getStepY", (swig_wrapper_func) _wrap_wfunc_getStepY, NULL},
    { SWIG_prefix "wfunc_undef", (swig_wrapper_func) _wrap_wfunc_undef, NULL},
    { SWIG_prefix "wfunc_info", (swig_wrapper_func) _wrap_wfunc_info, NULL},
    { SWIG_prefix "wfunc_name", (swig_wrapper_func) _wrap_wfunc_name, NULL},
    { SWIG_prefix "wfuncs_delall", (swig_wrapper_func) _wrap_wfuncs_delall, NULL},
    { SWIG_prefix "wfuncs_del", (swig_wrapper_func) _wrap_wfuncs_del, NULL},
    { SWIG_prefix "wfuncs_load", (swig_wrapper_func) _wrap_wfuncs_load, NULL},
    { SWIG_prefix "wfuncs_load_grd", (swig_wrapper_func) _wrap_wfuncs_load_grd, NULL},
    { SWIG_prefix "wfuncs_unload", (swig_wrapper_func) _wrap_wfuncs_unload, NULL},
    { SWIG_prefix "wfuncs_at", (swig_wrapper_func) _wrap_wfuncs_at, NULL},
    { SWIG_prefix "wfuncs_first", (swig_wrapper_func) _wrap_wfuncs_first, NULL},
    { SWIG_prefix "wfuncs_last", (swig_wrapper_func) _wrap_wfuncs_last, NULL},
    { SWIG_prefix "wfuncs_size", (swig_wrapper_func) _wrap_wfuncs_size, NULL},
    { SWIG_prefix "wfuncs_info", (swig_wrapper_func) _wrap_wfuncs_info, NULL},
    { SWIG_prefix "trend_load", (swig_wrapper_func) _wrap_trend_load, NULL},
    { SWIG_prefix "trend_load_grd", (swig_wrapper_func) _wrap_trend_load_grd, NULL},
    { SWIG_prefix "trend_unload", (swig_wrapper_func) _wrap_trend_unload, NULL},
    { SWIG_prefix "trend_save", (swig_wrapper_func) _wrap_trend_save, NULL},
    { SWIG_prefix "trend_save_grd", (swig_wrapper_func) _wrap_trend_save_grd, NULL},
    { SWIG_prefix "trend_save_xyz", (swig_wrapper_func) _wrap_trend_save_xyz, NULL},
    { SWIG_prefix "trend_save_bmp", (swig_wrapper_func) _wrap_trend_save_bmp, NULL},
    { SWIG_prefix "trend_getValue", (swig_wrapper_func) _wrap_trend_getValue, NULL},
    { SWIG_prefix "trend_resid", (swig_wrapper_func) _wrap_trend_resid, NULL},
    { SWIG_prefix "trend_project", (swig_wrapper_func) _wrap_trend_project, NULL},
    { SWIG_prefix "trend_minz", (swig_wrapper_func) _wrap_trend_minz, NULL},
    { SWIG_prefix "trend_maxz", (swig_wrapper_func) _wrap_trend_maxz, NULL},
    { SWIG_prefix "trend_mean", (swig_wrapper_func) _wrap_trend_mean, NULL},
    { SWIG_prefix "trend_std", (swig_wrapper_func) _wrap_trend_std, NULL},
    { SWIG_prefix "trend_plus", (swig_wrapper_func) _wrap_trend_plus, NULL},
    { SWIG_prefix "trend_minus", (swig_wrapper_func) _wrap_trend_minus, NULL},
    { SWIG_prefix "trend_minus_undef", (swig_wrapper_func) _wrap_trend_minus_undef, NULL},
    { SWIG_prefix "trend_mult", (swig_wrapper_func) _wrap_trend_mult, NULL},
    { SWIG_prefix "trend_div", (swig_wrapper_func) _wrap_trend_div, NULL},
    { SWIG_prefix "trend_set", (swig_wrapper_func) _wrap_trend_set, NULL},
    { SWIG_prefix "trend_plus_real", (swig_wrapper_func) _wrap_trend_plus_real, NULL},
    { SWIG_prefix "trend_minus_real", (swig_wrapper_func) _wrap_trend_minus_real, NULL},
    { SWIG_prefix "trend_mult_real", (swig_wrapper_func) _wrap_trend_mult_real, NULL},
    { SWIG_prefix "trend_div_real", (swig_wrapper_func) _wrap_trend_div_real, NULL},
    { SWIG_prefix "trend_set_real", (swig_wrapper_func) _wrap_trend_set_real, NULL},
    { SWIG_prefix "trend_get_details_level", (swig_wrapper_func) _wrap_trend_get_details_level, NULL},
    { SWIG_prefix "trend_decomp", (swig_wrapper_func) _wrap_trend_decomp, NULL},
    { SWIG_prefix "trend_auto_decomp", (swig_wrapper_func) _wrap_trend_auto_decomp, NULL},
    { SWIG_prefix "trend_recons", (swig_wrapper_func) _wrap_trend_recons, NULL},
    { SWIG_prefix "trend_full_recons", (swig_wrapper_func) _wrap_trend_full_recons, NULL},
    { SWIG_prefix "trend_to_func", (swig_wrapper_func) _wrap_trend_to_func, NULL},
    { SWIG_prefix "trend_to_funcs", (swig_wrapper_func) _wrap_trend_to_funcs, NULL},
    { SWIG_prefix "trend_to_trends", (swig_wrapper_func) _wrap_trend_to_trends, NULL},
    { SWIG_prefix "trend_check", (swig_wrapper_func) _wrap_trend_check, NULL},
    { SWIG_prefix "trend_getCountX", (swig_wrapper_func) _wrap_trend_getCountX, NULL},
    { SWIG_prefix "trend_getCountY", (swig_wrapper_func) _wrap_trend_getCountY, NULL},
    { SWIG_prefix "trend_getStepX", (swig_wrapper_func) _wrap_trend_getStepX, NULL},
    { SWIG_prefix "trend_getStepY", (swig_wrapper_func) _wrap_trend_getStepY, NULL},
    { SWIG_prefix "trend_undef", (swig_wrapper_func) _wrap_trend_undef, NULL},
    { SWIG_prefix "trend_info", (swig_wrapper_func) _wrap_trend_info, NULL},
    { SWIG_prefix "trend_name", (swig_wrapper_func) _wrap_trend_name, NULL},
    { SWIG_prefix "trends_delall", (swig_wrapper_func) _wrap_trends_delall, NULL},
    { SWIG_prefix "trends_del", (swig_wrapper_func) _wrap_trends_del, NULL},
    { SWIG_prefix "trends_load", (swig_wrapper_func) _wrap_trends_load, NULL},
    { SWIG_prefix "trends_load_grd", (swig_wrapper_func) _wrap_trends_load_grd, NULL},
    { SWIG_prefix "trends_unload", (swig_wrapper_func) _wrap_trends_unload, NULL},
    { SWIG_prefix "trends_at", (swig_wrapper_func) _wrap_trends_at, NULL},
    { SWIG_prefix "trends_first", (swig_wrapper_func) _wrap_trends_first, NULL},
    { SWIG_prefix "trends_last", (swig_wrapper_func) _wrap_trends_last, NULL},
    { SWIG_prefix "trends_size", (swig_wrapper_func) _wrap_trends_size, NULL},
    { SWIG_prefix "trends_info", (swig_wrapper_func) _wrap_trends_info, NULL},
    { SWIG_prefix "defarea_load", (swig_wrapper_func) _wrap_defarea_load, NULL},
    { SWIG_prefix "defarea_unload", (swig_wrapper_func) _wrap_defarea_unload, NULL},
    { SWIG_prefix "defarea_save", (swig_wrapper_func) _wrap_defarea_save, NULL},
    { SWIG_prefix "defarea_save_grd", (swig_wrapper_func) _wrap_defarea_save_grd, NULL},
    { SWIG_prefix "defarea_save_xyz", (swig_wrapper_func) _wrap_defarea_save_xyz, NULL},
    { SWIG_prefix "defarea_getValue", (swig_wrapper_func) _wrap_defarea_getValue, NULL},
    { SWIG_prefix "defarea_and", (swig_wrapper_func) _wrap_defarea_and, NULL},
    { SWIG_prefix "defarea_not", (swig_wrapper_func) _wrap_defarea_not, NULL},
    { SWIG_prefix "defarea_or", (swig_wrapper_func) _wrap_defarea_or, NULL},
    { SWIG_prefix "defarea_xor", (swig_wrapper_func) _wrap_defarea_xor, NULL},
    { SWIG_prefix "defarea_to_func", (swig_wrapper_func) _wrap_defarea_to_func, NULL},
    { SWIG_prefix "defarea_to_funcs", (swig_wrapper_func) _wrap_defarea_to_funcs, NULL},
    { SWIG_prefix "defarea_to_defareas", (swig_wrapper_func) _wrap_defarea_to_defareas, NULL},
    { SWIG_prefix "defarea_check", (swig_wrapper_func) _wrap_defarea_check, NULL},
    { SWIG_prefix "defarea_by_func", (swig_wrapper_func) _wrap_defarea_by_func, NULL},
    { SWIG_prefix "defarea_apply_to_func", (swig_wrapper_func) _wrap_defarea_apply_to_func, NULL},
    { SWIG_prefix "defarea_name", (swig_wrapper_func) _wrap_defarea_name, NULL},
    { SWIG_prefix "defareas_delall", (swig_wrapper_func) _wrap_defareas_delall, NULL},
    { SWIG_prefix "defareas_del", (swig_wrapper_func) _wrap_defareas_del, NULL},
    { SWIG_prefix "defareas_load", (swig_wrapper_func) _wrap_defareas_load, NULL},
    { SWIG_prefix "defareas_load_grd", (swig_wrapper_func) _wrap_defareas_load_grd, NULL},
    { SWIG_prefix "defareas_unload", (swig_wrapper_func) _wrap_defareas_unload, NULL},
    { SWIG_prefix "defareas_at", (swig_wrapper_func) _wrap_defareas_at, NULL},
    { SWIG_prefix "defareas_first", (swig_wrapper_func) _wrap_defareas_first, NULL},
    { SWIG_prefix "defareas_last", (swig_wrapper_func) _wrap_defareas_last, NULL},
    { SWIG_prefix "defareas_size", (swig_wrapper_func) _wrap_defareas_size, NULL},
    { SWIG_prefix "defareas_info", (swig_wrapper_func) _wrap_defareas_info, NULL},
    { SWIG_prefix "curv_read", (swig_wrapper_func) _wrap_curv_read, NULL},
    { SWIG_prefix "curv_write", (swig_wrapper_func) _wrap_curv_write, NULL},
    { SWIG_prefix "curv_save", (swig_wrapper_func) _wrap_curv_save, NULL},
    { SWIG_prefix "curv_load", (swig_wrapper_func) _wrap_curv_load, NULL},
    { SWIG_prefix "curv_unload", (swig_wrapper_func) _wrap_curv_unload, NULL},
    { SWIG_prefix "curv_to_iso", (swig_wrapper_func) _wrap_curv_to_iso, NULL},
    { SWIG_prefix "curv_to_isos", (swig_wrapper_func) _wrap_curv_to_isos, NULL},
    { SWIG_prefix "curv_to_wiso", (swig_wrapper_func) _wrap_curv_to_wiso, NULL},
    { SWIG_prefix "curv_to_wisos", (swig_wrapper_func) _wrap_curv_to_wisos, NULL},
    { SWIG_prefix "curv_to_flt", (swig_wrapper_func) _wrap_curv_to_flt, NULL},
    { SWIG_prefix "curv_to_flts", (swig_wrapper_func) _wrap_curv_to_flts, NULL},
    { SWIG_prefix "curv_to_area", (swig_wrapper_func) _wrap_curv_to_area, NULL},
    { SWIG_prefix "curv_to_areas", (swig_wrapper_func) _wrap_curv_to_areas, NULL},
    { SWIG_prefix "curv_to_warea", (swig_wrapper_func) _wrap_curv_to_warea, NULL},
    { SWIG_prefix "curv_to_wareas", (swig_wrapper_func) _wrap_curv_to_wareas, NULL},
    { SWIG_prefix "curv_check", (swig_wrapper_func) _wrap_curv_check, NULL},
    { SWIG_prefix "curv_set", (swig_wrapper_func) _wrap_curv_set, NULL},
    { SWIG_prefix "curv_name", (swig_wrapper_func) _wrap_curv_name, NULL},
    { SWIG_prefix "curvs_delall", (swig_wrapper_func) _wrap_curvs_delall, NULL},
    { SWIG_prefix "curvs_del", (swig_wrapper_func) _wrap_curvs_del, NULL},
    { SWIG_prefix "curvs_read", (swig_wrapper_func) _wrap_curvs_read, NULL},
    { SWIG_prefix "curvs_load", (swig_wrapper_func) _wrap_curvs_load, NULL},
    { SWIG_prefix "curvs_at", (swig_wrapper_func) _wrap_curvs_at, NULL},
    { SWIG_prefix "curvs_first", (swig_wrapper_func) _wrap_curvs_first, NULL},
    { SWIG_prefix "curvs_last", (swig_wrapper_func) _wrap_curvs_last, NULL},
    { SWIG_prefix "curvs_size", (swig_wrapper_func) _wrap_curvs_size, NULL},
    { SWIG_prefix "curvs_info", (swig_wrapper_func) _wrap_curvs_info, NULL},
    { SWIG_prefix "flt_read", (swig_wrapper_func) _wrap_flt_read, NULL},
    { SWIG_prefix "flt_write", (swig_wrapper_func) _wrap_flt_write, NULL},
    { SWIG_prefix "flt_save", (swig_wrapper_func) _wrap_flt_save, NULL},
    { SWIG_prefix "flt_load", (swig_wrapper_func) _wrap_flt_load, NULL},
    { SWIG_prefix "flt_unload", (swig_wrapper_func) _wrap_flt_unload, NULL},
    { SWIG_prefix "flt_to_curv", (swig_wrapper_func) _wrap_flt_to_curv, NULL},
    { SWIG_prefix "flt_to_curvs", (swig_wrapper_func) _wrap_flt_to_curvs, NULL},
    { SWIG_prefix "flt_to_grid_line", (swig_wrapper_func) _wrap_flt_to_grid_line, NULL},
    { SWIG_prefix "flt_to_flts", (swig_wrapper_func) _wrap_flt_to_flts, NULL},
    { SWIG_prefix "flt_check", (swig_wrapper_func) _wrap_flt_check, NULL},
    { SWIG_prefix "flt_set", (swig_wrapper_func) _wrap_flt_set, NULL},
    { SWIG_prefix "flt_name", (swig_wrapper_func) _wrap_flt_name, NULL},
    { SWIG_prefix "flts_delall", (swig_wrapper_func) _wrap_flts_delall, NULL},
    { SWIG_prefix "flts_del", (swig_wrapper_func) _wrap_flts_del, NULL},
    { SWIG_prefix "flts_read", (swig_wrapper_func) _wrap_flts_read, NULL},
    { SWIG_prefix "flts_load", (swig_wrapper_func) _wrap_flts_load, NULL},
    { SWIG_prefix "flts_at", (swig_wrapper_func) _wrap_flts_at, NULL},
    { SWIG_prefix "flts_first", (swig_wrapper_func) _wrap_flts_first, NULL},
    { SWIG_prefix "flts_last", (swig_wrapper_func) _wrap_flts_last, NULL},
    { SWIG_prefix "flts_size", (swig_wrapper_func) _wrap_flts_size, NULL},
    { SWIG_prefix "flts_info", (swig_wrapper_func) _wrap_flts_info, NULL},
    { SWIG_prefix "iso_read", (swig_wrapper_func) _wrap_iso_read, NULL},
    { SWIG_prefix "iso_write", (swig_wrapper_func) _wrap_iso_write, NULL},
    { SWIG_prefix "iso_save", (swig_wrapper_func) _wrap_iso_save, NULL},
    { SWIG_prefix "iso_load", (swig_wrapper_func) _wrap_iso_load, NULL},
    { SWIG_prefix "iso_unload", (swig_wrapper_func) _wrap_iso_unload, NULL},
    { SWIG_prefix "iso_to_wiso", (swig_wrapper_func) _wrap_iso_to_wiso, NULL},
    { SWIG_prefix "iso_to_wisos", (swig_wrapper_func) _wrap_iso_to_wisos, NULL},
    { SWIG_prefix "iso_to_curv", (swig_wrapper_func) _wrap_iso_to_curv, NULL},
    { SWIG_prefix "iso_to_curvs", (swig_wrapper_func) _wrap_iso_to_curvs, NULL},
    { SWIG_prefix "iso_to_isos", (swig_wrapper_func) _wrap_iso_to_isos, NULL},
    { SWIG_prefix "iso_check", (swig_wrapper_func) _wrap_iso_check, NULL},
    { SWIG_prefix "iso_value", (swig_wrapper_func) _wrap_iso_value, NULL},
    { SWIG_prefix "iso_set", (swig_wrapper_func) _wrap_iso_set, NULL},
    { SWIG_prefix "iso_name", (swig_wrapper_func) _wrap_iso_name, NULL},
    { SWIG_prefix "isos_delall", (swig_wrapper_func) _wrap_isos_delall, NULL},
    { SWIG_prefix "isos_del", (swig_wrapper_func) _wrap_isos_del, NULL},
    { SWIG_prefix "isos_read", (swig_wrapper_func) _wrap_isos_read, NULL},
    { SWIG_prefix "isos_load", (swig_wrapper_func) _wrap_isos_load, NULL},
    { SWIG_prefix "isos_at", (swig_wrapper_func) _wrap_isos_at, NULL},
    { SWIG_prefix "isos_first", (swig_wrapper_func) _wrap_isos_first, NULL},
    { SWIG_prefix "isos_last", (swig_wrapper_func) _wrap_isos_last, NULL},
    { SWIG_prefix "isos_size", (swig_wrapper_func) _wrap_isos_size, NULL},
    { SWIG_prefix "isos_info", (swig_wrapper_func) _wrap_isos_info, NULL},
    { SWIG_prefix "wiso_read", (swig_wrapper_func) _wrap_wiso_read, NULL},
    { SWIG_prefix "wiso_write", (swig_wrapper_func) _wrap_wiso_write, NULL},
    { SWIG_prefix "wiso_save", (swig_wrapper_func) _wrap_wiso_save, NULL},
    { SWIG_prefix "wiso_load", (swig_wrapper_func) _wrap_wiso_load, NULL},
    { SWIG_prefix "wiso_unload", (swig_wrapper_func) _wrap_wiso_unload, NULL},
    { SWIG_prefix "wiso_to_iso", (swig_wrapper_func) _wrap_wiso_to_iso, NULL},
    { SWIG_prefix "wiso_to_isos", (swig_wrapper_func) _wrap_wiso_to_isos, NULL},
    { SWIG_prefix "wiso_to_curv", (swig_wrapper_func) _wrap_wiso_to_curv, NULL},
    { SWIG_prefix "wiso_to_curvs", (swig_wrapper_func) _wrap_wiso_to_curvs, NULL},
    { SWIG_prefix "wiso_to_wisos", (swig_wrapper_func) _wrap_wiso_to_wisos, NULL},
    { SWIG_prefix "wiso_check", (swig_wrapper_func) _wrap_wiso_check, NULL},
    { SWIG_prefix "wiso_value", (swig_wrapper_func) _wrap_wiso_value, NULL},
    { SWIG_prefix "wiso_weight", (swig_wrapper_func) _wrap_wiso_weight, NULL},
    { SWIG_prefix "wiso_set", (swig_wrapper_func) _wrap_wiso_set, NULL},
    { SWIG_prefix "wiso_name", (swig_wrapper_func) _wrap_wiso_name, NULL},
    { SWIG_prefix "wisos_delall", (swig_wrapper_func) _wrap_wisos_delall, NULL},
    { SWIG_prefix "wisos_del", (swig_wrapper_func) _wrap_wisos_del, NULL},
    { SWIG_prefix "wisos_read", (swig_wrapper_func) _wrap_wisos_read, NULL},
    { SWIG_prefix "wisos_load", (swig_wrapper_func) _wrap_wisos_load, NULL},
    { SWIG_prefix "wisos_at", (swig_wrapper_func) _wrap_wisos_at, NULL},
    { SWIG_prefix "wisos_first", (swig_wrapper_func) _wrap_wisos_first, NULL},
    { SWIG_prefix "wisos_last", (swig_wrapper_func) _wrap_wisos_last, NULL},
    { SWIG_prefix "wisos_size", (swig_wrapper_func) _wrap_wisos_size, NULL},
    { SWIG_prefix "wisos_info", (swig_wrapper_func) _wrap_wisos_info, NULL},
    { SWIG_prefix "area_read", (swig_wrapper_func) _wrap_area_read, NULL},
    { SWIG_prefix "area_write", (swig_wrapper_func) _wrap_area_write, NULL},
    { SWIG_prefix "area_save", (swig_wrapper_func) _wrap_area_save, NULL},
    { SWIG_prefix "area_load", (swig_wrapper_func) _wrap_area_load, NULL},
    { SWIG_prefix "area_unload", (swig_wrapper_func) _wrap_area_unload, NULL},
    { SWIG_prefix "area_to_curv", (swig_wrapper_func) _wrap_area_to_curv, NULL},
    { SWIG_prefix "area_to_curvs", (swig_wrapper_func) _wrap_area_to_curvs, NULL},
    { SWIG_prefix "area_to_areas", (swig_wrapper_func) _wrap_area_to_areas, NULL},
    { SWIG_prefix "area_check", (swig_wrapper_func) _wrap_area_check, NULL},
    { SWIG_prefix "area_value", (swig_wrapper_func) _wrap_area_value, NULL},
    { SWIG_prefix "area_value_undef", (swig_wrapper_func) _wrap_area_value_undef, NULL},
    { SWIG_prefix "area_set", (swig_wrapper_func) _wrap_area_set, NULL},
    { SWIG_prefix "area_name", (swig_wrapper_func) _wrap_area_name, NULL},
    { SWIG_prefix "areas_delall", (swig_wrapper_func) _wrap_areas_delall, NULL},
    { SWIG_prefix "areas_del", (swig_wrapper_func) _wrap_areas_del, NULL},
    { SWIG_prefix "areas_read", (swig_wrapper_func) _wrap_areas_read, NULL},
    { SWIG_prefix "areas_load", (swig_wrapper_func) _wrap_areas_load, NULL},
    { SWIG_prefix "areas_at", (swig_wrapper_func) _wrap_areas_at, NULL},
    { SWIG_prefix "areas_first", (swig_wrapper_func) _wrap_areas_first, NULL},
    { SWIG_prefix "areas_last", (swig_wrapper_func) _wrap_areas_last, NULL},
    { SWIG_prefix "areas_size", (swig_wrapper_func) _wrap_areas_size, NULL},
    { SWIG_prefix "areas_info", (swig_wrapper_func) _wrap_areas_info, NULL},
    { SWIG_prefix "warea_read", (swig_wrapper_func) _wrap_warea_read, NULL},
    { SWIG_prefix "warea_write", (swig_wrapper_func) _wrap_warea_write, NULL},
    { SWIG_prefix "warea_save", (swig_wrapper_func) _wrap_warea_save, NULL},
    { SWIG_prefix "warea_load", (swig_wrapper_func) _wrap_warea_load, NULL},
    { SWIG_prefix "warea_unload", (swig_wrapper_func) _wrap_warea_unload, NULL},
    { SWIG_prefix "warea_set", (swig_wrapper_func) _wrap_warea_set, NULL},
    { SWIG_prefix "warea_name", (swig_wrapper_func) _wrap_warea_name, NULL},
    { SWIG_prefix "warea_to_area", (swig_wrapper_func) _wrap_warea_to_area, NULL},
    { SWIG_prefix "warea_to_areas", (swig_wrapper_func) _wrap_warea_to_areas, NULL},
    { SWIG_prefix "warea_to_curv", (swig_wrapper_func) _wrap_warea_to_curv, NULL},
    { SWIG_prefix "warea_to_curvs", (swig_wrapper_func) _wrap_warea_to_curvs, NULL},
    { SWIG_prefix "warea_to_wareas", (swig_wrapper_func) _wrap_warea_to_wareas, NULL},
    { SWIG_prefix "warea_check", (swig_wrapper_func) _wrap_warea_check, NULL},
    { SWIG_prefix "warea_value", (swig_wrapper_func) _wrap_warea_value, NULL},
    { SWIG_prefix "warea_weight", (swig_wrapper_func) _wrap_warea_weight, NULL},
    { SWIG_prefix "wareas_delall", (swig_wrapper_func) _wrap_wareas_delall, NULL},
    { SWIG_prefix "wareas_del", (swig_wrapper_func) _wrap_wareas_del, NULL},
    { SWIG_prefix "wareas_read", (swig_wrapper_func) _wrap_wareas_read, NULL},
    { SWIG_prefix "wareas_load", (swig_wrapper_func) _wrap_wareas_load, NULL},
    { SWIG_prefix "wareas_at", (swig_wrapper_func) _wrap_wareas_at, NULL},
    { SWIG_prefix "wareas_first", (swig_wrapper_func) _wrap_wareas_first, NULL},
    { SWIG_prefix "wareas_last", (swig_wrapper_func) _wrap_wareas_last, NULL},
    { SWIG_prefix "wareas_size", (swig_wrapper_func) _wrap_wareas_size, NULL},
    { SWIG_prefix "wareas_info", (swig_wrapper_func) _wrap_wareas_info, NULL},
    { SWIG_prefix "cntr_read", (swig_wrapper_func) _wrap_cntr_read, NULL},
    { SWIG_prefix "cntr_write", (swig_wrapper_func) _wrap_cntr_write, NULL},
    { SWIG_prefix "cntr_save", (swig_wrapper_func) _wrap_cntr_save, NULL},
    { SWIG_prefix "cntr_load", (swig_wrapper_func) _wrap_cntr_load, NULL},
    { SWIG_prefix "cntr_unload", (swig_wrapper_func) _wrap_cntr_unload, NULL},
    { SWIG_prefix "cntr_plus_real", (swig_wrapper_func) _wrap_cntr_plus_real, NULL},
    { SWIG_prefix "cntr_minus_real", (swig_wrapper_func) _wrap_cntr_minus_real, NULL},
    { SWIG_prefix "cntr_mult_real", (swig_wrapper_func) _wrap_cntr_mult_real, NULL},
    { SWIG_prefix "cntr_div_real", (swig_wrapper_func) _wrap_cntr_div_real, NULL},
    { SWIG_prefix "cntr_to_wcntr", (swig_wrapper_func) _wrap_cntr_to_wcntr, NULL},
    { SWIG_prefix "cntr_to_wcntrs", (swig_wrapper_func) _wrap_cntr_to_wcntrs, NULL},
    { SWIG_prefix "cntr_to_curv", (swig_wrapper_func) _wrap_cntr_to_curv, NULL},
    { SWIG_prefix "cntr_to_curvs", (swig_wrapper_func) _wrap_cntr_to_curvs, NULL},
    { SWIG_prefix "cntr_to_cntrs", (swig_wrapper_func) _wrap_cntr_to_cntrs, NULL},
    { SWIG_prefix "cntr_check", (swig_wrapper_func) _wrap_cntr_check, NULL},
    { SWIG_prefix "cntr_set", (swig_wrapper_func) _wrap_cntr_set, NULL},
    { SWIG_prefix "cntr_name", (swig_wrapper_func) _wrap_cntr_name, NULL},
    { SWIG_prefix "cntrs_delall", (swig_wrapper_func) _wrap_cntrs_delall, NULL},
    { SWIG_prefix "cntrs_del", (swig_wrapper_func) _wrap_cntrs_del, NULL},
    { SWIG_prefix "cntrs_read", (swig_wrapper_func) _wrap_cntrs_read, NULL},
    { SWIG_prefix "cntrs_load", (swig_wrapper_func) _wrap_cntrs_load, NULL},
    { SWIG_prefix "cntrs_at", (swig_wrapper_func) _wrap_cntrs_at, NULL},
    { SWIG_prefix "cntrs_first", (swig_wrapper_func) _wrap_cntrs_first, NULL},
    { SWIG_prefix "cntrs_last", (swig_wrapper_func) _wrap_cntrs_last, NULL},
    { SWIG_prefix "cntrs_size", (swig_wrapper_func) _wrap_cntrs_size, NULL},
    { SWIG_prefix "cntrs_info", (swig_wrapper_func) _wrap_cntrs_info, NULL},
    { SWIG_prefix "cntrs_to_wcntrs", (swig_wrapper_func) _wrap_cntrs_to_wcntrs, NULL},
    { SWIG_prefix "wcntr_read", (swig_wrapper_func) _wrap_wcntr_read, NULL},
    { SWIG_prefix "wcntr_write", (swig_wrapper_func) _wrap_wcntr_write, NULL},
    { SWIG_prefix "wcntr_save", (swig_wrapper_func) _wrap_wcntr_save, NULL},
    { SWIG_prefix "wcntr_load", (swig_wrapper_func) _wrap_wcntr_load, NULL},
    { SWIG_prefix "wcntr_unload", (swig_wrapper_func) _wrap_wcntr_unload, NULL},
    { SWIG_prefix "wcntr_plus_real", (swig_wrapper_func) _wrap_wcntr_plus_real, NULL},
    { SWIG_prefix "wcntr_minus_real", (swig_wrapper_func) _wrap_wcntr_minus_real, NULL},
    { SWIG_prefix "wcntr_mult_real", (swig_wrapper_func) _wrap_wcntr_mult_real, NULL},
    { SWIG_prefix "wcntr_div_real", (swig_wrapper_func) _wrap_wcntr_div_real, NULL},
    { SWIG_prefix "wcntr_to_cntr", (swig_wrapper_func) _wrap_wcntr_to_cntr, NULL},
    { SWIG_prefix "wcntr_to_cntrs", (swig_wrapper_func) _wrap_wcntr_to_cntrs, NULL},
    { SWIG_prefix "wcntr_to_curv", (swig_wrapper_func) _wrap_wcntr_to_curv, NULL},
    { SWIG_prefix "wcntr_to_curvs", (swig_wrapper_func) _wrap_wcntr_to_curvs, NULL},
    { SWIG_prefix "wcntr_to_wcntrs", (swig_wrapper_func) _wrap_wcntr_to_wcntrs, NULL},
    { SWIG_prefix "wcntr_check", (swig_wrapper_func) _wrap_wcntr_check, NULL},
    { SWIG_prefix "wcntr_set", (swig_wrapper_func) _wrap_wcntr_set, NULL},
    { SWIG_prefix "wcntr_name", (swig_wrapper_func) _wrap_wcntr_name, NULL},
    { SWIG_prefix "wcntrs_delall", (swig_wrapper_func) _wrap_wcntrs_delall, NULL},
    { SWIG_prefix "wcntrs_del", (swig_wrapper_func) _wrap_wcntrs_del, NULL},
    { SWIG_prefix "wcntrs_read", (swig_wrapper_func) _wrap_wcntrs_read, NULL},
    { SWIG_prefix "wcntrs_load", (swig_wrapper_func) _wrap_wcntrs_load, NULL},
    { SWIG_prefix "wcntrs_at", (swig_wrapper_func) _wrap_wcntrs_at, NULL},
    { SWIG_prefix "wcntrs_first", (swig_wrapper_func) _wrap_wcntrs_first, NULL},
    { SWIG_prefix "wcntrs_last", (swig_wrapper_func) _wrap_wcntrs_last, NULL},
    { SWIG_prefix "wcntrs_size", (swig_wrapper_func) _wrap_wcntrs_size, NULL},
    { SWIG_prefix "wcntrs_info", (swig_wrapper_func) _wrap_wcntrs_info, NULL},
    { SWIG_prefix "grid_line_check", (swig_wrapper_func) _wrap_grid_line_check, NULL},
    { SWIG_prefix "grid_line_write", (swig_wrapper_func) _wrap_grid_line_write, NULL},
    { SWIG_prefix "grid_line_save", (swig_wrapper_func) _wrap_grid_line_save, NULL},
    { SWIG_prefix "grid_line_unload", (swig_wrapper_func) _wrap_grid_line_unload, NULL},
    { SWIG_prefix "trace_grid_line", (swig_wrapper_func) _wrap_trace_grid_line, NULL},
    { SWIG_prefix "grid_line_fill_true", (swig_wrapper_func) _wrap_grid_line_fill_true, NULL},
    { SWIG_prefix "bg_color", (swig_wrapper_func) _wrap_bg_color, NULL},
    { SWIG_prefix "task_color", (swig_wrapper_func) _wrap_task_color, NULL},
    { SWIG_prefix "wtask_color", (swig_wrapper_func) _wrap_wtask_color, NULL},
    { SWIG_prefix "flt_color", (swig_wrapper_func) _wrap_flt_color, NULL},
    { SWIG_prefix "iso_color", (swig_wrapper_func) _wrap_iso_color, NULL},
    { SWIG_prefix "wiso_color", (swig_wrapper_func) _wrap_wiso_color, NULL},
    { SWIG_prefix "init", (swig_wrapper_func) _wrap_init, NULL},
    { SWIG_prefix "draw", (swig_wrapper_func) _wrap_draw, NULL},
    { SWIG_prefix "draw_obj", (swig_wrapper_func) _wrap_draw_obj, NULL},
    { SWIG_prefix "cleanup", (swig_wrapper_func) _wrap_cleanup, NULL},
    { SWIG_prefix "moving", (swig_wrapper_func) _wrap_moving, NULL},
    { SWIG_prefix "init_quat", (swig_wrapper_func) _wrap_init_quat, NULL},
    { SWIG_prefix "get_selection_from_screen", (swig_wrapper_func) _wrap_get_selection_from_screen, NULL},
    { SWIG_prefix "draw_minz", (swig_wrapper_func) _wrap_draw_minz, NULL},
    { SWIG_prefix "draw_maxz", (swig_wrapper_func) _wrap_draw_maxz, NULL},
    { SWIG_prefix "grid_show", (swig_wrapper_func) _wrap_grid_show, NULL},
    { SWIG_prefix "task_show", (swig_wrapper_func) _wrap_task_show, NULL},
    { SWIG_prefix "wtask_show", (swig_wrapper_func) _wrap_wtask_show, NULL},
    { SWIG_prefix "func_show", (swig_wrapper_func) _wrap_func_show, NULL},
    { SWIG_prefix "wfunc_show", (swig_wrapper_func) _wrap_wfunc_show, NULL},
    { SWIG_prefix "trend_show", (swig_wrapper_func) _wrap_trend_show, NULL},
    { SWIG_prefix "defarea_show", (swig_wrapper_func) _wrap_defarea_show, NULL},
    { SWIG_prefix "iso_show", (swig_wrapper_func) _wrap_iso_show, NULL},
    { SWIG_prefix "wiso_show", (swig_wrapper_func) _wrap_wiso_show, NULL},
    { SWIG_prefix "curv_show", (swig_wrapper_func) _wrap_curv_show, NULL},
    { SWIG_prefix "flt_show", (swig_wrapper_func) _wrap_flt_show, NULL},
    { SWIG_prefix "warea_show", (swig_wrapper_func) _wrap_warea_show, NULL},
    { SWIG_prefix "cntr_show", (swig_wrapper_func) _wrap_cntr_show, NULL},
    { SWIG_prefix "wcntr_show", (swig_wrapper_func) _wrap_wcntr_show, NULL},
    { SWIG_prefix "mem_show", (swig_wrapper_func) _wrap_mem_show, NULL},
    { SWIG_prefix "file_show", (swig_wrapper_func) _wrap_file_show, NULL},
    {0, 0, 0}
};

static swig_var_info swig_variables[] = {
    { SWIG_prefix "tol", 0, (swig_variable_func) _wrap_tol_get,(swig_variable_func) _wrap_tol_set},
    { SWIG_prefix "datafile_mode", 0, (swig_variable_func) _wrap_datafile_mode_get,(swig_variable_func) _wrap_datafile_mode_set},
    { SWIG_prefix "priority", 0, (swig_variable_func) _wrap_priority_get,(swig_variable_func) _wrap_priority_set},
    { SWIG_prefix "undef_value", 0, (swig_variable_func) _wrap_undef_value_get,(swig_variable_func) _wrap_undef_value_set},
    { SWIG_prefix "sor_omega", 0, (swig_variable_func) _wrap_sor_omega_get,(swig_variable_func) _wrap_sor_omega_set},
    { SWIG_prefix "ssor_omega", 0, (swig_variable_func) _wrap_ssor_omega_get,(swig_variable_func) _wrap_ssor_omega_set},
    { SWIG_prefix "map_name", 0, (swig_variable_func) _wrap_map_name_get,(swig_variable_func) _wrap_map_name_set},
    { SWIG_prefix "solver_code", 0, (swig_variable_func) _wrap_solver_code_get,(swig_variable_func) _wrap_solver_code_set},
    { SWIG_prefix "bg_color_red", 0, (swig_variable_func) _wrap_bg_color_red_get,(swig_variable_func) _wrap_bg_color_red_set},
    { SWIG_prefix "bg_color_green", 0, (swig_variable_func) _wrap_bg_color_green_get,(swig_variable_func) _wrap_bg_color_green_set},
    { SWIG_prefix "bg_color_blue", 0, (swig_variable_func) _wrap_bg_color_blue_get,(swig_variable_func) _wrap_bg_color_blue_set},
    { SWIG_prefix "bg_color_alpha", 0, (swig_variable_func) _wrap_bg_color_alpha_get,(swig_variable_func) _wrap_bg_color_alpha_set},
    { SWIG_prefix "task_color_red", 0, (swig_variable_func) _wrap_task_color_red_get,(swig_variable_func) _wrap_task_color_red_set},
    { SWIG_prefix "task_color_green", 0, (swig_variable_func) _wrap_task_color_green_get,(swig_variable_func) _wrap_task_color_green_set},
    { SWIG_prefix "task_color_blue", 0, (swig_variable_func) _wrap_task_color_blue_get,(swig_variable_func) _wrap_task_color_blue_set},
    { SWIG_prefix "task_color_alpha", 0, (swig_variable_func) _wrap_task_color_alpha_get,(swig_variable_func) _wrap_task_color_alpha_set},
    { SWIG_prefix "wtask_color_red", 0, (swig_variable_func) _wrap_wtask_color_red_get,(swig_variable_func) _wrap_wtask_color_red_set},
    { SWIG_prefix "wtask_color_green", 0, (swig_variable_func) _wrap_wtask_color_green_get,(swig_variable_func) _wrap_wtask_color_green_set},
    { SWIG_prefix "wtask_color_blue", 0, (swig_variable_func) _wrap_wtask_color_blue_get,(swig_variable_func) _wrap_wtask_color_blue_set},
    { SWIG_prefix "wtask_color_alpha", 0, (swig_variable_func) _wrap_wtask_color_alpha_get,(swig_variable_func) _wrap_wtask_color_alpha_set},
    { SWIG_prefix "iso_color_red", 0, (swig_variable_func) _wrap_iso_color_red_get,(swig_variable_func) _wrap_iso_color_red_set},
    { SWIG_prefix "iso_color_green", 0, (swig_variable_func) _wrap_iso_color_green_get,(swig_variable_func) _wrap_iso_color_green_set},
    { SWIG_prefix "iso_color_blue", 0, (swig_variable_func) _wrap_iso_color_blue_get,(swig_variable_func) _wrap_iso_color_blue_set},
    { SWIG_prefix "iso_color_alpha", 0, (swig_variable_func) _wrap_iso_color_alpha_get,(swig_variable_func) _wrap_iso_color_alpha_set},
    { SWIG_prefix "curv_color_red", 0, (swig_variable_func) _wrap_curv_color_red_get,(swig_variable_func) _wrap_curv_color_red_set},
    { SWIG_prefix "curv_color_green", 0, (swig_variable_func) _wrap_curv_color_green_get,(swig_variable_func) _wrap_curv_color_green_set},
    { SWIG_prefix "curv_color_blue", 0, (swig_variable_func) _wrap_curv_color_blue_get,(swig_variable_func) _wrap_curv_color_blue_set},
    { SWIG_prefix "curv_color_alpha", 0, (swig_variable_func) _wrap_curv_color_alpha_get,(swig_variable_func) _wrap_curv_color_alpha_set},
    { SWIG_prefix "flt_color_red", 0, (swig_variable_func) _wrap_flt_color_red_get,(swig_variable_func) _wrap_flt_color_red_set},
    { SWIG_prefix "flt_color_green", 0, (swig_variable_func) _wrap_flt_color_green_get,(swig_variable_func) _wrap_flt_color_green_set},
    { SWIG_prefix "flt_color_blue", 0, (swig_variable_func) _wrap_flt_color_blue_get,(swig_variable_func) _wrap_flt_color_blue_set},
    { SWIG_prefix "flt_color_alpha", 0, (swig_variable_func) _wrap_flt_color_alpha_get,(swig_variable_func) _wrap_flt_color_alpha_set},
    { SWIG_prefix "warea_color_red", 0, (swig_variable_func) _wrap_warea_color_red_get,(swig_variable_func) _wrap_warea_color_red_set},
    { SWIG_prefix "warea_color_green", 0, (swig_variable_func) _wrap_warea_color_green_get,(swig_variable_func) _wrap_warea_color_green_set},
    { SWIG_prefix "warea_color_blue", 0, (swig_variable_func) _wrap_warea_color_blue_get,(swig_variable_func) _wrap_warea_color_blue_set},
    { SWIG_prefix "warea_color_alpha", 0, (swig_variable_func) _wrap_warea_color_alpha_get,(swig_variable_func) _wrap_warea_color_alpha_set},
    { SWIG_prefix "area_color_red", 0, (swig_variable_func) _wrap_area_color_red_get,(swig_variable_func) _wrap_area_color_red_set},
    { SWIG_prefix "area_color_green", 0, (swig_variable_func) _wrap_area_color_green_get,(swig_variable_func) _wrap_area_color_green_set},
    { SWIG_prefix "area_color_blue", 0, (swig_variable_func) _wrap_area_color_blue_get,(swig_variable_func) _wrap_area_color_blue_set},
    { SWIG_prefix "area_color_alpha", 0, (swig_variable_func) _wrap_area_color_alpha_get,(swig_variable_func) _wrap_area_color_alpha_set},
    { SWIG_prefix "grid_amount_x", 0, (swig_variable_func) _wrap_grid_amount_x_get,(swig_variable_func) _wrap_grid_amount_x_set},
    { SWIG_prefix "grid_amount_y", 0, (swig_variable_func) _wrap_grid_amount_y_get,(swig_variable_func) _wrap_grid_amount_y_set},
    { SWIG_prefix "grid_amount_z", 0, (swig_variable_func) _wrap_grid_amount_z_get,(swig_variable_func) _wrap_grid_amount_z_set},
    { SWIG_prefix "x_shift", 0, (swig_variable_func) _wrap_x_shift_get,(swig_variable_func) _wrap_x_shift_set},
    { SWIG_prefix "y_shift", 0, (swig_variable_func) _wrap_y_shift_get,(swig_variable_func) _wrap_y_shift_set},
    { SWIG_prefix "scale", 0, (swig_variable_func) _wrap_scale_get,(swig_variable_func) _wrap_scale_set},
    { SWIG_prefix "z_scale", 0, (swig_variable_func) _wrap_z_scale_get,(swig_variable_func) _wrap_z_scale_set},
    { SWIG_prefix "axis_labels", 0, (swig_variable_func) _wrap_axis_labels_get,(swig_variable_func) _wrap_axis_labels_set},
    { SWIG_prefix "point_size", 0, (swig_variable_func) _wrap_point_size_get,(swig_variable_func) _wrap_point_size_set},
    { SWIG_prefix "isoline", 0, (swig_variable_func) _wrap_isoline_get,(swig_variable_func) _wrap_isoline_set},
    { SWIG_prefix "draw_task", 0, (swig_variable_func) _wrap_draw_task_get,(swig_variable_func) _wrap_draw_task_set},
    { SWIG_prefix "draw_wtask", 0, (swig_variable_func) _wrap_draw_wtask_get,(swig_variable_func) _wrap_draw_wtask_set},
    { SWIG_prefix "draw_func", 0, (swig_variable_func) _wrap_draw_func_get,(swig_variable_func) _wrap_draw_func_set},
    { SWIG_prefix "draw_wfunc", 0, (swig_variable_func) _wrap_draw_wfunc_get,(swig_variable_func) _wrap_draw_wfunc_set},
    { SWIG_prefix "draw_trend", 0, (swig_variable_func) _wrap_draw_trend_get,(swig_variable_func) _wrap_draw_trend_set},
    { SWIG_prefix "draw_iso", 0, (swig_variable_func) _wrap_draw_iso_get,(swig_variable_func) _wrap_draw_iso_set},
    { SWIG_prefix "draw_curv", 0, (swig_variable_func) _wrap_draw_curv_get,(swig_variable_func) _wrap_draw_curv_set},
    { SWIG_prefix "draw_wiso", 0, (swig_variable_func) _wrap_draw_wiso_get,(swig_variable_func) _wrap_draw_wiso_set},
    { SWIG_prefix "draw_cntr", 0, (swig_variable_func) _wrap_draw_cntr_get,(swig_variable_func) _wrap_draw_cntr_set},
    { SWIG_prefix "draw_pcntr", 0, (swig_variable_func) _wrap_draw_pcntr_get,(swig_variable_func) _wrap_draw_pcntr_set},
    { SWIG_prefix "draw_wcntr", 0, (swig_variable_func) _wrap_draw_wcntr_get,(swig_variable_func) _wrap_draw_wcntr_set},
    { SWIG_prefix "draw_area", 0, (swig_variable_func) _wrap_draw_area_get,(swig_variable_func) _wrap_draw_area_set},
    { SWIG_prefix "draw_warea", 0, (swig_variable_func) _wrap_draw_warea_get,(swig_variable_func) _wrap_draw_warea_set},
    { SWIG_prefix "draw_parea", 0, (swig_variable_func) _wrap_draw_parea_get,(swig_variable_func) _wrap_draw_parea_set},
    { SWIG_prefix "draw_flt", 0, (swig_variable_func) _wrap_draw_flt_get,(swig_variable_func) _wrap_draw_flt_set},
    { SWIG_prefix "draw_grid", 0, (swig_variable_func) _wrap_draw_grid_get,(swig_variable_func) _wrap_draw_grid_set},
    { SWIG_prefix "draw_defarea", 0, (swig_variable_func) _wrap_draw_defarea_get,(swig_variable_func) _wrap_draw_defarea_set},
    { SWIG_prefix "light", 0, (swig_variable_func) _wrap_light_get,(swig_variable_func) _wrap_light_set},
    { SWIG_prefix "smooth", 0, (swig_variable_func) _wrap_smooth_get,(swig_variable_func) _wrap_smooth_set},
    { SWIG_prefix "fix_axes", 0, (swig_variable_func) _wrap_fix_axes_get,(swig_variable_func) _wrap_fix_axes_set},
    { SWIG_prefix "minx", 0, (swig_variable_func) _wrap_minx_get,(swig_variable_func) _wrap_minx_set},
    { SWIG_prefix "maxx", 0, (swig_variable_func) _wrap_maxx_get,(swig_variable_func) _wrap_maxx_set},
    { SWIG_prefix "miny", 0, (swig_variable_func) _wrap_miny_get,(swig_variable_func) _wrap_miny_set},
    { SWIG_prefix "maxy", 0, (swig_variable_func) _wrap_maxy_get,(swig_variable_func) _wrap_maxy_set},
    { SWIG_prefix "minz", 0, (swig_variable_func) _wrap_minz_get,(swig_variable_func) _wrap_minz_set},
    { SWIG_prefix "maxz", 0, (swig_variable_func) _wrap_maxz_get,(swig_variable_func) _wrap_maxz_set},
    { SWIG_prefix "show_x_from", 0, (swig_variable_func) _wrap_show_x_from_get,(swig_variable_func) _wrap_show_x_from_set},
    { SWIG_prefix "show_x_to", 0, (swig_variable_func) _wrap_show_x_to_get,(swig_variable_func) _wrap_show_x_to_set},
    { SWIG_prefix "show_y_from", 0, (swig_variable_func) _wrap_show_y_from_get,(swig_variable_func) _wrap_show_y_from_set},
    { SWIG_prefix "show_y_to", 0, (swig_variable_func) _wrap_show_y_to_get,(swig_variable_func) _wrap_show_y_to_set},
    { SWIG_prefix "show_in_area", 0, (swig_variable_func) _wrap_show_in_area_get,(swig_variable_func) _wrap_show_in_area_set},
    {0,0,0,0}
};

static swig_const_info swig_constants[] = {
{ SWIG_TCL_STRING,  (char*)"REAL_NAME", 0, 0, (void *)"double", 0},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_surfit__task[] = {{"_p_surfit__task", 0, "surfit::task *"},{"_p_surfit__task"},{0}};
static swig_type_info _swigt__p_surfit__area[] = {{"_p_surfit__area", 0, "surfit::area *"},{"_p_surfit__area"},{0}};
static swig_type_info _swigt__p_surfit__trend[] = {{"_p_surfit__trend", 0, "surfit::trend *"},{"_p_surfit__trend"},{0}};
static swig_type_info _swigt__p_surfit__flt[] = {{"_p_surfit__flt", 0, "surfit::flt *"},{"_p_surfit__flt"},{0}};
static swig_type_info _swigt__p_surfit__wcntr[] = {{"_p_surfit__wcntr", 0, "surfit::wcntr *"},{"_p_surfit__wcntr"},{0}};
static swig_type_info _swigt__p_surfit__wfunc[] = {{"_p_surfit__wfunc", 0, "surfit::wfunc *"},{"_p_surfit__wfunc"},{0}};
static swig_type_info _swigt__p_surfit__defarea[] = {{"_p_surfit__defarea", 0, "surfit::defarea *"},{"_p_surfit__defarea"},{0}};
static swig_type_info _swigt__p_surfit__cntr[] = {{"_p_surfit__cntr", 0, "surfit::cntr *"},{"_p_surfit__cntr"},{0}};
static swig_type_info _swigt__p_surfit__func[] = {{"_p_surfit__func", 0, "surfit::func *"},{"_p_surfit__func"},{0}};
static swig_type_info _swigt__p_surfit__curv[] = {{"_p_surfit__curv", 0, "surfit::curv *"},{"_p_surfit__curv"},{0}};
static swig_type_info _swigt__p_surfit__dynamic[] = {{"_p_surfit__dynamic", 0, "surfit::dynamic *"},{"_p_surfit__dynamic"},{0}};
static swig_type_info _swigt__p_surfit__wiso[] = {{"_p_surfit__wiso", 0, "surfit::wiso *"},{"_p_surfit__wiso"},{0}};
static swig_type_info _swigt__p_surfit__iso[] = {{"_p_surfit__iso", 0, "surfit::iso *"},{"_p_surfit__iso"},{0}};
static swig_type_info _swigt__p_surfit__warea[] = {{"_p_surfit__warea", 0, "surfit::warea *"},{"_p_surfit__warea"},{0}};
static swig_type_info _swigt__p_surfit__wtask[] = {{"_p_surfit__wtask", 0, "surfit::wtask *"},{"_p_surfit__wtask"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_surfit__task, 
_swigt__p_surfit__area, 
_swigt__p_surfit__trend, 
_swigt__p_surfit__flt, 
_swigt__p_surfit__wcntr, 
_swigt__p_surfit__wfunc, 
_swigt__p_surfit__defarea, 
_swigt__p_surfit__cntr, 
_swigt__p_surfit__func, 
_swigt__p_surfit__curv, 
_swigt__p_surfit__dynamic, 
_swigt__p_surfit__wiso, 
_swigt__p_surfit__iso, 
_swigt__p_surfit__warea, 
_swigt__p_surfit__wtask, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

#ifdef __cplusplus
}
#endif

SWIGEXPORT(int) SWIG_init(Tcl_Interp *interp) {
    int i;
    static int added_types = 0;
    if (interp == 0) return TCL_ERROR;
    #ifdef USE_TCL_STUBS
    if (Tcl_InitStubs(interp, (char*)"8.1", 0) == NULL) {
        return TCL_ERROR;
    }
    #endif
    
    Tcl_PkgProvide(interp, (char*)SWIG_name, (char*)SWIG_version);
    
    #ifdef SWIG_namespace
    Tcl_Eval(interp, "namespace eval " SWIG_namespace " { }");
    #endif
    if (!added_types) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        added_types = 1;
    }
    for (i = 0; swig_commands[i].name; i++) {
        Tcl_CreateObjCommand(interp, (char *) swig_commands[i].name, (swig_wrapper_func) swig_commands[i].wrapper, swig_commands[i].clientdata, NULL);
    }
    for (i = 0; swig_variables[i].name; i++) {
        Tcl_SetVar(interp, (char *) swig_variables[i].name, (char *) "", TCL_GLOBAL_ONLY);
        Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_READS | TCL_GLOBAL_ONLY, (Tcl_VarTraceProc *) swig_variables[i].get, (ClientData) swig_variables[i].addr);
        Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_WRITES | TCL_GLOBAL_ONLY, (Tcl_VarTraceProc *) swig_variables[i].set, (ClientData) swig_variables[i].addr);
    }
    SWIG_InstallConstants(interp, swig_constants);
    
    
    surfit::surfit_init_variables(interp);
    
    return TCL_OK;
}

