/*! \page get_start Getting started

<H2>Content</H2>
\li <A href="#starting">Starting <TT><B>surfit</B></TT></A>
\li <A href="#loading">Loading data</A>
\li <A href="#grid">Creating grid</A>
\li <A href="#gridding">Gridding</A>
\li <A href="#saving">Saving results</A>
\li <A href="#visual">Visualizing results</A>

<H2><A NAME="starting">Starting surfit</A></H2>
<TT><B>surfit</B></TT> based on Tcl scripting language, so first of all you must
start tclsh. It means that you must have Tcl installed on your 
computer. 

After that you can load libsurfit shared library (or dll) with command:

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<pre>
$ load libsurfit[info sharedlibextension]
</pre>
</TD>
</TR>
</TABLE>

Under Windows this command can be simplified:

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<pre>
$ load libsurfit
</pre>
</TD>
</TR>
</TABLE>

Under Unix you can type

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<pre>
$ load libsurfit.so
</pre>
</TD>
</TR>
</TABLE>

If libsurfit was succesfully loaded into memory, you would see the license text:

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
surfit version 2.1, Copyright (c) 2002-2006 M.V.Dmitrievsky & V.N.Kutrunov
surfit comes with ABSOLUTELY NO WARRANTY; for details type `show_w'.
This is free software, and you are welcome to redistribute it
under certain conditions; type `show_c' for details.
</PRE></TT>
</TD>
</TR>
</TABLE>

A common error received by first-time users is the following:

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
$ load libsurfit.so
couldn't load file "libsurfit.so": libsurfit.so: cannot open shared object file:
No such file or directory
$
</PRE></TT>
</TD>
</TR>
</TABLE>

<H3>Unix environment</H3>

This error is generated because the dynamic linker can't locate the libsurfit.so library. 
When shared libraries are loaded, the system normally only checks a few standard locations 
such as /usr/lib and /usr/local/lib. To fix this problem, there are several things you can do. 
First, you can set the LD_LIBRARY_PATH environment variable to include the directory with 
libsurfit library. If setting LD_LIBRARY_PATH, be aware that setting this variable can introduce 
a noticeable performance impact on all other applications that you run. 
To set it only for Tcl, you might want to do this instead: 

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
$ env LD_LIBRARY_PATH=/home/beazley/projects/lib tclsh
</PRE></TT>
</TD>
</TR>
</TABLE>
         
Finally, you can use a command such as <TT>ldconfig</TT> to add additional search paths to the default 
system configuration (this requires root access and you will need to read the man pages).

<H3>Windows environment</H3>
This error is generated because system can't locate the libsurfit.dll library. To fix this probelm
you must set the PATH environment variable to the directory with libsurfit.dll:

<STRONG>(Windows 95/98/Me)</STRONG>:
The search path in Windows is normally specified in the autoexec.bat
file, which is typically located in the root directory (c:\). To
add the surfit installation directory to your search path do
the following from an MS-DOS Prompt Window:
\li Type the following:
<BR><TT>edit c:\\autoexec.bat</TT><BR>
\li The contents of your autoexec.bat file will appear in a
text editor. Find the line in your autoexec.bat that looks
similar to the following:
<BR><TT>PATH C:\\DOS;C:\\WINDOWS;C:\\NETWORK;C:\\NAV<BR></TT>
\li At the end of this line add the following:
<BR><TT>;"c:\program files\surfit-2.1\bin"<BR></TT>
This assumes that you have installed surfit
(libsurfit.dll) in the c:\\program files\\surfit-2.1\\bin
directory. If you have installed it in another directory,
verify that you have entered an appropriate path. The
leading semicolon is only necessary if there is not
already a semicolon specified at the end of the "PATH"
line.
\li Press Alt+F+X. You will be prompted to save the file
before exiting. Enter Y.
\li Close any open applications and restart your PC.
You may now access libsurfit.dll from any directory
without specifying a path.
An alternative to steps 2 and 3 above is to add the following line
at the end of your autoexec.bat file:
SET PATH = "C:\program files\surfit\bin";%PATH%

<STRONG>(Windows NT/Windows 2000)</STRONG>:
\li Close any open MS-DOS Prompt Windows.
\li Select Settings | Control Panel from the Start Menu.
\li In the Control Panel, double click the System icon. The System (Properties) dialog appears.
\li Select the Environment Tab.
\li Select the PATH variable in the System (Environment) Variables or User (Environment) Variables boxes. If you
are unable to locate the PATH variable, enter the following in the Variable box:
<BR>
<TT>path</TT><BR>
Enter something similar to the following in the Value box:
<BR>
<TT>"c:\program files\surfit-2.1\bin"</TT><BR>

<H2><A NAME="loading">Loading data to surfit</A></H2>

<H3> Loading from text files </H3>

To examine data, already loaded use \ref mem_info command.

<H4>loading points</H4>

The \ref pnts_read command reads formatted text files containing interpolation scattered data points 
coordinates. The text file should organized as a rectangular table of numbers, separated by blanks, with one row 
per line, and an equal number of elements in each row.  For example, outside of <TT><B>surfit</B></TT>, create a 
text file containing these four lines: 

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
    16.0     3.0     2.0    13.0
     5.0    10.0    11.0     8.0
     9.0     6.0     7.0    12.0
     4.0    15.0    14.0     1.0
</PRE></TT>
</TD>
</TR>
</TABLE>

Store the file under the name points.txt Then the command 

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
$ \ref pnts_read points.txt my_points 4 1 2 3
13/01/05 15:02:52 : reading points "my_points" from file points.txt
</PRE></TT>
</TD>
</TR>
</TABLE>

reads the file and creates the \ref d_points "points" dataset. This dataset contains 4 points 
with X,Y and Z coordinates placed in first, second and third columns. If points.txt consists 
of only 3 columns: 

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
    16.0     3.0     2.0
     5.0    10.0    11.0
     9.0     6.0     7.0
     4.0    15.0    14.0
</PRE></TT>
</TD>
</TR>
</TABLE>

then the command arguments can be truncated:

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
$ \ref pnts_read points.txt my_points
13/01/05 15:02:52 : reading points "my_points" from file points.txt
</PRE></TT>
</TD>
</TR>
</TABLE>

You can get some info about \ref d_points "points" datasets with following commands:

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
# Get number of \ref d_points "points" dataset:
$ \ref pnts_size
1
# If there is no \ref d_points "points" datasets in memory, surfit returns 0.
#
# Print \ref d_points "points" name (for first dataset)
$ \ref pnts_getName 0
13/01/05 15:02:52 : my_points
#
# Print \ref d_points "points" name (for second dataset) 
$ \ref pnts_getName 1
13/01/05 15:02:52 : Error! class surfit::d_points (1) : bad element requested
#
# Get number of points in points dataset
$ \ref pnts_getCount
4
$ Minimum and maximum values:
$ \ref pnts_minx
4.0
$ \ref pnts_maxx
16.0
$ \ref pnts_miny
3.0
$ \ref pnts_maxy
15.0
$ \ref pnts_minz
2.0
$ \ref pnts_maxz
14.0
</PRE></TT>
</TD>
</TR>
</TABLE>

\ref tcl_pnts "Here" you can browse all commands for \ref d_points "points".

<H4>loading curves</H4>

surfit supports several types of curves:
<TABLE BORDER="1" COLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR><TD><B>\ref d_curv "curve"</B>  </TD><TD>2D piecewise linear curve<TD></TR>
<TR><TD><B>\ref d_area "area"</B>  </TD><TD>polygonal region<TD></TR>
<TR><TD><B>\ref d_cntr "contour"</B>  </TD><TD>3D piecewise linear curve<TD></TR>
</TABLE>

The curves reading commands read formatted text files containing coordinates of curve nodes. 
The text file should organized as a rectangular table of numbers, separated by blanks, with one row per line, 
and an equal number of elements in each row. For example, outside of surfit, create a text file curve.txt containing 
these lines:

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
57099.085411 	60514.295924
57065.433147 	60505.330833
57003.367936 	60511.976722
56999.6438 	60513.47112
56948.876992 	60541.501355
56917.649718 	60581.114875
56914.83462 	60637.571493
56919.935389 	60652.716872
56959.468869 	60684.079163
56995.964528 	60685.666331
57018.666043 	60682.271289
57060.443913 	60665.765085
57102.780849 	60632.737514
57119.301496 	60610.562283
57133.154687 	60592.618067
57138.674487 	60577.882496
57131.297193 	60533.391477
57116.652575 	60516.980407
57099.085411 	60514.295924
</PRE></TT>
</TD>
</TR>
</TABLE>

To read curve from file curve.txt use command:
<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
$ \ref curv_read curve.txt my_curve
14/01/05 11:00:12 : reading curve "my_curve" from file curve.txt
1
</PRE></TT>
</TD>
</TR>
</TABLE>

<H4>loading surfaces </H4>

\ref d_surf "surfaces" can be loaded from Surfer GRD-ASCII and <TT><B>surfit</B></TT> datafile format. 
To load surface from Surfer GRD-ASCII file use the command:

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
$ \ref surf_load_grd surface.grd my_surface
14/01/05 16:32:50 : loading surface from Surfer GRD-ASCII format file surface.grd
1
</PRE></TT>
</TD>
</TR>
</TABLE>

To load surface from <TT><B>surfit</B></TT> datafile use the command:

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
$ \ref surf_load surface.dat my_surface
14/01/05 16:33:20 : loading surf "my_surface" from file surface.dat
1
</PRE></TT>
</TD>
</TR>
</TABLE>

\ref tcl_surf "Here" you can browse all commands for \ref d_surf "surfaces".

<H2><A NAME="grid">Creating grid</A></H2>
surfit uses equdistant \ref d_grid "grid" for gridding procedures. This grid can be described with
only 6 parameters:
\li 	X-coordinate of the first node of the grid 	
\li 	X-coordinate of the last node of the grid 	
\li 	cell size in X-direction
\li 	Y-coordinate of the first node of the grid 	
\li	Y-coordinate of the last node of the grid 	
\li 	cell size in Y-direction

You can create \ref d_grid "grid" object with \ref grid_get command. For example, command

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
$ \ref grid_get 0 100 10 0 200 20 my_grid
15/01/05 22:38:32 : grid: (0.00 <-> 100.00) / 10.00; (0.00 <-> 200.00) / 20.00.
</PRE></TT>
</TD>
</TR>
</TABLE>

In most cases you can use \ref grid command with only 2 parameters to specify cell sizes:

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
$ \ref grid 10 20
</PRE></TT>
</TD>
</TR>
</TABLE>

surfit automatically produces \ref d_grid "grid" with cells of specified size.
This grid will cover all data objects, loaded into memory.
  
<H2><A NAME="gridding">Gridding</A></H2>

Gridding methods produce a regularly spaced, rectangular array of Z values from regularly and irregularly 
spaced XYZ data. The term "irregularly spaced" means that the points follow no particular 
pattern over the extent of the map, so there are many "holes" where data are missing. 
Gridding fills in these holes by extrapolating or interpolating Z values at those locations 
where no data exists.

For each data, loaded into surfit memory you can specify 
\ref tcl_rules "gridding rule", which describes how to use your data in \ref surfit "surfit 
gridding algorithm".

Gridding procedure consists of 4 steps:
\li <a href="#loading">load data</a> into memory
\li <a href="#grid">create grid</a>
\li create ordered set of \ref tcl_rules "gridding rules"
\li execute \ref surfit gridding algorithm

Here is some examples:

	<UL>
	<LI>
	<a href="points__exact_8tcl-example.html">Interpolation of scattered data points</a>
	<LI>
	<a href="trend_8tcl-example.html">Interpolation of scattered data points with trend and fault</a>
	<LI>
	<a href="points__approx_8tcl-example.html">Approximation of scattered data points</a>
	<LI>
	<a href="curve_8tcl-example.html">Interpolation/approximation of curves with constant values</a>
	<LI>
	<a href="contour_8tcl-example.html">Interpolation/approximation of contours</a>
	<LI>
	<a href="area_8tcl-example.html">Interpolation/approximation of areas</a>
	<LI>
	<a href="surface_8tcl-example.html">Interpolation of surface</a>
	<LI>
	<a href="surface__add_8tcl-example.html">Approximation of surface</a>
        </LI>
	</UL>

<H2><A NAME="saving">Saving results</A></H2>

After <A href="#gridding">gridding</A> procedure result saves as new \ref d_surf "surface" named with \ref map_name
variable value. You can export
it to Surfer GRD-ASCII format with command \ref surf_save_grd or to <TT><B>surfit</B></TT> datafile with command
\ref surf_save. Also you can save your results into <TT><B>surfit</B></TT> datafile with all other data in 
memory by command \ref file_save.

<H2><A NAME="visual">Visualising results</A></H2>

The simplest way to visualise your results is to use <B><TT>funner</TT></B> program. This program can be
founded here: <A HREF="http://www.gridding.info">www.gridding.info</A>.
<B><TT>funner</TT></B> accepts both Surfer GRD-ASCII and surfit datafiles.

\htmlonly
<P ALIGN=CENTER>
<A HREF="funner.jpg">
<IMG alt="funner window" src="funner_small.jpg" border="0">
</A>
</P>
<P ALIGN=CENTER> Funner window screenshot </P>
\endhtmlonly

Also you can select file from command line:

<TABLE BORDER="0" BGCOLOR="#E0E0E0" WIDTH="50%" ID="Table4">
<TR>
<TD>
<TT><PRE>
$ funner my_map.dat
</PRE></TT>
</TD>
</TR>
</TABLE>
                       
*/